import base64;exec base64.b64decode('import urllib , urllib2 , re , xbmcplugin , xbmcgui , xbmc , xbmcaddon
import os , sys , time , xbmcvfs , glob , shutil , datetime , zipfile , ntpath
import subprocess , threading
import yt , downloader , checkPath
import binascii
import hashlib
import speedtest
import extract
try :
 from sqlite3 import dbapi2 as database
except :
 from pysqlite2 import dbapi2 as database
 if 64 - 64: i11iIiiIii
from addon . common . addon import Addon
from addon . common . net import Net
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
######################################################
o0OO00 = 'plugin.program.totalinstaller'
oo = 'The Community Portal'
if 27 - 27: oO0OooOoO * o0Oo
i1IiI1I11 = xbmcaddon . Addon ( id = o0OO00 )
zip = i1IiI1I11 . getSetting ( 'zip' )
IIiIiII11i = i1IiI1I11 . getSetting ( 'localcopy' )
o0oOOo0O0Ooo = i1IiI1I11 . getSetting ( 'private' )
I1ii11iIi11i = i1IiI1I11 . getSetting ( 'openelec' )
I1IiI = i1IiI1I11 . getSetting ( 'favourites' )
o0OOO = i1IiI1I11 . getSetting ( 'sources' )
iIiiiI = i1IiI1I11 . getSetting ( 'repositories' )
Iii1ii1II11i = i1IiI1I11 . getSetting ( 'enablekeyword' )
iI111iI = i1IiI1I11 . getSetting ( 'keywordpath' )
IiII = i1IiI1I11 . getSetting ( 'keywordname' )
iI1Ii11111iIi = i1IiI1I11 . getSetting ( 'mastercopy' )
i1i1II = i1IiI1I11 . getSetting ( 'username' ) . replace ( ' ' , '%20' )
O0oo0OO0 = i1IiI1I11 . getSetting ( 'password' )
I1i1iiI1 = i1IiI1I11 . getSetting ( 'versionoverride' )
iiIIIII1i1iI = i1IiI1I11 . getSetting ( 'debug' )
o0oO0 = i1IiI1I11 . getSetting ( 'login' )
oo00 = i1IiI1I11 . getSetting ( 'addonportal' )
o00 = i1IiI1I11 . getSetting ( 'maintenance' )
Oo0oO0ooo = i1IiI1I11 . getSetting ( 'hardwareportal' )
o0oOoO00o = i1IiI1I11 . getSetting ( 'maintenance' )
i1 = i1IiI1I11 . getSetting ( 'latestnews' )
oOOoo00O0O = i1IiI1I11 . getSetting ( 'tutorialportal' )
i1111 = i1IiI1I11 . getSetting ( 'startupvideo' )
i11 = i1IiI1I11 . getSetting ( 'startupvideopath' )
I11 = i1IiI1I11 . getSetting ( 'wizard' )
Oo0o0000o0o0 = i1IiI1I11 . getSetting ( 'wizardurl1' )
oOo0oooo00o = i1IiI1I11 . getSetting ( 'wizardname1' )
oO0o0o0ooO0oO = i1IiI1I11 . getSetting ( 'wizardurl2' )
oo0o0O00 = i1IiI1I11 . getSetting ( 'wizardname2' )
oO = i1IiI1I11 . getSetting ( 'wizardurl3' )
i1iiIIiiI111 = i1IiI1I11 . getSetting ( 'wizardname3' )
oooOOOOO = i1IiI1I11 . getSetting ( 'wizardurl4' )
i1iiIII111ii = i1IiI1I11 . getSetting ( 'wizardname4' )
i1iIIi1 = i1IiI1I11 . getSetting ( 'wizardurl5' )
ii11iIi1I = i1IiI1I11 . getSetting ( 'wizardname5' )
iI111I11I1I1 = xbmcgui . Dialog ( )
OOooO0OOoo = xbmcgui . DialogProgress ( )
iIii1 = xbmc . translatePath ( 'special://home/' )
oOOoO0 = xbmc . translatePath ( os . path . join ( 'special://home/userdata' , '' ) )
O0OoO000O0OO = os . path . join ( oOOoO0 , 'addon_data' )
iiI1IiI = os . path . join ( iIii1 , 'CP_Profiles' )
II = os . path . join ( iiI1IiI , 'Master' )
ooOoOoo0O = os . path . join ( oOOoO0 , 'Database' )
OooO0 = os . path . join ( oOOoO0 , 'Thumbnails' )
II11iiii1Ii = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' ) )
OO0o = xbmc . translatePath ( os . path . join ( 'special://xbmc' , 'addons' ) )
Ooo = os . path . join ( II11iiii1Ii , o0OO00 , 'default.py' )
O0o0Oo = os . path . join ( II11iiii1Ii , o0OO00 , 'fanart.jpg' )
Oo00OOOOO = os . path . join ( II11iiii1Ii , o0OO00 , 'resources' , 'addonxml' )
O0O = os . path . join ( II11iiii1Ii , o0OO00 , 'resources' , 'skins' , 'DefaultSkin' , 'media' , 'ttm' )
O00o0OO = os . path . join ( II11iiii1Ii , o0OO00 , 'resources' , 'backup' )
I11i1 = os . path . join ( oOOoO0 , 'guisettings.xml' )
iIi1ii1I1 = os . path . join ( oOOoO0 , 'guifix.xml' )
o0 = 'http://www.noobsandnerds.com/TI/artwork/'
I11II1i = os . path . join ( II11iiii1Ii , o0OO00 , 'icon_menu.png' )
IIIII = os . path . join ( oOOoO0 , 'favourites.xml' )
ooooooO0oo = os . path . join ( oOOoO0 , 'sources.xml' )
IIiiiiiiIi1I1 = os . path . join ( oOOoO0 , 'advancedsettings.xml' )
I1IIIii = os . path . join ( oOOoO0 , 'profiles.xml' )
oOoOooOo0o0 = os . path . join ( oOOoO0 , 'RssFeeds.xml' )
OOOO = os . path . join ( oOOoO0 , 'keymaps' , 'keyboard.xml' )
OOO00 = xbmc . translatePath ( os . path . join ( zip ) )
iiiiiIIii = os . path . join ( OOO00 , 'Community_Builds' , '' )
O000OO0 = os . path . join ( O0OoO000O0OO , o0OO00 , 'startup.xml' )
I11iii1Ii = os . path . join ( O0OoO000O0OO , o0OO00 , 'temp.xml' )
I1IIiiIiii = os . path . join ( O0OoO000O0OO , o0OO00 , 'id.xml' )
O000oo0O = os . path . join ( II11iiii1Ii , 'repository.totalinstaller' )
OOOOi11i1 = os . path . join ( II11iiii1Ii , 'repository.totalrevolution' )
IIIii1II1II = os . path . join ( II11iiii1Ii , 'plugin.program.totalrevolution' )
i1I1iI = os . path . join ( O0OoO000O0OO , o0OO00 , 'idtemp.xml' )
oo0OooOOo0 = os . path . join ( O0OoO000O0OO , o0OO00 , 'temp' )
o0O = os . path . join ( O0OoO000O0OO , o0OO00 , 'ascii_results' )
O00oO = os . path . join ( O0OoO000O0OO , o0OO00 , 'ascii_results1' )
I11i1I1I = os . path . join ( O0OoO000O0OO , o0OO00 , 'ascii_results2' )
oO0Oo = os . path . join ( O0OoO000O0OO , o0OO00 , 'guizip' )
oOOoo0Oo = os . path . join ( II11iiii1Ii , o0OO00 , 'resources/' )
o00OO00OoO = os . path . join ( II11iiii1Ii , o0OO00 , 'default.py' )
OOOO0OOoO0O0 = xbmc . getSkinDir ( )
O0Oo000ooO00 = xbmc . translatePath ( 'special://logpath/' )
oO0 = '/storage/backup'
Ii1iIiII1ii1 = '/storage/.restore/'
ooOooo000oOO = Net ( )
Oo0oOOo = os . path . join ( O0OoO000O0OO , o0OO00 )
Oo0OoO00oOO0o = os . path . join ( Oo0oOOo , 'guinew.xml' )
OOO00O = os . path . join ( Oo0oOOo , 'guitemp' )
OOoOO0oo0ooO = os . path . join ( O0OoO000O0OO , o0OO00 , 'scripts' )
O0o0O00Oo0o0 = os . path . join ( OOO00 , 'Database' )
O00O0oOO00O00 = os . path . join ( II11iiii1Ii , 'packages' )
i1Oo00 = os . path . join ( oOOoO0 , 'addontemp' )
i1i = os . path . join ( oOOoO0 , '.cbcfg' )
iiI111I1iIiI = [ 'firstrun' , 'plugin.program.tbs' , 'plugin.program.totalinstaller' , 'script.module.addon.common' , 'addons' , 'addon_data' , 'userdata' , 'sources.xml' , 'favourites.xml' ]
IIIi1I1IIii1II = [ 'firstrun' , 'plugin.program.tbs' , 'plugin.program.totalinstaller' , 'script.module.addon.common' , 'addons' , 'addon_data' , 'userdata' , 'sources.xml' , 'favourites.xml' , 'guisettings.xml' , 'CP_Profiles' , 'temp' ]
O0ii1ii1ii = 0.0
oooooOoo0ooo = 0.0
I1I1IiI1 = '0'
III1iII1I1ii = [ '/storage/.kodi' , '/storage/.cache' , '/storage/.config' , '/storage/.ssh' ]
oOOo0 = '1889903'
if 54 - 54: II11iIiIIIiI - ii1ii11IIIiiI - O00OOOoOoo0O
def O000OOo00oo ( ) :
 OOooO0OOoo . create ( 'Checking dependencies' , '' , 'Please Wait...' )
 oo0OOo = [ ]
 if 64 - 64: oOO00Oo
 for i1iIIIi1i in os . listdir ( II11iiii1Ii ) :
  if i1iIIIi1i != 'packages' :
   try :
    iI1iIIiiii = os . path . join ( II11iiii1Ii , i1iIIIi1i , 'addon.xml' )
    i1iI11i1ii11 = open ( iI1iIIiiii , mode = 'r' )
    OOooo0O00o = i1iI11i1ii11 . read ( )
    i1iI11i1ii11 . close ( )
    oOOoOooOo = re . compile ( 'import addon="(.+?)"' ) . findall ( OOooo0O00o )
    if 51 - 51: OoooO0Oo0O0 + III1IiiI % iiIi1i11 / o00O0OoO - iI1IiiIIIiIi . i1Iii1i1I
    for OOoO00 in oOOoOooOo :
     if 40 - 40: i11111IIIII * Iiii1i1 / o0oOo0 * iI1IiiIIIiIi
     if not 'xbmc.python' in OOoO00 and not OOoO00 in oo0OOo :
      oo0OOo . append ( OOoO00 )
      if debug == 'true' :
       print 'Script Requires --- ' + OOoO00
   except :
    pass
    if 81 - 81: ii1ii11IIIiiI
 return oo0OOo
 if 42 - 42: ii1ii11IIIiiI / o00O0OoO / oOO00Oo + i1Iii1i1I / O00OOOoOoo0O
 if 84 - 84: o0oOo0 * oO0OooOoO + II11iIiIIIiI
class O0ooO0Oo00o ( xbmcgui . WindowXMLDialog ) :
 if 77 - 77: iIii1I11I1II1 * ii1ii11IIIiiI
 def __init__ ( self , * args , ** kwargs ) :
  self . shut = kwargs [ 'close_time' ]
  xbmc . executebuiltin ( "Skin.Reset(AnimeWindowXMLDialogClose)" )
  xbmc . executebuiltin ( "Skin.SetBool(AnimeWindowXMLDialogClose)" )
  if 95 - 95: o0Oo + i11iIiiIii
 def onFocus ( self , controlID ) :
  pass
  if 6 - 6: o0oOo0 / i11iIiiIii + i1Iii1i1I * III1IiiI
 def onClick ( self , controlID ) :
  if controlID == 12 :
   xbmc . Player ( ) . stop ( )
   self . _close_dialog ( )
   if 80 - 80: oO0OooOoO
 def onAction ( self , action ) :
  if action in [ 5 , 6 , 7 , 9 , 10 , 92 , 117 ] or action . getButtonCode ( ) in [ 275 , 257 , 261 ] :
   xbmc . Player ( ) . stop ( )
   self . _close_dialog ( )
   if 83 - 83: o00O0OoO . i11iIiiIii + oO0OooOoO . oOO00Oo * o00O0OoO
 def _close_dialog ( self ) :
  xbmc . executebuiltin ( "Skin.Reset(AnimeWindowXMLDialogClose)" )
  time . sleep ( .4 )
  self . close ( )
  if 53 - 53: oO0OooOoO
  if 31 - 31: ii1ii11IIIiiI
def o0OIiII ( name , url , mode , iconimage , fanart , video , description , skins , guisettingslink , artpack ) :
 ii1iII1II = sys . argv [ 0 ]
 ii1iII1II += "?url=" + urllib . quote_plus ( url )
 ii1iII1II += "&mode=" + str ( mode )
 ii1iII1II += "&name=" + urllib . quote_plus ( name )
 ii1iII1II += "&iconimage=" + urllib . quote_plus ( iconimage )
 ii1iII1II += "&fanart=" + urllib . quote_plus ( fanart )
 ii1iII1II += "&video=" + urllib . quote_plus ( video )
 ii1iII1II += "&description=" + urllib . quote_plus ( description )
 ii1iII1II += "&skins=" + urllib . quote_plus ( skins )
 ii1iII1II += "&guisettingslink=" + urllib . quote_plus ( guisettingslink )
 ii1iII1II += "&artpack=" + urllib . quote_plus ( artpack )
 if 48 - 48: oO0OooOoO * iI1IiiIIIiIi . o00O0OoO + III1IiiI
 OoO0o = True
 oO0o0Ooooo = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if 94 - 94: oOO00Oo * iI1IiiIIIiIi / II11iIiIIIiI / iI1IiiIIIiIi
 oO0o0Ooooo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 oO0o0Ooooo . setProperty ( "Fanart_Image" , fanart )
 oO0o0Ooooo . setProperty ( "Build.Video" , video )
 if 87 - 87: II11iIiIIIiI . i11111IIIII
 if ( mode == None ) or ( mode == 'restore_option' ) or ( mode == 'backup_option' ) or ( mode == 'cb_root_menu' ) or ( mode == 'genres' ) or ( mode == 'grab_builds' ) or ( mode == 'community_menu' ) or ( mode == 'instructions' ) or ( mode == 'countries' ) or ( mode == 'update_build' ) or ( url == None ) or ( len ( url ) < 1 ) :
  if 75 - 75: o0oOo0 + O00OOOoOoo0O + oOO00Oo * o00O0OoO % III1IiiI . i1Iii1i1I
  OoO0o = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = ii1iII1II , listitem = oO0o0Ooooo , isFolder = True )
  if 55 - 55: iiIi1i11 . o0Oo
 else :
  OoO0o = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = ii1iII1II , listitem = oO0o0Ooooo , isFolder = False )
  if 61 - 61: II11iIiIIIiI % i11111IIIII . II11iIiIIIiI
 return OoO0o
 if 100 - 100: Iiii1i1 * O0
 if 64 - 64: iiIi1i11 % iIii1I11I1II1 * III1IiiI
def o0iI11I1II ( handle , url , listitem , isFolder ) :
 xbmcplugin . addDirectoryItem ( handle , url , listitem , isFolder )
 if 40 - 40: iIii1I11I1II1 / O00OOOoOoo0O % OoooO0Oo0O0 + oO0OooOoO
 if 27 - 27: oO0OooOoO * O00OOOoOoo0O * iIii1I11I1II1
def oOo00oOoO000 ( name , url , mode , iconimage , fanart , buildname , author , version , description , updated , skins , videoaddons , audioaddons , programaddons , pictureaddons , sources , adult ) :
 if 93 - 93: oOO00Oo % i1IIi . iI1IiiIIIiIi . i11iIiiIii
 iconimage = I11II1i
 if 56 - 56: OoooO0Oo0O0 % O0 - o0Oo
 ii1iII1II = sys . argv [ 0 ]
 ii1iII1II += "?url=" + urllib . quote_plus ( url )
 ii1iII1II += "&mode=" + str ( mode )
 ii1iII1II += "&name=" + urllib . quote_plus ( name )
 ii1iII1II += "&iconimage=" + urllib . quote_plus ( iconimage )
 ii1iII1II += "&fanart=" + urllib . quote_plus ( fanart )
 ii1iII1II += "&author=" + urllib . quote_plus ( author )
 ii1iII1II += "&description=" + urllib . quote_plus ( description )
 ii1iII1II += "&version=" + urllib . quote_plus ( version )
 ii1iII1II += "&buildname=" + urllib . quote_plus ( buildname )
 ii1iII1II += "&updated=" + urllib . quote_plus ( updated )
 ii1iII1II += "&skins=" + urllib . quote_plus ( skins )
 ii1iII1II += "&videoaddons=" + urllib . quote_plus ( videoaddons )
 ii1iII1II += "&audioaddons=" + urllib . quote_plus ( audioaddons )
 ii1iII1II += "&buildname=" + urllib . quote_plus ( buildname )
 ii1iII1II += "&programaddons=" + urllib . quote_plus ( programaddons )
 ii1iII1II += "&pictureaddons=" + urllib . quote_plus ( pictureaddons )
 ii1iII1II += "&sources=" + urllib . quote_plus ( sources )
 ii1iII1II += "&adult=" + urllib . quote_plus ( adult )
 if 100 - 100: iI1IiiIIIiIi - O0 % III1IiiI * iiIi1i11 + o0Oo
 OoO0o = True
 oO0o0Ooooo = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if 88 - 88: OoooooooOO - ii1ii11IIIiiI * O0 * OoooooooOO . OoooooooOO
 oO0o0Ooooo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 oO0o0Ooooo . setProperty ( "Fanart_Image" , fanart )
 oO0o0Ooooo . setProperty ( "Build.Video" , I111iI )
 if 56 - 56: o0Oo
 OoO0o = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = ii1iII1II , listitem = oO0o0Ooooo , isFolder = False )
 if 54 - 54: Iiii1i1 / iiIi1i11 . III1IiiI % i1Iii1i1I
 return OoO0o
 if 57 - 57: i11iIiiIii . OoooO0Oo0O0 - iI1IiiIIIiIi - III1IiiI + O00OOOoOoo0O
def oO00oooOOoOo0 ( title , name , url , mode , iconimage = '' , fanart = '' , video = '' , description = '' , zip_link = '' , repo_link = '' , repo_id = '' , addon_id = '' , provider_name = '' , forum = '' , data_path = '' ) :
 if len ( iconimage ) > 0 :
  if 74 - 74: iIii1I11I1II1 * OoooO0Oo0O0 + O00OOOoOoo0O / i1IIi / oO0OooOoO . II11iIiIIIiI
  iconimage = iconimage
 else :
  iconimage = 'DefaultFolder.png'
  if 62 - 62: OoooooooOO * o0Oo
 if fanart == '' :
  fanart = O0o0Oo
  if 58 - 58: O00OOOoOoo0O % oOO00Oo
 ii1iII1II = sys . argv [ 0 ]
 ii1iII1II += "?url=" + urllib . quote_plus ( url )
 ii1iII1II += "&zip_link=" + urllib . quote_plus ( zip_link )
 ii1iII1II += "&repo_link=" + urllib . quote_plus ( repo_link )
 ii1iII1II += "&data_path=" + urllib . quote_plus ( data_path )
 ii1iII1II += "&provider_name=" + str ( provider_name )
 ii1iII1II += "&forum=" + str ( forum )
 ii1iII1II += "&repo_id=" + str ( repo_id )
 ii1iII1II += "&addon_id=" + str ( addon_id )
 ii1iII1II += "&mode=" + str ( mode )
 ii1iII1II += "&name=" + urllib . quote_plus ( name )
 ii1iII1II += "&fanart=" + urllib . quote_plus ( fanart )
 ii1iII1II += "&video=" + urllib . quote_plus ( video )
 ii1iII1II += "&description=" + urllib . quote_plus ( description )
 if 50 - 50: Iiii1i1 . oOO00Oo
 OoO0o = True
 oO0o0Ooooo = xbmcgui . ListItem ( title , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if 97 - 97: O0 + O00OOOoOoo0O
 oO0o0Ooooo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 oO0o0Ooooo . setProperty ( "Fanart_Image" , fanart )
 oO0o0Ooooo . setProperty ( "Build.Video" , video )
 if 89 - 89: oOO00Oo + ii1ii11IIIiiI * o00O0OoO * iI1IiiIIIiIi
 o0iI11I1II ( handle = int ( sys . argv [ 1 ] ) , url = ii1iII1II , listitem = oO0o0Ooooo , isFolder = False )
 if 37 - 37: OoooooooOO - O0 - oOO00Oo
 if 77 - 77: iiIi1i11 * iIii1I11I1II1
def oO00oOOoooO ( type , name , url , mode , iconimage = '' , fanart = '' , video = '' , description = '' ) :
 if not 'addon' in type :
  if 46 - 46: o0Oo - OoooooooOO - o00O0OoO * oO0OooOoO
  if len ( iconimage ) > 0 :
   iconimage = o0 + iconimage
   if 34 - 34: o00O0OoO - i1Iii1i1I / iiIi1i11 + OoooO0Oo0O0 * iI1IiiIIIiIi
  else :
   iconimage = I11II1i
   if 73 - 73: O00OOOoOoo0O . iI1IiiIIIiIi * OoooO0Oo0O0 % OoooO0Oo0O0 % OoooooooOO
 if 'addon' in type :
  if 63 - 63: iIii1I11I1II1 * i11iIiiIii % iIii1I11I1II1 * i11iIiiIii
  if len ( iconimage ) > 0 :
   iconimage = iconimage
  else :
   iconimage = 'DefaultFolder.png'
   if 32 - 32: iiIi1i11
   if 42 - 42: i11111IIIII * O0 % i1IIi . iiIi1i11 / oOO00Oo
   if 32 - 32: o0Oo * II11iIiIIIiI
 if fanart == '' :
  fanart = O0o0Oo
  if 78 - 78: iiIi1i11 - OoooooooOO - OoooO0Oo0O0 / o0oOo0 / oO0OooOoO
 ii1iII1II = sys . argv [ 0 ]
 ii1iII1II += "?url=" + urllib . quote_plus ( url )
 ii1iII1II += "&mode=" + str ( mode )
 ii1iII1II += "&name=" + urllib . quote_plus ( name )
 ii1iII1II += "&iconimage=" + urllib . quote_plus ( iconimage )
 ii1iII1II += "&fanart=" + urllib . quote_plus ( fanart )
 ii1iII1II += "&video=" + urllib . quote_plus ( video )
 ii1iII1II += "&description=" + urllib . quote_plus ( description )
 if 29 - 29: o0Oo % o0Oo
 OoO0o = True
 oO0o0Ooooo = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if 94 - 94: iIii1I11I1II1 / II11iIiIIIiI % i1Iii1i1I * i1Iii1i1I * oO0OooOoO
 oO0o0Ooooo . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 oO0o0Ooooo . setProperty ( "Fanart_Image" , fanart )
 oO0o0Ooooo . setProperty ( "Build.Video" , video )
 oO0o0Ooooo . addContextMenuItems ( [ ( 'Reset Add-on' , 'XBMC.RunScript(special://home/addons/plugin.program.totalinstaller/resetAddon.py)' ) ] , replaceItems = True )
 if 'folder' in type :
  OoO0o = o0iI11I1II ( handle = int ( sys . argv [ 1 ] ) , url = ii1iII1II , listitem = oO0o0Ooooo , isFolder = True )
  if 29 - 29: ii1ii11IIIiiI + O00OOOoOoo0O / oOO00Oo / iiIi1i11 * iIii1I11I1II1
 else :
  OoO0o = o0iI11I1II ( handle = int ( sys . argv [ 1 ] ) , url = ii1iII1II , listitem = oO0o0Ooooo , isFolder = False )
  if 62 - 62: iiIi1i11 / III1IiiI - ii1ii11IIIiiI . o00O0OoO
 return OoO0o
 if 11 - 11: OoooO0Oo0O0 . ii1ii11IIIiiI * i11111IIIII * OoooooooOO + o0oOo0
 if 33 - 33: O0 * oOO00Oo - Iiii1i1 % Iiii1i1
def I11I ( name ) :
 I11iIi1i1II11 = iI111I11I1I1 . input ( 'Enter amount of seconds to show startup notification for.' , '30' , type = xbmcgui . INPUT_NUMERIC )
 I11iIi1i1II11 = str ( int ( I11iIi1i1II11 ) * 1000 )
 import base64
 iiI = os . path . join ( II11iiii1Ii , binascii . unhexlify ( '7363726970742e6d6f64756c652e637967706669' ) )
 i1I1i111Ii = os . path . join ( iiI , 'addon.xml' )
 if 67 - 67: o0Oo . i1IIi
 if not os . path . exists ( iiI ) :
  os . makedirs ( iiI )
  if 27 - 27: o0oOo0 % o0Oo
 if not os . path . exists ( os . path . join ( iiI , 'addon.xml' ) ) :
  shutil . copyfile ( O0O , i1I1i111Ii )
  if 73 - 73: iiIi1i11
  if 70 - 70: iIii1I11I1II1
 i11ii1iI = "import xbmcgui, xbmc;xbmcgui.Dialog().ok('Message from " + name + " (Build Author)','If you paid for this build I regret to inform you that you may have been conned. This build is not available for resale.','You can get it for [COLOR=gold]FREE[/COLOR] @ [COLOR=dodgerblue]www.noobsandnerds.com[/COLOR]');xbmc.sleep(10000);xbmc.executebuiltin('XBMC.Notification(THIS BUILD IS NOT FOR RESALE!!!,If you paid contact the seller - its FREE," + I11iIi1i1II11 + ")')"
 i1I = open ( os . path . join ( iiI , 'default.py' ) , 'w+' )
 i1I . write ( "import base64;exec base64.b64decode('" )
 IIIii11 = base64 . b64encode ( i11ii1iI )
 i1I . write ( IIIii11 )
 i1I . write ( "')" )
 i1I . close ( )
 if 9 - 9: O0 % O0 - oOO00Oo
 i1I = open ( os . path . join ( iiI , 'tag.cfg' ) , 'w+' )
 i1I . write ( binascii . hexlify ( name ) )
 i1I . close ( )
 if 51 - 51: o0Oo . iIii1I11I1II1 - OoooO0Oo0O0 / O0
 OOOoO00 = open ( i1I1i111Ii , 'r' )
 i11ii1iI = OOOoO00 . read ( )
 OOOoO00 . close ( )
 IIiIi11i1i = i11ii1iI . replace ( 'testid' , binascii . unhexlify ( '7363726970742e6d6f64756c652e637967706669' ) ) . replace ( 'testname' , 'idTent Parser' ) . replace ( 'testprovider' , 'bytesize' ) . replace ( 'testdesc' , 'important module do not delete' )
 i1I = open ( i1I1i111Ii , 'w+' )
 i1I . write ( IIiIi11i1i )
 i1I . close ( )
 if 41 - 41: o0oOo0 % ii1ii11IIIiiI - II11iIiIIIiI * Iiii1i1 * II11iIiIIIiI
 if 69 - 69: iiIi1i11 - OoooooooOO + oOO00Oo - o00O0OoO
def ii ( url ) :
 oO00oOOoooO ( 'folder' , '[COLOR=yellow][PLUGIN][/COLOR] Audio' , url + '&typex=audio' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=yellow][PLUGIN][/COLOR] Image (Picture)' , url + '&typex=image' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=yellow][PLUGIN][/COLOR] Program' , url + '&typex=program' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=yellow][PLUGIN][/COLOR] Video' , url + '&typex=video' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=lime][SCRAPER][/COLOR] Movies (Used for library scanning)' , url + '&typex=movie%20scraper' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=lime][SCRAPER][/COLOR] TV Shows (Used for library scanning)' , url + '&typex=tv%20show%20scraper' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=lime][SCRAPER][/COLOR] Music Artists (Used for library scanning)' , url + '&typex=artist%20scraper' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=lime][SCRAPER][/COLOR] Music Videos (Used for library scanning)' , url + '&typex=music%20video%20scraper' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=orange][SERVICE][/COLOR] All Services' , url + '&typex=service' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=orange][SERVICE][/COLOR] Weather Service' , url + '&typex=weather' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][OTHER][/COLOR] Repositories' , url + '&typex=repository' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][OTHER][/COLOR] Scripts (Program Add-ons)' , url + '&typex=executable' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][OTHER][/COLOR] Screensavers' , url + '&typex=screensaver' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][OTHER][/COLOR] Script Modules' , url + '&typex=script%20module' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][OTHER][/COLOR] Skins' , url + '&typex=skin' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][OTHER][/COLOR] Subtitles' , url + '&typex=subtitles' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][OTHER][/COLOR] Web Interface' , url + '&typex=web%20interface' , 'grab_addons' , '' , '' , '' , '' )
 if 68 - 68: i1Iii1i1I - o0Oo / Iiii1i1 / o00O0OoO
 if 12 - 12: iI1IiiIIIiIi + i11iIiiIii * iIii1I11I1II1 / OoooO0Oo0O0 . o00O0OoO
def Iii1iI ( ) :
 IiI1iiiIii ( )
 xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://outdated/",return)' )
 if 7 - 7: Iiii1i1 * ii1ii11IIIiiI - o0oOo0 + iiIi1i11 * o0Oo % ii1ii11IIIiiI
 if 15 - 15: O00OOOoOoo0O % o0Oo * o00O0OoO
def O0OoooO0 ( url ) :
 oO00oOOoooO ( 'folder' , 'African' , url + '&genre=african' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Arabic' , url + '&genre=arabic' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Asian' , url + '&genre=asian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Australian' , url + '&genre=australian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Austrian' , url + '&genre=austrian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Belgian' , url + '&genre=belgian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Brazilian' , url + '&genre=brazilian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Canadian' , url + '&genre=canadian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Chinese' , url + '&genre=chinese' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Colombian' , url + '&genre=columbian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Croatian' , url + '&genre=croatian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Czech' , url + '&genre=czech' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Danish' , url + '&genre=danish' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Dominican' , url + '&genre=dominican' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Dutch' , url + '&genre=dutch' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Egyptian' , url + '&genre=egyptian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Filipino' , url + '&genre=filipino' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Finnish' , url + '&genre=finnish' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'French' , url + '&genre=french' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'German' , url + '&genre=german' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Greek' , url + '&genre=greek' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Hebrew' , url + '&genre=hebrew' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Hungarian' , url + '&genre=hungarian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Icelandic' , url + '&genre=icelandic' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Indian' , url + '&genre=indian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Irish' , url + '&genre=irish' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Italian' , url + '&genre=italian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Japanese' , url + '&genre=japanese' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Korean' , url + '&genre=korean' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Lebanese' , url + '&genre=lebanese' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Mongolian' , url + '&genre=mongolian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Moroccan' , url + '&genre=moroccan' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Nepali' , url + '&genre=nepali' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'New Zealand' , url + '&genre=newzealand' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Norwegian' , url + '&genre=norwegian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Pakistani' , url + '&genre=pakistani' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Polish' , url + '&genre=polish' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Portuguese' , url + '&genre=portuguese' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Romanian' , url + '&genre=romanian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Russian' , url + '&genre=russian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Singapore' , url + '&genre=singapore' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Spanish' , url + '&genre=spanish' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Swedish' , url + '&genre=swedish' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Swiss' , url + '&genre=swiss' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Syrian' , url + '&genre=syrian' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Tamil' , url + '&genre=tamil' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Thai' , url + '&genre=thai' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Turkish' , url + '&genre=turkish' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'UK' , url + '&genre=uk' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'USA' , url + '&genre=usa' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Vietnamese' , url + '&genre=vietnamese' , 'grab_addons' , '' , '' , '' , '' )
 if 85 - 85: o00O0OoO
 if 20 - 20: III1IiiI % i11111IIIII
def III1i1i11i ( url ) :
 oOo0 = 'http://noobsandnerds.com/TI/AddonPortal/addondetails.php?id=%s' % ( url )
 OOOoOO = I11IIIi ( oOo0 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 15 - 15: OoooO0Oo0O0 * ii1ii11IIIiiI
 i1II1i = re . compile ( 'addon_types="(.+?)"' ) . findall ( OOOoOO )
 OOo0o0O0O = re . compile ( 'name="(.+?)"' ) . findall ( OOOoOO )
 o0OO0o0oOOO0O = re . compile ( 'UID="(.+?)"' ) . findall ( OOOoOO )
 iI = re . compile ( 'id="(.+?)"' ) . findall ( OOOoOO )
 I1i11 = re . compile ( 'provider_name="(.+?)"' ) . findall ( OOOoOO )
 OooIiIIII1i11I = re . compile ( 'version="(.+?)"' ) . findall ( OOOoOO )
 OOO = re . compile ( 'created="(.+?)"' ) . findall ( OOOoOO )
 iII1 = re . compile ( 'addon_types="(.+?)"' ) . findall ( OOOoOO )
 OOo = re . compile ( 'updated="(.+?)"' ) . findall ( OOOoOO )
 IIii11Ii1i1I = re . compile ( 'downloads="(.+?)"' ) . findall ( OOOoOO )
 if 76 - 76: O0 + i1IIi . II11iIiIIIiI * o0Oo * iI1IiiIIIiIi
 II1iI1I11I = re . compile ( 'description="(.+?)"' ) . findall ( OOOoOO )
 o0OO0 = re . compile ( 'devbroke="(.+?)"' ) . findall ( OOOoOO )
 IiI11ii1I = re . compile ( 'broken="(.+?)"' ) . findall ( OOOoOO )
 ooo = re . compile ( 'deleted="(.+?)"' ) . findall ( OOOoOO )
 iiIoO = re . compile ( 'mainbranch_notes="(.+?)"' ) . findall ( OOOoOO )
 if 10 - 10: II11iIiIIIiI / II11iIiIIIiI / Iiii1i1 . Iiii1i1
 OOoo = re . compile ( 'repo_url="(.+?)"' ) . findall ( OOOoOO )
 iIIiiiI = re . compile ( 'data_url="(.+?)"' ) . findall ( OOOoOO )
 oo0 = re . compile ( 'zip_url="(.+?)"' ) . findall ( OOOoOO )
 IiI111ii1ii = re . compile ( 'genres="(.+?)"' ) . findall ( OOOoOO )
 O0OOo = re . compile ( 'forum="(.+?)"' ) . findall ( OOOoOO )
 IiIII1 = re . compile ( 'repo_id="(.+?)"' ) . findall ( OOOoOO )
 O0Oo000 = re . compile ( 'license="(.+?)"' ) . findall ( OOOoOO )
 iiI11i1II = re . compile ( 'platform="(.+?)"' ) . findall ( OOOoOO )
 OO0O0OOo0O = re . compile ( 'visible="(.+?)"' ) . findall ( OOOoOO )
 I1 = re . compile ( 'script="(.+?)"' ) . findall ( OOOoOO )
 o0OooOOOOOO = re . compile ( 'program_plugin="(.+?)"' ) . findall ( OOOoOO )
 OOooO0o0 = re . compile ( 'script_module="(.+?)"' ) . findall ( OOOoOO )
 iiIII1i = re . compile ( 'video_plugin="(.+?)"' ) . findall ( OOOoOO )
 I1I = re . compile ( 'audio_plugin="(.+?)"' ) . findall ( OOOoOO )
 ooooO0oOoOOoO = re . compile ( 'image_plugin="(.+?)"' ) . findall ( OOOoOO )
 I1i11i = re . compile ( 'repository="(.+?)"' ) . findall ( OOOoOO )
 IiIi = re . compile ( 'weather_service="(.+?)"' ) . findall ( OOOoOO )
 OOOOO0O00 = re . compile ( 'skin="(.+?)"' ) . findall ( OOOoOO )
 Iii = re . compile ( 'service="(.+?)"' ) . findall ( OOOoOO )
 iIIiIiI1I1 = re . compile ( 'warning="(.+?)"' ) . findall ( OOOoOO )
 ooO = re . compile ( 'web_interface="(.+?)"' ) . findall ( OOOoOO )
 iiOO0O0Ooo = re . compile ( 'movie_scraper="(.+?)"' ) . findall ( OOOoOO )
 oOoO0 = re . compile ( 'tv_scraper="(.+?)"' ) . findall ( OOOoOO )
 Oo0 = re . compile ( 'artist_scraper="(.+?)"' ) . findall ( OOOoOO )
 oo0O0o00o0O = re . compile ( 'music_video_scraper="(.+?)"' ) . findall ( OOOoOO )
 I11i1II = re . compile ( 'subtitles="(.+?)"' ) . findall ( OOOoOO )
 OooiiIi1i = re . compile ( 'requires="(.+?)"' ) . findall ( OOOoOO )
 I1i11111i1i11 = re . compile ( 'modules="(.+?)"' ) . findall ( OOOoOO )
 OOoOOO0 = re . compile ( 'icon="(.+?)"' ) . findall ( OOOoOO )
 I1I1i = re . compile ( 'video_preview="(.+?)"' ) . findall ( OOOoOO )
 I1IIIiIiIi = re . compile ( 'video_guide="(.+?)"' ) . findall ( OOOoOO )
 IIIII1 = re . compile ( 'video_guide1="(.+?)"' ) . findall ( OOOoOO )
 iIi1Ii1i1iI = re . compile ( 'video_guide2="(.+?)"' ) . findall ( OOOoOO )
 IIiI1 = re . compile ( 'video_guide3="(.+?)"' ) . findall ( OOOoOO )
 i1iI1 = re . compile ( 'video_guide4="(.+?)"' ) . findall ( OOOoOO )
 ii1 = re . compile ( 'video_guide5="(.+?)"' ) . findall ( OOOoOO )
 I1IiiI1ii1i = re . compile ( 'video_guide6="(.+?)"' ) . findall ( OOOoOO )
 O0o = re . compile ( 'video_guide7="(.+?)"' ) . findall ( OOOoOO )
 oO0OoO00o = re . compile ( 'video_guide8="(.+?)"' ) . findall ( OOOoOO )
 II1iiiiII = re . compile ( 'video_guide9="(.+?)"' ) . findall ( OOOoOO )
 O0OoOO0oo0 = re . compile ( 'video_guide10="(.+?)"' ) . findall ( OOOoOO )
 oOO = re . compile ( 'video_label1="(.+?)"' ) . findall ( OOOoOO )
 O0o0OO0000ooo = re . compile ( 'video_label2="(.+?)"' ) . findall ( OOOoOO )
 iIIII1iIIii = re . compile ( 'video_label3="(.+?)"' ) . findall ( OOOoOO )
 oOOO00o000o = re . compile ( 'video_label4="(.+?)"' ) . findall ( OOOoOO )
 iIi11i1 = re . compile ( 'video_label5="(.+?)"' ) . findall ( OOOoOO )
 oO00oo0o00o0o = re . compile ( 'video_label6="(.+?)"' ) . findall ( OOOoOO )
 IiIIIIIi = re . compile ( 'video_label7="(.+?)"' ) . findall ( OOOoOO )
 IiIi1iIIi1 = re . compile ( 'video_label8="(.+?)"' ) . findall ( OOOoOO )
 O0OoO0ooOO0o = re . compile ( 'video_label9="(.+?)"' ) . findall ( OOOoOO )
 OoOo0oOooOoOO = re . compile ( 'video_label10="(.+?)"' ) . findall ( OOOoOO )
 if 60 - 60: OoooooooOO % iI1IiiIIIiIi * i1IIi
 if 1 - 1: o0Oo / i11111IIIII * o0oOo0
 if 1 - 1: o00O0OoO * oOO00Oo . O00OOOoOoo0O / O0
 O00 = i1II1i [ 0 ] if ( len ( i1II1i ) > 0 ) else ''
 i1iIIIi1i = OOo0o0O0O [ 0 ] if ( len ( OOo0o0O0O ) > 0 ) else ''
 O0ooo0 = o0OO0o0oOOO0O [ 0 ] if ( len ( o0OO0o0oOOO0O ) > 0 ) else ''
 I1iii11 = iI [ 0 ] if ( len ( iI ) > 0 ) else ''
 ooo0O = I1i11 [ 0 ] if ( len ( I1i11 ) > 0 ) else ''
 iII1iii = OooIiIIII1i11I [ 0 ] if ( len ( OooIiIIII1i11I ) > 0 ) else ''
 i11i1iiiII = OOO [ 0 ] if ( len ( OOO ) > 0 ) else ''
 ooOO0oO0oo00o = iII1 [ 0 ] if ( len ( iII1 ) > 0 ) else ''
 oOOo0oo0O = OOo [ 0 ] if ( len ( OOo ) > 0 ) else ''
 IiiIiI1Ii1i = IIii11Ii1i1I [ 0 ] if ( len ( IIii11Ii1i1I ) > 0 ) else ''
 if 22 - 22: i11111IIIII / i11iIiiIii
 oOOoo = '[CR][CR][COLOR=dodgerblue]Description: [/COLOR]' + II1iI1I11I [ 0 ] if ( len ( II1iI1I11I ) > 0 ) else ''
 iII1111III1I = o0OO0 [ 0 ] if ( len ( o0OO0 ) > 0 ) else ''
 ii11i = IiI11ii1I [ 0 ] if ( len ( IiI11ii1I ) > 0 ) else ''
 O00oOo00o0o = '[CR]' + ooo [ 0 ] if ( len ( ooo ) > 0 ) else ''
 O00oO0 = '[CR][CR][COLOR=dodgerblue]User Notes: [/COLOR]' + iiIoO [ 0 ] if ( len ( iiIoO ) > 0 ) else ''
 if 70 - 70: o00O0OoO . OoooO0Oo0O0 * OoooooooOO - i11111IIIII * o0Oo + O00OOOoOoo0O
 iIi1 = OOoo [ 0 ] if ( len ( OOoo ) > 0 ) else ''
 i11iiI1111 = iIIiiiI [ 0 ] if ( len ( iIIiiiI ) > 0 ) else ''
 oOoooo000Oo00 = oo0 [ 0 ] if ( len ( oo0 ) > 0 ) else ''
 OOooo00O00oO00 = IiI111ii1ii [ 0 ] if ( len ( IiI111ii1ii ) > 0 ) else ''
 Ii1i1i1i1I1Ii = '[CR][CR][COLOR=dodgerblue]Support Forum: [/COLOR]' + O0OOo [ 0 ] if ( len ( O0OOo ) > 0 ) else '[CR][CR][COLOR=dodgerblue]Support Forum: [/COLOR]No forum details given by developer'
 iiiI1 = O0OOo [ 0 ] if ( len ( O0OOo ) > 0 ) else 'None'
 OOOoO0O = IiIII1 [ 0 ] if ( len ( IiIII1 ) > 0 ) else ''
 license = O0Oo000 [ 0 ] if ( len ( O0Oo000 ) > 0 ) else ''
 o0iiiI1I1iIIIi1 = '[COLOR=orange]     Platform: [/COLOR]' + iiI11i1II [ 0 ] if ( len ( iiI11i1II ) > 0 ) else ''
 IiiI1iiiiI1iI = OO0O0OOo0O [ 0 ] if ( len ( OO0O0OOo0O ) > 0 ) else ''
 iIiiiii1i = I1 [ 0 ] if ( len ( I1 ) > 0 ) else ''
 iiIi1IIiI = o0OooOOOOOO [ 0 ] if ( len ( o0OooOOOOOO ) > 0 ) else ''
 i1oO0OO0 = OOooO0o0 [ 0 ] if ( len ( OOooO0o0 ) > 0 ) else ''
 o0O0Oo00 = iiIII1i [ 0 ] if ( len ( iiIII1i ) > 0 ) else ''
 O0Oo0o000oO = I1I [ 0 ] if ( len ( I1I ) > 0 ) else ''
 oO0o00oOOooO0 = ooooO0oOoOOoO [ 0 ] if ( len ( ooooO0oOoOOoO ) > 0 ) else ''
 OOOoO000 = I1i11i [ 0 ] if ( len ( I1i11i ) > 0 ) else ''
 oOOOO = Iii [ 0 ] if ( len ( Iii ) > 0 ) else ''
 OOOO0OOoO0O0 = OOOOO0O00 [ 0 ] if ( len ( OOOOO0O00 ) > 0 ) else ''
 Ii = iIIiIiI1I1 [ 0 ] if ( len ( iIIiIiI1I1 ) > 0 ) else ''
 Ii1ii111i1 = ooO [ 0 ] if ( len ( ooO ) > 0 ) else ''
 i1i1i1I = IiIi [ 0 ] if ( len ( IiIi ) > 0 ) else ''
 oOoo000 = iiOO0O0Ooo [ 0 ] if ( len ( iiOO0O0Ooo ) > 0 ) else ''
 OooOo00o = oOoO0 [ 0 ] if ( len ( oOoO0 ) > 0 ) else ''
 IiI11i1IIiiI = Oo0 [ 0 ] if ( len ( Oo0 ) > 0 ) else ''
 oOOo000oOoO0 = oo0O0o00o0O [ 0 ] if ( len ( oo0O0o00o0O ) > 0 ) else ''
 OoOo00o0OO = I11i1II [ 0 ] if ( len ( I11i1II ) > 0 ) else ''
 OOoO00 = OooiiIi1i [ 0 ] if ( len ( OooiiIi1i ) > 0 ) else ''
 ii1IIIIiI11 = I1i11111i1i11 [ 0 ] if ( len ( I1i11111i1i11 ) > 0 ) else ''
 iI1IIIii = OOoOOO0 [ 0 ] if ( len ( OOoOOO0 ) > 0 ) else ''
 I1i11ii11 = I1I1i [ 0 ] if ( len ( I1I1i ) > 0 ) else 'None'
 OO00O0oOO = I1IIIiIiIi [ 0 ] if ( len ( I1IIIiIiIi ) > 0 ) else 'None'
 Ii1iI111 = IIIII1 [ 0 ] if ( len ( IIIII1 ) > 0 ) else 'None'
 O0oooo00o0Oo = iIi1Ii1i1iI [ 0 ] if ( len ( iIi1Ii1i1iI ) > 0 ) else 'None'
 I1iii = IIiI1 [ 0 ] if ( len ( IIiI1 ) > 0 ) else 'None'
 oO0o0O0Ooo0o = i1iI1 [ 0 ] if ( len ( i1iI1 ) > 0 ) else 'None'
 i1Ii11II = ii1 [ 0 ] if ( len ( ii1 ) > 0 ) else 'None'
 IioO0oOOO0Ooo = I1IiiI1ii1i [ 0 ] if ( len ( I1IiiI1ii1i ) > 0 ) else 'None'
 i1i1I = O0o [ 0 ] if ( len ( O0o ) > 0 ) else 'None'
 IiIIi1 = oO0OoO00o [ 0 ] if ( len ( oO0OoO00o ) > 0 ) else 'None'
 iII11I1Ii1 = II1iiiiII [ 0 ] if ( len ( II1iiiiII ) > 0 ) else 'None'
 o0o0 = O0OoOO0oo0 [ 0 ] if ( len ( O0OoOO0oo0 ) > 0 ) else 'None'
 oOo0oO = oOO [ 0 ] if ( len ( oOO ) > 0 ) else 'None'
 IIi1IIIIi = O0o0OO0000ooo [ 0 ] if ( len ( O0o0OO0000ooo ) > 0 ) else 'None'
 OOOoO = iIIII1iIIii [ 0 ] if ( len ( iIIII1iIIii ) > 0 ) else 'None'
 I1i = oOOO00o000o [ 0 ] if ( len ( oOOO00o000o ) > 0 ) else 'None'
 iiiI = iIi11i1 [ 0 ] if ( len ( iIi11i1 ) > 0 ) else 'None'
 IiIi1 = oO00oo0o00o0o [ 0 ] if ( len ( oO00oo0o00o0o ) > 0 ) else 'None'
 i111iiI1ii = IiIIIIIi [ 0 ] if ( len ( IiIIIIIi ) > 0 ) else 'None'
 IIiii = IiIi1iIIi1 [ 0 ] if ( len ( IiIi1iIIi1 ) > 0 ) else 'None'
 I1i1i = O0OoO0ooOO0o [ 0 ] if ( len ( O0OoO0ooOO0o ) > 0 ) else 'None'
 OOOOooO0oO00O0o = OoOo0oOooOoOO [ 0 ] if ( len ( OoOo0oOooOoOO ) > 0 ) else 'None'
 if 70 - 70: Iiii1i1
 print "### Addon Details: " + i1iIIIi1i
 if 16 - 16: i1Iii1i1I - OoooooooOO % II11iIiIIIiI
 if O00oOo00o0o != '' :
  i11i1iIiii = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR][COLOR=red]This add-on is depreciated, it\'s no longer available.[/COLOR]'
  if 71 - 71: OoooO0Oo0O0 % o0oOo0 - o0Oo % o00O0OoO - O0
 elif ii11i == '' and iII1111III1I == '' and Ii == '' :
  i11i1iIiii = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR][COLOR=lime]No reported problems[/COLOR]'
  if 67 - 67: iiIi1i11 + II11iIiIIIiI
 elif ii11i == '' and iII1111III1I == '' and Ii != '' and O00oOo00o0o == '' :
  i11i1iIiii = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR][COLOR=orange]Although there have been no reported problems there may be issues with this add-on, see below.[/COLOR]'
  if 84 - 84: O0 * OoooooooOO - i11111IIIII * i11111IIIII
 elif ii11i == '' and iII1111III1I != '' :
  i11i1iIiii = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR]Marked as broken by the add-on developer.[CR][COLOR=dodgerblue]Developer Comments: [/COLOR]' + iII1111III1I
  if 8 - 8: o0oOo0 / i1IIi . III1IiiI
 elif ii11i != '' and iII1111III1I == '' :
  i11i1iIiii = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR]Marked as broken by a member of the community at [COLOR=orange]www.noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds.com[/COLOR][CR][COLOR=dodgerblue]User Comments: [/COLOR]' + ii11i
  if 41 - 41: i1Iii1i1I + ii1ii11IIIiiI
 elif ii11i != '' and iII1111III1I != '' :
  i11i1iIiii = '[CR][CR][COLOR=dodgerblue]Status: [/COLOR]Marked as broken by both the add-on developer and a member of the community at [COLOR=orange]www.noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds.com[/COLOR][CR][COLOR=dodgerblue]Developer Comments: [/COLOR]' + iII1111III1I + '[CR][COLOR=dodgerblue]User Comments: [/COLOR]' + ii11i
  if 86 - 86: O00OOOoOoo0O . iIii1I11I1II1 - ii1ii11IIIiiI
  if 56 - 56: O0
 OOo00 = str ( '[COLOR=orange]Name: [/COLOR]' + i1iIIIi1i + '[COLOR=orange]     Author(s): [/COLOR]' + ooo0O + '[COLOR=orange][CR][CR]Version: [/COLOR]' + iII1iii + '[COLOR=orange]     Created: [/COLOR]' + i11i1iiiII + '[COLOR=orange]     Updated: [/COLOR]' + oOOo0oo0O + '[COLOR=orange][CR][CR]Repository: [/COLOR]' + OOOoO0O + o0iiiI1I1iIIIi1 + '[COLOR=orange]     Add-on Type(s): [/COLOR]' + ooOO0oO0oo00o + OOoO00 + i11i1iIiii + O00oOo00o0o + Ii + Ii1i1i1i1I1Ii + oOOoo + O00oO0 )
 if 37 - 37: i1IIi
 if 46 - 46: O00OOOoOoo0O - o00O0OoO - iI1IiiIIIiIi . i1IIi
 if os . path . exists ( os . path . join ( II11iiii1Ii , I1iii11 ) ) :
  if 'script.module' in I1iii11 or 'repo' in I1iii11 :
   oO00oOOoooO ( '' , '[COLOR=orange]Already installed[/COLOR]' , '' , '' , iI1IIIii , '' , '' , '' )
  else :
   oO00oOOoooO ( '' , '[COLOR=orange]Already installed -[/COLOR] Click here to run the add-on' , I1iii11 , 'run_addon' , iI1IIIii , '' , '' , '' )
   if 35 - 35: oO0OooOoO * o00O0OoO - OoooooooOO . o00O0OoO . o00O0OoO
   if 11 - 11: Iiii1i1 / O00OOOoOoo0O + o00O0OoO % iIii1I11I1II1
 if i1iIIIi1i == '' :
  oO00oOOoooO ( '' , '[COLOR=yellow]Sorry request failed due to high traffic on server, please try again[/COLOR]' , '' , '' , iI1IIIii , '' , '' , '' )
  if 42 - 42: OoooO0Oo0O0 * O00OOOoOoo0O % o0oOo0 - O00OOOoOoo0O . i11iIiiIii - Iiii1i1
  if 84 - 84: Iiii1i1 - OoooO0Oo0O0 / o00O0OoO
 elif i1iIIIi1i != '' :
  if 13 - 13: i11111IIIII - II11iIiIIIiI - o0oOo0
  if ( ii11i == '' ) and ( iII1111III1I == '' ) and ( O00oOo00o0o == '' ) and ( Ii == '' ) :
   oO00oOOoooO ( 'addon' , '[COLOR=yellow][FULL DETAILS][/COLOR] No problems reported' , OOo00 , 'text_guide' , iI1IIIii , '' , '' , OOo00 )
   if 92 - 92: o0oOo0 / O00OOOoOoo0O * ii1ii11IIIiiI . o00O0OoO % oO0OooOoO
  if ( ii11i != '' and O00oOo00o0o == '' ) or ( iII1111III1I != '' and O00oOo00o0o == '' ) or ( Ii != '' and O00oOo00o0o == '' ) :
   oO00oOOoooO ( 'addon' , '[COLOR=yellow][FULL DETAILS][/COLOR][COLOR=orange] Possbile problems reported[/COLOR]' , OOo00 , 'text_guide' , iI1IIIii , '' , '' , OOo00 )
   if 71 - 71: Iiii1i1 % i1IIi - oO0OooOoO - iiIi1i11 + iiIi1i11 * o0oOo0
  if O00oOo00o0o != '' :
   oO00oOOoooO ( 'addon' , '[COLOR=yellow][FULL DETAILS][/COLOR][COLOR=red] Add-on now depreciated[/COLOR]' , OOo00 , 'text_guide' , iI1IIIii , '' , '' , OOo00 )
   if 51 - 51: iIii1I11I1II1 / O00OOOoOoo0O + iiIi1i11 - o00O0OoO + i1Iii1i1I
   if 29 - 29: oOO00Oo % iIii1I11I1II1 . OoooooooOO % OoooooooOO % oO0OooOoO / i1Iii1i1I
  if O00oOo00o0o == '' :
   if 70 - 70: i11iIiiIii % i1Iii1i1I
   if OOOoO0O != '' and 'superrepo' not in OOOoO0O :
    oO00oooOOoOo0 ( '[COLOR=lime][INSTALL - Recommended] [/COLOR]' + i1iIIIi1i , i1iIIIi1i , '' , 'addon_install_zero' , iI1IIIii , '' , '' , oOOoo , O00 , iIi1 , OOOoO0O , I1iii11 , ooo0O , iiiI1 , i11iiI1111 )
    oO00oooOOoOo0 ( '[COLOR=lime][INSTALL - Backup Option] [/COLOR]' + i1iIIIi1i , i1iIIIi1i , '' , 'addon_install' , iI1IIIii , '' , '' , oOOoo , oOoooo000Oo00 , iIi1 , OOOoO0O , I1iii11 , ooo0O , iiiI1 , i11iiI1111 )
    if 11 - 11: i11111IIIII % OoooO0Oo0O0 % iI1IiiIIIiIi / oO0OooOoO % Iiii1i1 - II11iIiIIIiI
   if OOOoO0O == '' or 'superrepo' in OOOoO0O :
    oO00oooOOoOo0 ( '[COLOR=lime][INSTALL] [/COLOR]' + i1iIIIi1i + ' - THIS IS NOT IN A SELF UPDATING REPO' , i1iIIIi1i , '' , 'addon_install' , '' , '' , '' , oOOoo , oOoooo000Oo00 , iIi1 , OOOoO0O , I1iii11 , ooo0O , iiiI1 , i11iiI1111 )
    if 96 - 96: OoooO0Oo0O0 / oO0OooOoO . iI1IiiIIIiIi - i1Iii1i1I * o00O0OoO * III1IiiI
    if 76 - 76: iI1IiiIIIiIi - oO0OooOoO * iiIi1i11 / OoooooooOO
  if I1i11ii11 != 'None' :
   oO00oOOoooO ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  Preview' , Ii1iI111 , 'play_video' , '' , '' , '' , '' )
   if 18 - 18: ii1ii11IIIiiI + iIii1I11I1II1 - oO0OooOoO - o0Oo
  if Ii1iI111 != 'None' :
   oO00oOOoooO ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + oOo0oO , Ii1iI111 , 'play_video' , '' , '' , '' , '' )
   if 71 - 71: OoooooooOO
  if O0oooo00o0Oo != 'None' :
   oO00oOOoooO ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + IIi1IIIIi , O0oooo00o0Oo , 'play_video' , '' , '' , '' , '' )
   if 33 - 33: Iiii1i1
  if I1iii != 'None' :
   oO00oOOoooO ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + OOOoO , I1iii , 'play_video' , '' , '' , '' , '' )
   if 62 - 62: OoooO0Oo0O0 + iI1IiiIIIiIi + i1IIi / OoooooooOO
  if oO0o0O0Ooo0o != 'None' :
   oO00oOOoooO ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + I1i , oO0o0O0Ooo0o , 'play_video' , '' , '' , '' , '' )
   if 7 - 7: oOO00Oo + i1IIi . o0Oo / II11iIiIIIiI
  if i1Ii11II != 'None' :
   oO00oOOoooO ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + iiiI , i1Ii11II , 'play_video' , '' , '' , '' , '' )
   if 22 - 22: o0oOo0 - o0oOo0 % iiIi1i11 . Iiii1i1 + III1IiiI
  if IioO0oOOO0Ooo != 'None' :
   oO00oOOoooO ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + IiIi1 , IioO0oOOO0Ooo , 'play_video' , '' , '' , '' , '' )
   if 63 - 63: o0Oo % Iiii1i1 * oOO00Oo + Iiii1i1 / II11iIiIIIiI % i1Iii1i1I
  if i1i1I != 'None' :
   oO00oOOoooO ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + i111iiI1ii , i1i1I , 'play_video' , '' , '' , '' , '' )
   if 45 - 45: i11111IIIII
  if IiIIi1 != 'None' :
   oO00oOOoooO ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + IIiii , IiIIi1 , 'play_video' , '' , '' , '' , '' )
   if 20 - 20: OoooooooOO * oOO00Oo * O0 . iiIi1i11
  if iII11I1Ii1 != 'None' :
   oO00oOOoooO ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + I1i1i , iII11I1Ii1 , 'play_video' , '' , '' , '' , '' )
   if 78 - 78: iIii1I11I1II1 + o00O0OoO - iI1IiiIIIiIi * Iiii1i1 - OoooooooOO % O00OOOoOoo0O
  if o0o0 != 'None' :
   oO00oOOoooO ( '' , '[COLOR=dodgerblue][VIDEO][/COLOR]  ' + OOOOooO0oO00O0o , o0o0 , 'play_video' , '' , '' , '' , '' )
   if 34 - 34: O0
   if 80 - 80: i1IIi - II11iIiIIIiI / ii1ii11IIIiiI - i11iIiiIii
def OO0O0o0o0 ( url ) :
 oO00oOOoooO ( 'folder' , 'Anime' , url + '&genre=anime' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Audiobooks' , url + '&genre=audiobooks' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Comedy' , url + '&genre=comedy' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Comics' , url + '&genre=comics' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Documentary' , url + '&genre=documentary' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Downloads' , url + '&genre=downloads' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Food' , url + '&genre=food' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Gaming' , url + '&genre=gaming' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Health' , url + '&genre=health' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'How To...' , url + '&genre=howto' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Kids' , url + '&genre=kids' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Live TV' , url + '&genre=livetv' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Movies' , url + '&genre=movies' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Music' , url + '&genre=music' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'News' , url + '&genre=news' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Photos' , url + '&genre=photos' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Podcasts' , url + '&genre=podcasts' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Radio' , url + '&genre=radio' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Religion' , url + '&genre=religion' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Space' , url + '&genre=space' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Sports' , url + '&genre=sports' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Subscription' , url + '&genre=subscription' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Technology' , url + '&genre=tech' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Trailers' , url + '&genre=trailers' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'TV Shows' , url + '&genre=tv' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Misc.' , url + '&genre=other' , 'grab_addons' , '' , '' , '' , '' )
 if 31 - 31: iI1IiiIIIiIi
 if i1IiI1I11 . getSetting ( 'adult' ) == 'true' :
  oO00oOOoooO ( 'folder' , 'XXX' , url + '&genre=adult' , 'grab_addons' , '' , '' , '' , '' )
  if 44 - 44: O00OOOoOoo0O - iIii1I11I1II1 - II11iIiIIIiI
  if 80 - 80: iIii1I11I1II1 * Iiii1i1 % o00O0OoO % II11iIiIIIiI
def OooOO0o0 ( name , zip_link , repo_link , repo_id , addon_id , provider_name , forum , data_path ) :
 forum = str ( forum )
 repo_id = str ( repo_id )
 oOOoo0 = 1
 i1111IIiii1 = 1
 iIi = 1
 OOOoOoOooo = xbmc . translatePath ( os . path . join ( II11iiii1Ii , addon_id ) )
 if 74 - 74: iIii1I11I1II1 * i11111IIIII % O00OOOoOoo0O
 if os . path . exists ( OOOoOoOooo ) :
  iiI11iIi = 1
  if 89 - 89: O0
 else :
  iiI11iIi = 0
  if 2 - 2: OoooO0Oo0O0 . OoooO0Oo0O0 + OoooO0Oo0O0 * oOO00Oo
 oOo00oOOOOO = xbmc . translatePath ( os . path . join ( O00O0oOO00O00 , name + '.zip' ) )
 OoOOo0O00 = xbmc . translatePath ( os . path . join ( II11iiii1Ii , addon_id ) )
 if 49 - 49: O00OOOoOoo0O / II11iIiIIIiI . i11iIiiIii
 OOooO0OOoo . create ( "Installing Addon" , "Please wait whilst your addon is installed" , '' , '' )
 if 21 - 21: O00OOOoOoo0O + i11iIiiIii + o0Oo * oOO00Oo % i1Iii1i1I % oO0OooOoO
 try :
  downloader . download ( repo_link , oOo00oOOOOO , OOooO0OOoo )
  extract . all ( oOo00oOOOOO , II11iiii1Ii , OOooO0OOoo )
  if 55 - 55: II11iIiIIIiI - iiIi1i11
 except :
  if 84 - 84: Iiii1i1 + II11iIiIIIiI - O00OOOoOoo0O * O00OOOoOoo0O
  try :
   downloader . download ( zip_link , oOo00oOOOOO , OOooO0OOoo )
   extract . all ( oOo00oOOOOO , II11iiii1Ii , OOooO0OOoo )
   if 61 - 61: OoooooooOO . III1IiiI . OoooooooOO / II11iIiIIIiI
  except :
   if 72 - 72: i1IIi
   try :
    if not os . path . exists ( OoOOo0O00 ) :
     os . makedirs ( OoOOo0O00 )
     if 82 - 82: O00OOOoOoo0O + OoooooooOO / i11iIiiIii * OoooO0Oo0O0 . OoooooooOO
    OOOoOO = I11IIIi ( data_path , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
    oooo0OOo = re . compile ( 'href="(.+?)"' , re . DOTALL ) . findall ( OOOoOO )
    if 72 - 72: O0 / o0oOo0 + OoooooooOO * i1Iii1i1I
    for OoOo0OOOoOo in oooo0OOo :
     IIiiIIi1 = xbmc . translatePath ( os . path . join ( OoOOo0O00 , OoOo0OOOoOo ) )
     if 51 - 51: O00OOOoOoo0O
     if addon_id not in OoOo0OOOoOo and '/' not in OoOo0OOOoOo :
      if 14 - 14: i11111IIIII % III1IiiI % II11iIiIIIiI - i11iIiiIii
      try :
       OOooO0OOoo . update ( 0 , "Downloading [COLOR=yellow]" + OoOo0OOOoOo + '[/COLOR]' , '' , 'Please wait...' )
       downloader . download ( data_path + OoOo0OOOoOo , IIiiIIi1 , OOooO0OOoo )
       if 53 - 53: iI1IiiIIIiIi % II11iIiIIIiI
      except :
       print "failed to install" + OoOo0OOOoOo
       if 59 - 59: iiIi1i11 % iIii1I11I1II1 . i1IIi + oO0OooOoO * i11111IIIII
     if '/' in OoOo0OOOoOo and '..' not in OoOo0OOOoOo and 'http' not in OoOo0OOOoOo :
      i1IiiI1iIi = data_path + OoOo0OOOoOo
      oOOo00O0OOOo ( IIiiIIi1 , i1IiiI1iIi )
      if 31 - 31: o00O0OoO % iiIi1i11 * o00O0OoO
   except :
    iI111I11I1I1 . ok ( "Error downloading add-on" , 'There was an error downloading [COLOR=yellow]' + name , '[/COLOR]Please consider updating the add-on portal with details or report the error on the forum at [COLOR=orange]www.noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds.com[/COLOR]' )
    oOOoo0 = 0
    if 45 - 45: i1IIi . o0Oo + iiIi1i11 - OoooooooOO % o0oOo0
 if oOOoo0 == 1 :
  time . sleep ( 1 )
  OOooO0OOoo . update ( 0 , "[COLOR=yellow]" + name + '[/COLOR]  [COLOR=lime]Successfully Installed[/COLOR]' , '' , 'Now installing repository' )
  time . sleep ( 1 )
  i1Iii = xbmc . translatePath ( os . path . join ( II11iiii1Ii , repo_id ) )
  if 39 - 39: oOO00Oo - OoooO0Oo0O0 % i1Iii1i1I * ii1ii11IIIiiI - iiIi1i11 / i1Iii1i1I
  if ( repo_id != 'repository.xbmc.org' ) and not ( os . path . exists ( i1Iii ) ) and ( repo_id != '' ) and ( 'superrepo' not in repo_id ) :
   iIiiiiii1 ( repo_id )
   if 78 - 78: OoooO0Oo0O0 + o00O0OoO - O0
  xbmc . sleep ( 2000 )
  if 10 - 10: Iiii1i1 % o0Oo
  if os . path . exists ( OOOoOoOooo ) and iiI11iIi == 0 :
   oo0OoOooo = 'http://noobsandnerds.com/TI/AddonPortal/downloadcount.php?id=%s' % ( addon_id )
   try :
    I11IIIi ( oo0OoOooo )
   except :
    pass
    if 95 - 95: i11111IIIII * OoooO0Oo0O0 % o0oOo0 % iI1IiiIIIiIi - iI1IiiIIIiIi
  oOoooO0 ( name , addon_id )
  xbmc . executebuiltin ( 'UpdateLocalAddons' )
  xbmc . executebuiltin ( 'UpdateAddonRepos' )
  xbmc . executebuiltin ( 'Container.Refresh' )
  if 68 - 68: o0oOo0 / oOO00Oo
  if i1111IIiii1 == 0 :
   iI111I11I1I1 . ok ( name + " Install Complete" , 'The add-on has been successfully installed but' , 'there was an error installing the repository.' , 'This will mean the add-on fails to update' )
   if 1 - 1: O0 / i1Iii1i1I % Iiii1i1 . II11iIiIIIiI + i11111IIIII
  if iIi == 0 :
   iI111I11I1I1 . ok ( name + " Install Complete" , 'The add-on has been successfully installed but' , 'there was an error installing modules.' , 'This could result in errors with the add-on.' )
   if 27 - 27: Iiii1i1 % OoooooooOO + i11111IIIII % i1IIi / III1IiiI / OoooooooOO
  if iIi != 0 and i1111IIiii1 != 0 and forum != 'None' :
   iI111I11I1I1 . ok ( name + " Install Complete" , 'Please support the developer(s) [COLOR=dodgerblue]' + provider_name , '[/COLOR]Support for this add-on can be found at [COLOR=yellow]' + forum , '[/COLOR][CR]Visit [COLOR=orange]www.noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds.com[/COLOR] for all your Kodi needs.' )
   if 11 - 11: iiIi1i11 % iI1IiiIIIiIi - i11iIiiIii - III1IiiI + o0oOo0 + i11111IIIII
  if iIi != 0 and i1111IIiii1 != 0 and forum == 'None' :
   iI111I11I1I1 . ok ( name + " Install Complete" , 'Please support the developer(s) [COLOR=dodgerblue]' + provider_name , '[/COLOR]No details of forum support have been given.' )
   if 87 - 87: Iiii1i1 * i1IIi / OoooO0Oo0O0
   if 6 - 6: oOO00Oo + II11iIiIIIiI - OoooooooOO % iiIi1i11 * O00OOOoOoo0O
   if 69 - 69: i1IIi
def ooOoOOOOo ( name , contenttypes , repo_link , repo_id , addon_id , provider_name , forum , data_path ) :
 OOOoOoOooo = xbmc . translatePath ( os . path . join ( II11iiii1Ii , addon_id ) )
 forum = str ( forum )
 if 71 - 71: oO0OooOoO * iIii1I11I1II1 / OoooO0Oo0O0
 if not os . path . exists ( OOOoOoOooo ) :
  iiIIi = 1
  if 96 - 96: i1Iii1i1I
 else :
  iiIIi = 0
  if 18 - 18: i1Iii1i1I * o00O0OoO - iI1IiiIIIiIi
 repo_id = str ( repo_id )
 i1Iii = xbmc . translatePath ( os . path . join ( II11iiii1Ii , repo_id ) )
 if 31 - 31: II11iIiIIIiI - O0 % O00OOOoOoo0O % III1IiiI
 if os . path . exists ( OOOoOoOooo ) :
  iiI11iIi = 1
  iI1iii = iI111I11I1I1 . yesno ( 'Add-on Already Installed' , 'This add-on has already been detected on your system. Would you like to remove the old version and re-install? There should be no need for this unless you\'ve manually opened up the add-on code and edited in a text editor.' )
  if 87 - 87: OoooO0Oo0O0 / OoooooooOO - II11iIiIIIiI % O00OOOoOoo0O % i11111IIIII % II11iIiIIIiI
  if iI1iii == 1 :
   Ii1 ( OOOoOoOooo )
   iiIIi = 1
 else :
  iiI11iIi = 0
  if 34 - 34: i1Iii1i1I - OoooooooOO . o0Oo / oO0OooOoO
 II1II = False
 if 97 - 97: i11iIiiIii / iiIi1i11 % Iiii1i1
 if iiIIi == 1 :
  if 71 - 71: OoooooooOO
  if ( repo_id != 'repository.xbmc.org' ) and not ( os . path . exists ( i1Iii ) ) and ( repo_id != '' ) and ( 'superrepo' not in repo_id ) :
   II1II = iIiiiiii1 ( repo_id )
   if 11 - 11: i11111IIIII
   if 55 - 55: II11iIiIIIiI
  if II1II :
   if not os . path . exists ( OOOoOoOooo ) :
    os . makedirs ( OOOoOoOooo )
    if 77 - 77: oO0OooOoO
   IiiiIi1iI1iI = os . path . join ( II11iiii1Ii , addon_id , 'addon.xml' )
   OO00o = os . path . join ( II11iiii1Ii , addon_id , 'default.py' )
   shutil . copyfile ( Oo00OOOOO , IiiiIi1iI1iI )
   if 60 - 60: OoooO0Oo0O0 - III1IiiI - o0Oo / oOO00Oo
   oooo00 = open ( os . path . join ( IiiiIi1iI1iI ) , mode = 'r' )
   i11ii1iI = oooo00 . read ( )
   oooo00 . close ( )
   if 35 - 35: Iiii1i1 . O00OOOoOoo0O * i11iIiiIii
   if 44 - 44: i11iIiiIii / II11iIiIIIiI
   Ii1IIi = re . compile ( 'testid[\s\S]*?' ) . findall ( i11ii1iI )
   iI = Ii1IIi [ 0 ] if ( len ( Ii1IIi ) > 0 ) else 'None'
   i111i11I1ii = re . compile ( 'testname[\s\S]*?' ) . findall ( i11ii1iI )
   OOo0o0O0O = i111i11I1ii [ 0 ] if ( len ( i111i11I1ii ) > 0 ) else 'None'
   OOooo = re . compile ( 'testprovider[\s\S]*?' ) . findall ( i11ii1iI )
   oo0oOO = OOooo [ 0 ] if ( len ( OOooo ) > 0 ) else 'None'
   II1i11i1iIi11 = re . compile ( 'testprovides[\s\S]*?' ) . findall ( i11ii1iI )
   oo0O0oO0O0O = II1i11i1iIi11 [ 0 ] if ( len ( II1i11i1iIi11 ) > 0 ) else 'None'
   IIiIi11i1i = i11ii1iI . replace ( iI , addon_id ) . replace ( OOo0o0O0O , name ) . replace ( oo0oOO , provider_name ) . replace ( oo0O0oO0O0O , contenttypes )
   if 69 - 69: III1IiiI / i11iIiiIii
   i1I = open ( IiiiIi1iI1iI , mode = 'w+' )
   i1I . write ( str ( IIiIi11i1i ) )
   i1I . close ( )
   if 94 - 94: III1IiiI / i11111IIIII / i1IIi * iIii1I11I1II1
   ooo0 = open ( OO00o , mode = 'w' )
   ooo0 . write ( 'import xbmcplugin,xbmcgui,xbmc,xbmcaddon,os,sys\nAddonID="' + addon_id + '"\nAddonName="' + name + '"\ndialog=xbmcgui.Dialog()\nxbmc.executebuiltin("UpdateLocalAddons")\nxbmc.executebuiltin("UpdateAddonRepos")\nchoice=dialog.yesno(AddonName+" Add-on Requires Update","This add-on may still be in the process of the updating. We recommend waiting but if you\'ve already tried that and it\'s not updating you can try re-installing via the CP backup method.",yeslabel="Install Option 2", nolabel="Wait...")\nif choice == 1: xbmc.executebuiltin(\'ActivateWindow(10001,"plugin://plugin.program.totalinstaller/?mode=grab_addons&url=%26redirect%26addonid%3d\'+AddonID+\'")\')\nxbmcplugin.endOfDirectory(int(sys.argv[1]))' )
   ooo0 . close ( )
   if 1 - 1: iI1IiiIIIiIi
   xbmc . sleep ( 1000 )
   if 48 - 48: O0 + O0 . Iiii1i1 - o0oOo0
   if os . path . exists ( OOOoOoOooo ) and iiI11iIi == 0 :
    oo0OoOooo = 'http://noobsandnerds.com/TI/AddonPortal/downloadcount.php?id=%s' % ( addon_id )
    try :
     I11IIIi ( oo0OoOooo , 5 )
    except :
     pass
     if 63 - 63: III1IiiI
   xbmc . executebuiltin ( 'UpdateLocalAddons' )
   xbmc . executebuiltin ( 'UpdateAddonRepos' )
   xbmc . executebuiltin ( 'Container.Refresh' )
   iI111I11I1I1 . ok ( name + " Install Complete" , '[COLOR=dodgerblue]' + name + '[/COLOR] has now been installed, please allow a few moments for Kodi to update the add-on and it\'s dependencies.' )
  else :
   iI111I11I1I1 . ok ( 'Failed Install' , 'The repository could not be installed, the developer may have deleted it. Please try the backup install option.' )
   if 71 - 71: i1IIi . iI1IiiIIIiIi * i1Iii1i1I % OoooooooOO + iiIi1i11
   if 36 - 36: i11111IIIII
def i1iiI ( name , contenttypes , repo_link , repo_id , addon_id , provider_name , forum , data_path ) :
 i1Iii = xbmc . translatePath ( os . path . join ( II11iiii1Ii , repo_id ) )
 OOOoOoOooo = xbmc . translatePath ( os . path . join ( II11iiii1Ii , addon_id ) )
 if 74 - 74: Iiii1i1 % OoooO0Oo0O0
 if os . path . exists ( OOOoOoOooo ) :
  if 7 - 7: oO0OooOoO
  iI1iii = iI111I11I1I1 . yesno ( 'Add-on Already Installed' , 'This add-on has already been detected on your system. Would you like to remove the old version and re-install? There should be no need for this unless you\'ve manually opened up the add-on code and edited in a text editor.' )
  if 27 - 27: III1IiiI . OoooooooOO + i11iIiiIii
  if iI1iii == 1 :
   Ii1 ( OOOoOoOooo )
   if 86 - 86: o00O0OoO / oOO00Oo - oOO00Oo + OoooO0Oo0O0 + III1IiiI
 if os . path . exists ( i1Iii ) :
  if 33 - 33: oOO00Oo . i1Iii1i1I . i11111IIIII . i1IIi
  if os . path . exists ( OOOoOoOooo ) :
   iiI11iIi = 1
   if 49 - 49: OoooO0Oo0O0
  else :
   iiI11iIi = 0
   if 84 - 84: o00O0OoO - II11iIiIIIiI / O0 - Iiii1i1
  iI1iii = iI111I11I1I1 . yesno ( 'WARNING!' , '[COLOR=orange]This Add-on may be unlawful in your region.[/COLOR][CR]The repository required for installation of this add-on has been detected on your system. Would you like to continue to the Kodi addon browser to install?' )
  if 21 - 21: O0 * O0 % OoooO0Oo0O0
  if iI1iii == 1 :
   if 94 - 94: o00O0OoO + oO0OooOoO % i11iIiiIii
   if 'video' in contenttypes :
    xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://' + repo_id + '/xbmc.addon.video/?",return)' )
    if 8 - 8: o0oOo0 * O0
   elif 'executable' in contenttypes :
    xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://' + repo_id + '/xbmc.addon.executable/?",return)' )
    if 73 - 73: oOO00Oo / III1IiiI / o00O0OoO / ii1ii11IIIiiI
   elif 'audio' in contenttypes :
    xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://' + repo_id + '/xbmc.addon.audio/?",return)' )
    if 11 - 11: O00OOOoOoo0O + i11111IIIII - OoooooooOO / ii1ii11IIIiiI
  xbmc . sleep ( 2000 )
  if 34 - 34: o0oOo0
  if os . path . exists ( OOOoOoOooo ) and iiI11iIi == 0 :
   oo0OoOooo = 'http://noobsandnerds.com/TI/AddonPortal/downloadcount.php?id=%s' % ( addon_id )
   try :
    I11IIIi ( oo0OoOooo , 5 )
   except :
    pass
    if 45 - 45: o0oOo0 / II11iIiIIIiI / iI1IiiIIIiIi
  xbmc . executebuiltin ( 'Container.Refresh' )
 else :
  iI111I11I1I1 . ok ( 'WARNING!' , '[COLOR=orange]This add-on may possibly be unlawful in your region.[/COLOR][CR]If you\'ve investigated the legality of it and are happy to install then you must have the following repository installed: [COLOR=dodgerblue]' + repo_id + '[/COLOR]' )
  if 44 - 44: OoooO0Oo0O0 - iI1IiiIIIiIi / oO0OooOoO * ii1ii11IIIiiI * II11iIiIIIiI
  if 73 - 73: oOO00Oo - o0Oo * i1IIi / i11iIiiIii * iiIi1i11 % oO0OooOoO
def OooOoOOo0oO00 ( name , contenttypes , repo_link , repo_id , addon_id , provider_name , forum , data_path ) :
 iI111I11I1I1 . ok ( 'Add-on Not Approved' , 'Sorry there are no repository details for this add-on and it\'s been marked as potentially giving access to unlawful content. The most likely cause for this is the add-on has only been released via social media groups.' )
 if 73 - 73: i1Iii1i1I / OoooO0Oo0O0 % OoooO0Oo0O0 * o00O0OoO / OoooO0Oo0O0
 if 8 - 8: iI1IiiIIIiIi
def I11iII ( sign ) :
 if 2 - 2: o0Oo + oOO00Oo . oOO00Oo . O0 / o00O0OoO
 if 40 - 40: oOO00Oo - oO0OooOoO / II11iIiIIIiI
 oO00oOOoooO ( 'folder' , '[COLOR=gold][Popular][/COLOR] Show the top 100 most downloaded add-ons' , 'popular' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=gold][Brand New][/COLOR] Show the new releases' , 'latest' , 'grab_addons' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=gold][Manual Search][/COLOR] Type in author/name/content' , 'desc=' , 'search_addons' , '' , '' , '' , '' )
 if 14 - 14: OoooO0Oo0O0
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][Filter Results][/COLOR] By Genres' , 'p' , 'addon_genres' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][Filter Results][/COLOR] By Countries' , 'p' , 'addon_countries' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][Filter Results][/COLOR] By Kodi Categories' , 'p' , 'addon_categories' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=orange][Kodi Add-on Browser][/COLOR] Install From Zip' , '' , 'install_from_zip' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=orange][Kodi Add-on Browser][/COLOR] Browse My Repositories' , '' , 'browse_repos' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=orange][Kodi Add-on Browser][/COLOR] Check For Add-on Updates' , '' , 'check_updates' , '' , '' , '' , '' )
 if 5 - 5: oOO00Oo . iIii1I11I1II1 % iIii1I11I1II1
 if 56 - 56: OoooooooOO - o00O0OoO - i1IIi
def I1i1I ( ) :
 for file in glob . glob ( os . path . join ( II11iiii1Ii , '*' ) ) :
  i1iIIIi1i = str ( file ) . replace ( II11iiii1Ii , '[COLOR=red]REMOVE [/COLOR]' ) . replace ( 'plugin.' , '[COLOR=dodgerblue](PLUGIN) [/COLOR]' ) . replace ( 'audio.' , '' ) . replace ( 'video.' , '' ) . replace ( 'skin.' , '[COLOR=yellow](SKIN) [/COLOR]' ) . replace ( 'repository.' , '[COLOR=orange](REPOSITORY) [/COLOR]' ) . replace ( 'script.' , '[COLOR=cyan](SCRIPT) [/COLOR]' ) . replace ( 'metadata.' , '[COLOR=orange](METADATA) [/COLOR]' ) . replace ( 'service.' , '[COLOR=pink](SERVICE) [/COLOR]' ) . replace ( 'weather.' , '[COLOR=green](WEATHER) [/COLOR]' ) . replace ( 'module.' , '[COLOR=orange](MODULE) [/COLOR]' )
  iii1I1Iii = ( os . path . join ( file , 'icon.png' ) )
  o00oo0 = ( os . path . join ( file , 'fanart.jpg' ) )
  oO00oOOoooO ( '' , i1iIIIi1i , file , 'remove_addons' , iii1I1Iii , o00oo0 , '' , '' )
  if 93 - 93: i11iIiiIii % iIii1I11I1II1 % i11iIiiIii + oOO00Oo / oOO00Oo / oO0OooOoO
  if 49 - 49: iiIi1i11 . OoooO0Oo0O0 . i11iIiiIii - oO0OooOoO / iI1IiiIIIiIi
def ooOo0O0o0 ( ) :
 i1IiI1I11 . openSettings ( sys . argv [ 0 ] )
 xbmc . executebuiltin ( 'Container.Refresh' )
 if 65 - 65: o0oOo0 + O0
def IiII1iiI ( ) :
 iII = xbmc . getInfoLabel ( "System.BuildVersion" )
 iII1iii = float ( iII [ : 4 ] )
 if iII1iii < 14 :
  oO0O000oOoo0O = os . path . join ( O0Oo000ooO00 , 'xbmc.log' )
 else :
  oO0O000oOoo0O = os . path . join ( O0Oo000ooO00 , 'kodi.log' )
  if 9 - 9: III1IiiI * i1IIi - i1IIi
 try :
  IiIiiI11i1Ii = open ( oO0O000oOoo0O , mode = 'r' )
  i11ii1iI = IiIiiI11i1Ii . read ( )
  IiIiiI11i1Ii . close ( )
 except :
  try :
   IiIiiI11i1Ii = open ( os . path . join ( iIii1 , 'temp' , 'kodi.log' ) , mode = 'r' )
   i11ii1iI = IiIiiI11i1Ii . read ( )
   IiIiiI11i1Ii . close ( )
  except :
   try :
    IiIiiI11i1Ii = open ( os . path . join ( iIii1 , 'temp' , 'xbmc.log' ) , mode = 'r' )
    i11ii1iI = IiIiiI11i1Ii . read ( )
    IiIiiI11i1Ii . close ( )
   except :
    pass
    if 100 - 100: Iiii1i1 . o0Oo * Iiii1i1 - o0Oo . o00O0OoO * iI1IiiIIIiIi
 oO000o = re . compile ( 'External storage path = (.+?);' ) . findall ( i11ii1iI )
 o0Ooo0O0 = oO000o [ 0 ] if ( len ( oO000o ) > 0 ) else ''
 return o0Ooo0O0
 if 48 - 48: o00O0OoO - i11111IIIII + iIii1I11I1II1 + OoooooooOO
 if 4 - 4: oO0OooOoO . o00O0OoO + iI1IiiIIIiIi * Iiii1i1 . o0oOo0
def oOoOo ( sourcefile , destfile , message_header , message1 , message2 , message3 , exclude_dirs , exclude_files ) :
 oO0OO = zipfile . ZipFile ( destfile , 'w' , zipfile . ZIP_DEFLATED )
 OO0o0OO0 = len ( sourcefile )
 OooOo0OOO = [ ]
 I1Io00oOOoO0oO = [ ]
 if 26 - 26: iI1IiiIIIiIi * iIii1I11I1II1 % ii1ii11IIIiiI . oOO00Oo + II11iIiIIIiI
 OOooO0OOoo . create ( message_header , message1 , message2 , message3 )
 if 80 - 80: II11iIiIIIiI * iI1IiiIIIiIi + OoooO0Oo0O0 * iiIi1i11
 for I1Ii , ooooOoO0O , IIII in os . walk ( sourcefile ) :
  if 8 - 8: oOO00Oo / OoooO0Oo0O0 - i11iIiiIii % iIii1I11I1II1
  for file in IIII :
   I1Io00oOOoO0oO . append ( file )
   if 66 - 66: i11111IIIII
 O0oOo = len ( I1Io00oOOoO0oO )
 if 68 - 68: OoooO0Oo0O0 % OoooooooOO % OoooO0Oo0O0 + Iiii1i1
 for I1Ii , ooooOoO0O , IIII in os . walk ( sourcefile ) :
  if 10 - 10: II11iIiIIIiI + O0
  ooooOoO0O [ : ] = [ Ii1iI for Ii1iI in ooooOoO0O if Ii1iI not in exclude_dirs ]
  IIII [ : ] = [ Oo0O0O000 for Oo0O0O000 in IIII if Oo0O0O000 not in exclude_files and not 'crashlog' in Oo0O0O000 and not 'stacktrace' in Oo0O0O000 ]
  if 29 - 29: oOO00Oo / II11iIiIIIiI * OoooO0Oo0O0 . oOO00Oo
  for file in IIII :
   if 64 - 64: III1IiiI / o0oOo0 % i11iIiiIii
   try :
    OooOo0OOO . append ( file )
    I11oOOooo = len ( OooOo0OOO ) / float ( O0oOo ) * 100
    OOooO0OOoo . update ( 0 , "Backing Up" , '[COLOR yellow]%s[/COLOR]' % Ii1iI , 'Please Wait' )
    ooo0O0Oo = os . path . join ( I1Ii , file )
    if 18 - 18: iiIi1i11 + Iiii1i1
   except :
    print "Unable to backup file: " + file
    if 80 - 80: III1IiiI + oOO00Oo * iI1IiiIIIiIi + ii1ii11IIIiiI
   if not 'temp' in ooooOoO0O :
    if 75 - 75: o00O0OoO / oOO00Oo / iiIi1i11 / i11111IIIII % o0oOo0 + oO0OooOoO
    if not o0OO00 in ooooOoO0O :
     if 4 - 4: i1Iii1i1I - II11iIiIIIiI - i11111IIIII - o00O0OoO % i11iIiiIii / ii1ii11IIIiiI
     try :
      i1iii11 = '01/01/1980'
      oOo0O0o0000o0O0 = time . strftime ( '%d/%m/%Y' , time . gmtime ( os . path . getmtime ( ooo0O0Oo ) ) )
      if 53 - 53: Iiii1i1
      if oOo0O0o0000o0O0 > i1iii11 :
       oO0OO . write ( ooo0O0Oo , ooo0O0Oo [ OO0o0OO0 : ] )
       if 69 - 69: O00OOOoOoo0O . oOO00Oo . o0Oo - OoooO0Oo0O0
     except :
      print "Unable to backup file: " + file
      if 32 - 32: OoooooooOO / o0Oo / iIii1I11I1II1 + oO0OooOoO . III1IiiI . oOO00Oo
 oO0OO . close ( )
 OOooO0OOoo . close ( )
 if 21 - 21: iIii1I11I1II1 / oO0OooOoO % i1IIi
 if 8 - 8: ii1ii11IIIiiI + O00OOOoOoo0O . iIii1I11I1II1 % O0
def iI11Ii111 ( sourcefile , destfile ) :
 oO0OO = zipfile . ZipFile ( destfile , 'w' , zipfile . ZIP_DEFLATED )
 OO0o0OO0 = len ( sourcefile )
 OooOo0OOO = [ ]
 I1Io00oOOoO0oO = [ ]
 if 54 - 54: O00OOOoOoo0O % i1Iii1i1I . O00OOOoOoo0O * iiIi1i11 + O00OOOoOoo0O % i1IIi
 OOooO0OOoo . create ( "Backing Up Files" , "Archiving..." , '' , 'Please Wait' )
 if 23 - 23: Iiii1i1 - iiIi1i11 + iI1IiiIIIiIi - O00OOOoOoo0O * O00OOOoOoo0O . II11iIiIIIiI
 for I1Ii , ooooOoO0O , IIII in os . walk ( sourcefile ) :
  if 47 - 47: III1IiiI % iIii1I11I1II1
  for file in IIII :
   I1Io00oOOoO0oO . append ( file )
   if 11 - 11: o0Oo % iI1IiiIIIiIi - ii1ii11IIIiiI - III1IiiI + oOO00Oo
 O0oOo = len ( I1Io00oOOoO0oO )
 if 98 - 98: i1Iii1i1I + iI1IiiIIIiIi - ii1ii11IIIiiI
 for I1Ii , ooooOoO0O , IIII in os . walk ( sourcefile ) :
  if 79 - 79: iiIi1i11 / Iiii1i1 . O00OOOoOoo0O - OoooO0Oo0O0
  for file in IIII :
   OooOo0OOO . append ( file )
   I11oOOooo = len ( OooOo0OOO ) / float ( O0oOo ) * 100
   OOooO0OOoo . update ( int ( I11oOOooo ) , "Backing Up" , '[COLOR yellow]%s[/COLOR]' % file , 'Please Wait' )
   ooo0O0Oo = os . path . join ( I1Ii , file )
   if 47 - 47: OoooooooOO % O0 * i1Iii1i1I . iI1IiiIIIiIi
   if not 'temp' in ooooOoO0O :
    if 38 - 38: O0 - i11111IIIII % Iiii1i1
    if not o0OO00 in ooooOoO0O :
     if 64 - 64: iIii1I11I1II1
     import time
     i1iii11 = '01/01/1980'
     oOo0O0o0000o0O0 = time . strftime ( '%d/%m/%Y' , time . gmtime ( os . path . getmtime ( ooo0O0Oo ) ) )
     if 15 - 15: OoooO0Oo0O0 + iiIi1i11 / OoooO0Oo0O0 / Iiii1i1
     if oOo0O0o0000o0O0 > i1iii11 :
      oO0OO . write ( ooo0O0Oo , ooo0O0Oo [ OO0o0OO0 : ] )
 oO0OO . close ( )
 OOooO0OOoo . close ( )
 if 31 - 31: o0oOo0 + O0 + o0oOo0 . iIii1I11I1II1 + II11iIiIIIiI / oOO00Oo
 if 6 - 6: II11iIiIIIiI % i11111IIIII * o00O0OoO / o0Oo + II11iIiIIIiI
def IIiI11i11 ( ) :
 i1iiIII1IIiIIII = iI111I11I1I1 . browse ( 3 , 'Select the folder you want to scan' , 'files' , '' , False , False )
 OO0o0OO0 = len ( i1iiIII1IIiIIII )
 OooOo0OOO = [ ]
 I1Io00oOOoO0oO = [ ]
 if 19 - 19: i1Iii1i1I - oOO00Oo / oOO00Oo + II11iIiIIIiI
 OOooO0OOoo . create ( 'Checking File Structure' , '' , 'Please wait...' , '' )
 if 98 - 98: iIii1I11I1II1 % iiIi1i11 + o00O0OoO . o0oOo0
 iI1iii = iI111I11I1I1 . yesno ( 'Delete or Scan?' , 'Do you want to delete all filenames with special characters or would you rather just scan and view the results in the log?' , yeslabel = 'Delete' , nolabel = 'Scan' )
 if 99 - 99: O0 + O0 * o00O0OoO + O0 * III1IiiI
 oOoO0O00oo = open ( O00oO , mode = 'w+' )
 OOoOoo00Oo = open ( I11i1I1I , mode = 'w+' )
 if 9 - 9: oO0OooOoO * oO0OooOoO . i11iIiiIii * iIii1I11I1II1
 for I1Ii , ooooOoO0O , IIII in os . walk ( i1iiIII1IIiIIII ) :
  if 18 - 18: ii1ii11IIIiiI . oO0OooOoO % O00OOOoOoo0O % iI1IiiIIIiIi
  for file in IIII :
   I1Io00oOOoO0oO . append ( file )
   if 87 - 87: iIii1I11I1II1 . OoooooooOO * O00OOOoOoo0O
 O0oOo = len ( I1Io00oOOoO0oO )
 if 100 - 100: ii1ii11IIIiiI / i1IIi - o0Oo % iI1IiiIIIiIi - iIii1I11I1II1
 for I1Ii , ooooOoO0O , IIII in os . walk ( i1iiIII1IIiIIII ) :
  if 17 - 17: o00O0OoO / oOO00Oo % II11iIiIIIiI
  ooooOoO0O [ : ] = [ Ii1iI for Ii1iI in ooooOoO0O ]
  IIII [ : ] = [ Oo0O0O000 for Oo0O0O000 in IIII ]
  if 71 - 71: i11111IIIII . Iiii1i1 . ii1ii11IIIiiI
  for file in IIII :
   if 68 - 68: i11iIiiIii % III1IiiI * ii1ii11IIIiiI * i11111IIIII * oO0OooOoO + O0
   OooOo0OOO . append ( file )
   I11oOOooo = len ( OooOo0OOO ) / float ( O0oOo ) * 100
   OOooO0OOoo . update ( 0 , "Checking for non ASCII files" , '[COLOR yellow]%s[/COLOR]' % Ii1iI , 'Please Wait' )
   if 66 - 66: o00O0OoO % OoooO0Oo0O0 % OoooooooOO
   try :
    file . encode ( 'ascii' )
    if 34 - 34: oOO00Oo / i1Iii1i1I % O0 . ii1ii11IIIiiI . i1IIi
   except UnicodeDecodeError :
    iiO0O0o0oO0O00 = ( str ( I1Ii ) + '/' + str ( file ) ) . replace ( '\\' , '/' ) . replace ( ':/' , ':\\' )
    if 70 - 70: Iiii1i1 + III1IiiI
    print " non-ASCII file status logged successfully: " + iiO0O0o0oO0O00
    if iI1iii != 1 :
     oOoO0O00oo . write ( '[COLOR=dodgerblue]Non-ASCII File:[/COLOR]\n' )
     for o00ooo0 in i1i1IiIi1 ( iiO0O0o0oO0O00 , 75 ) :
      oOoO0O00oo . write ( o00ooo0 + '[CR]' )
     oOoO0O00oo . write ( '\n' )
    if iI1iii == 1 :
     try :
      os . remove ( iiO0O0o0oO0O00 )
      print "### SUCCESS - deleted " + iiO0O0o0oO0O00
      oOoO0O00oo . write ( '[COLOR=dodgerblue]SUCCESSFULLY DELETED:[/COLOR]\n' )
      for o00ooo0 in i1i1IiIi1 ( iiO0O0o0oO0O00 , 75 ) :
       oOoO0O00oo . write ( o00ooo0 + '[CR]' )
      oOoO0O00oo . write ( '\n' )
      if 22 - 22: o00O0OoO * O0 . oO0OooOoO - ii1ii11IIIiiI
     except :
      print "######## FAILED TO REMOVE: " + iiO0O0o0oO0O00
      print "######## Make sure you manually remove this file ##########"
      OOoOoo00Oo . write ( '[COLOR=red]FAILED TO DELETE:[/COLOR]\n' )
      for o00ooo0 in i1i1IiIi1 ( iiO0O0o0oO0O00 , 75 ) :
       OOoOoo00Oo . write ( o00ooo0 + '[CR]' )
      OOoOoo00Oo . write ( '\n' )
      if 90 - 90: III1IiiI
 OOoOoo00Oo . close ( )
 oOoO0O00oo . close ( )
 if 94 - 94: o00O0OoO / OoooO0Oo0O0 * Iiii1i1 - O00OOOoOoo0O
 if 44 - 44: iI1IiiIIIiIi % i11iIiiIii - i1Iii1i1I * OoooO0Oo0O0 + II11iIiIIIiI * iiIi1i11
 oOoO0O00oo = open ( O00oO , mode = 'r' )
 IiI1iI1IiiIi1 = oOoO0O00oo . read ( )
 oOoO0O00oo . close ( )
 OOoOoo00Oo = open ( I11i1I1I , mode = 'r' )
 OoO0oo = OOoOoo00Oo . read ( )
 OOoOoo00Oo . close ( )
 if IiI1iI1IiiIi1 == '' and OoO0oo == '' :
  iI111I11I1I1 . ok ( 'No Special Characters Found' , 'Great news, all filenames in the path you scanned are ASCII based - no special characters found.' )
 else :
  OoOoO0O = open ( o0O , mode = 'w+' )
  OoOoO0O . write ( IiI1iI1IiiIi1 + '\n\n' + OoO0oo )
  OoOoO0O . close ( )
  o0i1I11iI1iiI = open ( o0O , mode = 'r' )
  I1ii = o0i1I11iI1iiI . read ( )
  o0i1I11iI1iiI . close ( )
  oO0o ( 'Final Results' , I1ii )
  os . remove ( o0O )
 os . remove ( O00oO )
 os . remove ( I11i1I1I )
 if 50 - 50: i1Iii1i1I / i1Iii1i1I + iiIi1i11 * o0oOo0 / OoooO0Oo0O0
 if 14 - 14: iI1IiiIIIiIi % o0Oo - iIii1I11I1II1 . iiIi1i11 + ii1ii11IIIiiI - Iiii1i1
def iI1iIiiiI1I1 ( ) :
 oO00oOOoooO ( '' , '[COLOR=darkcyan][INSTRUCTIONS][/COLOR] How to create and share my build' , '' , 'instructions_1' , '' , '' , '' , 'Back Up Your Full System' )
 oO00oOOoooO ( '' , '[COLOR=gold]-----------------------------------------------------------------[/COLOR]' , '' , '' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Create [COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR] Community Build (for sharing on CP)' , 'url' , 'community_backup' , '' , '' , '' , 'Back Up Your Full System' )
 if OOOOOo ( ) :
  oO00oOOoooO ( '' , 'Create OpenELEC Backup (full backup can only be used on OpenELEC)' , 'none' , 'openelec_backup' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Create Universal Build (local backups only)' , 'none' , 'community_backup_2' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Create Full Backup (will only work on THIS device)' , 'local' , 'local_backup' , '' , '' , '' , 'Back Up Your Full System' )
 oO00oOOoooO ( '' , 'Backup Addons Only' , 'addons' , 'restore_zip' , '' , '' , '' , 'Back Up Your Addons' )
 oO00oOOoooO ( '' , 'Backup Addon Data Only' , 'addon_data' , 'restore_zip' , '' , '' , '' , 'Back Up Your Addon Userdata' )
 oO00oOOoooO ( '' , 'Backup Guisettings.xml' , I11i1 , 'restore_backup' , '' , '' , '' , 'Back Up Your guisettings.xml' )
 if 50 - 50: iI1IiiIIIiIi - i11iIiiIii + iIii1I11I1II1 / O0 - iI1IiiIIIiIi + oOO00Oo
 if os . path . exists ( IIIII ) :
  oO00oOOoooO ( '' , 'Backup Favourites.xml' , IIIII , 'restore_backup' , '' , '' , '' , 'Back Up Your favourites.xml' )
  if 22 - 22: oO0OooOoO - iI1IiiIIIiIi / o0oOo0 % OoooooooOO + iiIi1i11
 if os . path . exists ( ooooooO0oo ) :
  oO00oOOoooO ( '' , 'Backup Source.xml' , ooooooO0oo , 'restore_backup' , '' , '' , '' , 'Back Up Your sources.xml' )
  if 5 - 5: ii1ii11IIIiiI / i1Iii1i1I + i11iIiiIii % o00O0OoO
 if os . path . exists ( IIiiiiiiIi1I1 ) :
  oO00oOOoooO ( '' , 'Backup Advancedsettings.xml' , IIiiiiiiIi1I1 , 'restore_backup' , '' , '' , '' , 'Back Up Your advancedsettings.xml' )
  if 93 - 93: O00OOOoOoo0O % iIii1I11I1II1
 if os . path . exists ( OOOO ) :
  oO00oOOoooO ( '' , 'Backup Advancedsettings.xml' , OOOO , 'restore_backup' , '' , '' , '' , 'Back Up Your keyboard.xml' )
  if 90 - 90: o0Oo - iiIi1i11 / iI1IiiIIIiIi / O0 / o00O0OoO
 if os . path . exists ( oOoOooOo0o0 ) :
  oO00oOOoooO ( '' , 'Backup RssFeeds.xml' , oOoOooOo0o0 , 'restore_backup' , '' , '' , '' , 'Back Up Your RssFeeds.xml' )
  if 87 - 87: O00OOOoOoo0O / i11111IIIII + iIii1I11I1II1
  if 93 - 93: iIii1I11I1II1 + III1IiiI % o0oOo0
def iii1IiI1I1 ( ) :
 oO00oOOoooO ( 'folder' , 'Backup My Content' , 'none' , 'backup_option' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Restore My Content' , 'none' , 'restore_option' , '' , '' , '' , '' )
 if 64 - 64: o0oOo0 / O0 * O00OOOoOoo0O * o0oOo0
 if 60 - 60: o00O0OoO / i1IIi % OoooO0Oo0O0 / OoooO0Oo0O0 * OoooO0Oo0O0 . i11iIiiIii
def o0oOO00 ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://repos/",return)' )
 if 46 - 46: i11iIiiIii - o00O0OoO
def oOoOoOoO00O0OOO ( name , script , arg ) :
 oooOo0O00o00 = [ ]
 I1iIIIiIi1 = "XBMC.RunScript(" + str ( script ) + ", " + str ( arg ) + ")"
 oooOo0O00o00 . append ( ( str ( name ) , I1iIIIiIi1 , ) )
 IiI1 = xbmcgui . ListItem ( )
 IiI1 . addContextMenuItems ( oooOo0O00o00 )
 if 59 - 59: o00O0OoO / II11iIiIIIiI / iiIi1i11 / O0 / O00OOOoOoo0O + oOO00Oo
 if 13 - 13: oOO00Oo % III1IiiI / Iiii1i1 % Iiii1i1 % O0
def o0Ii1 ( localbuildcheck , localversioncheck , id , welcometext , livemsg ) :
 IIi1IiII ( )
 if livemsg != 'none' :
  try :
   exec menuitem
   oO00oOOoooO ( '' , '[COLOR=orange]---------------------------------------[/COLOR]' , 'None' , '' , '' , '' , '' , '' )
  except :
   pass
 if ( i1i1II . replace ( '%20' , ' ' ) in welcometext ) and ( 'elc' in welcometext ) and i1i1II != '' :
  oO00oOOoooO ( '' , welcometext , 'show' , 'user_info' , '' , '' , '' , '' )
  if 65 - 65: i11111IIIII . i1IIi
  if id != 'None' :
   if 95 - 95: o0Oo + o0Oo - iiIi1i11 - i1Iii1i1I
   if id != 'Local' :
    i1ii1iIIi11i111I = iiiIii ( localbuildcheck , localversioncheck , id )
    if 35 - 35: OoooooooOO - Iiii1i1 / ii1ii11IIIiiI
    if i1ii1iIIi11i111I == True :
     if 50 - 50: O00OOOoOoo0O
     if not 'Partially installed' in localbuildcheck :
      oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]' + localbuildcheck + ':[/COLOR] [COLOR=lime]NEW VERSION AVAILABLE[/COLOR]' , id , 'showinfo' , '' , '' , '' , '' )
      if 33 - 33: o00O0OoO
     if '(Partially installed)' in localbuildcheck :
      oO00oOOoooO ( 'folder' , '[COLOR=darkcyan]Current Build Installed: [/COLOR][COLOR=dodgerblue]' + localbuildcheck + '[/COLOR]' , id , 'showinfo2' , '' , '' , '' , '' )
    else :
     oO00oOOoooO ( 'folder' , '[COLOR=darkcyan]Current Build Installed: [/COLOR][COLOR=dodgerblue]' + localbuildcheck + '[/COLOR]' , id , 'showinfo' , '' , '' , '' , '' )
     if 98 - 98: O00OOOoOoo0O % oO0OooOoO
   else :
    if 95 - 95: iIii1I11I1II1 - Iiii1i1 - iiIi1i11 + Iiii1i1 % OoooO0Oo0O0 . o0Oo
    if localbuildcheck == 'Incomplete' :
     oO00oOOoooO ( '' , '[COLOR=darkcyan]Your last restore is not yet completed[/COLOR]' , 'url' , IiiIIi1 ( ) , '' , '' , '' , '' )
     if 28 - 28: oOO00Oo
    else :
     oO00oOOoooO ( '' , '[COLOR=darkcyan]Current Build Installed: [/COLOR][COLOR=dodgerblue]Local Build (' + localbuildcheck + ')[/COLOR]' , '' , '' , '' , '' , '' , '' )
  IIi = 0
  if 32 - 32: Iiii1i1 * iIii1I11I1II1 + II11iIiIIIiI * II11iIiIIIiI
  if os . path . exists ( iiI1IiI ) :
   for i1iIIIi1i in os . listdir ( iiI1IiI ) :
    if i1iIIIi1i != 'Master' :
     IIi += 1
     if 29 - 29: i11111IIIII * o00O0OoO . ii1ii11IIIiiI
   if IIi > 1 :
    oO00oOOoooO ( 'folder' , '[COLOR=darkcyan]Switch Build Profile[/COLOR]' , localbuildcheck , 'switch_profile_menu' , '' , '' , '' , '' )
    if 100 - 100: i1Iii1i1I / ii1ii11IIIiiI * iIii1I11I1II1 * O0 - i1IIi
  oO00oOOoooO ( '' , '[COLOR=orange]---------------------------------------[/COLOR]' , 'None' , '' , '' , '' , '' , '' )
  if 48 - 48: O0 * iI1IiiIIIiIi * ii1ii11IIIiiI . ii1ii11IIIiiI * o00O0OoO - iI1IiiIIIiIi
 elif o0oO0 == 'true' and not 'elc' in welcometext and i1i1II != '' :
  oO00oOOoooO ( '' , welcometext , 'None' , 'addon_settings' , '' , '' , '' , '' )
  if 14 - 14: OoooO0Oo0O0 + i11iIiiIii
 else :
  oO00oOOoooO ( '' , welcometext , 'None' , 'register' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=yellow]Settings[/COLOR]' , 'settings' , 'addon_settings' , '' , '' , '' , '' )
 if 83 - 83: OoooO0Oo0O0 / i11iIiiIii + oO0OooOoO . i1Iii1i1I * iiIi1i11 + i11111IIIII
 oO00oOOoooO ( 'folder' , 'Install Content' , welcometext , 'install_content' , '' , '' , '' , '' )
 if 42 - 42: i1IIi % oO0OooOoO . o0oOo0
 if 7 - 7: OoooO0Oo0O0 - III1IiiI * iiIi1i11 + oOO00Oo . OoooO0Oo0O0
 if 85 - 85: O0
 if 32 - 32: OoooooooOO . ii1ii11IIIiiI / II11iIiIIIiI * oOO00Oo / oOO00Oo * iI1IiiIIIiIi
 if 19 - 19: iI1IiiIIIiIi
 if 55 - 55: iiIi1i11 % iiIi1i11 / O0 % i1Iii1i1I - oOO00Oo . II11iIiIIIiI
 if 49 - 49: iIii1I11I1II1 * i1IIi . OoooooooOO
 if oOOoo00O0O == 'true' :
  oO00oOOoooO ( 'folder' , 'Tutorials' , '' , 'tutorial_root_menu' , '' , '' , '' , '' )
  if 90 - 90: oOO00Oo % OoooO0Oo0O0 - iIii1I11I1II1 % O00OOOoOoo0O
 if o0oOoO00o == 'true' :
  oO00oOOoooO ( 'folder' , 'Maintenance' , 'none' , 'tools' , '' , '' , '' , '' )
  if 8 - 8: O00OOOoOoo0O * II11iIiIIIiI / i11111IIIII % iI1IiiIIIiIi - o0Oo
  if 71 - 71: i1Iii1i1I
def Iiii1i11ii1Ii ( ) :
 if os . path . exists ( i1Oo00 ) :
  shutil . rmtree ( i1Oo00 )
  if 12 - 12: iiIi1i11 . iI1IiiIIIiIi
 if not os . path . exists ( i1Oo00 ) :
  os . makedirs ( i1Oo00 )
  if 79 - 79: Iiii1i1 / II11iIiIIIiI / i1Iii1i1I . Iiii1i1 * OoooooooOO + oOO00Oo
 ooOoooo0 = O000OOo00oo ( )
 OoO = I11IIIi ( 'http://noobsandnerds.com/TI/AddonPortal/approved.php' , 10 )
 if 71 - 71: ii1ii11IIIiiI - OoooooooOO * II11iIiIIIiI
 OOooO0OOoo . create ( 'Backing Up Add-ons' , '' , 'Please Wait...' )
 if 38 - 38: iIii1I11I1II1 / o0oOo0
 for i1iIIIi1i in os . listdir ( II11iiii1Ii ) :
  if 13 - 13: iIii1I11I1II1
  if 77 - 77: i11iIiiIii - iIii1I11I1II1 / III1IiiI / o0oOo0 / ii1ii11IIIiiI
  if not 'totalinstaller' in i1iIIIi1i and not 'plugin.program.tbs' in i1iIIIi1i and not 'packages' in i1iIIIi1i and os . path . isdir ( os . path . join ( II11iiii1Ii , i1iIIIi1i ) ) :
   if 56 - 56: OoooooooOO * O0
   if 85 - 85: OoooooooOO % O00OOOoOoo0O * iIii1I11I1II1
   if i1iIIIi1i in OoO and not i1iIIIi1i in ooOoooo0 and not 'repo.' in i1iIIIi1i and not 'repository.' in i1iIIIi1i and os . path . isdir ( os . path . join ( II11iiii1Ii , i1iIIIi1i ) ) :
    if 44 - 44: iIii1I11I1II1 . OoooO0Oo0O0 + Iiii1i1 . o0oOo0
    if 7 - 7: OoooO0Oo0O0 + iIii1I11I1II1 * o00O0OoO * o00O0OoO / oO0OooOoO - iI1IiiIIIiIi
    if not 'service.xbmc.versioncheck' in i1iIIIi1i and not 'packages' in i1iIIIi1i and os . path . isdir ( os . path . join ( II11iiii1Ii , i1iIIIi1i ) ) :
     if 65 - 65: III1IiiI + O00OOOoOoo0O + oO0OooOoO
     try :
      OOooO0OOoo . update ( 0 , "Backing Up" , '[COLOR yellow]%s[/COLOR]' % i1iIIIi1i , 'Please Wait...' )
      os . makedirs ( os . path . join ( i1Oo00 , i1iIIIi1i ) )
      if 77 - 77: oO0OooOoO
      IiiiIi1iI1iI = os . path . join ( i1Oo00 , i1iIIIi1i , 'addon.xml' )
      OO00o = os . path . join ( i1Oo00 , i1iIIIi1i , 'default.py' )
      oooo00 = open ( os . path . join ( II11iiii1Ii , i1iIIIi1i , 'addon.xml' ) , mode = 'r' )
      i11ii1iI = oooo00 . read ( )
      oooo00 . close ( )
      if 50 - 50: O0 . O0 . o0oOo0 % II11iIiIIIiI
      i111i11I1ii = re . compile ( ' name="(.+?)"' ) . findall ( i11ii1iI )
      OOooo = re . compile ( 'provider-name="(.+?)"' ) . findall ( i11ii1iI )
      ooo000oOO = re . compile ( '<addon[\s\S]*?">' ) . findall ( i11ii1iI )
      iI1iI1IiIIiI = re . compile ( '<description[\s\S]*?<\/description>' ) . findall ( i11ii1iI )
      OOo0o0O0O = i111i11I1ii [ 0 ] if ( len ( i111i11I1ii ) > 0 ) else 'None'
      I1i11 = OOooo [ 0 ] if ( len ( OOooo ) > 0 ) else 'Anonymous'
      oOo0Oo0O0O = ooo000oOO [ 0 ] if ( len ( ooo000oOO ) > 0 ) else 'None'
      II1iI1I11I = iI1iI1IiIIiI [ 0 ] if ( len ( iI1iI1IiIIiI ) > 0 ) else 'None'
      if 48 - 48: II11iIiIIIiI - o0oOo0 + II11iIiIIIiI - o0Oo * i11iIiiIii . i1Iii1i1I
      I1iIIIiI = '<addon id="' + i1iIIIi1i + '" name="' + OOo0o0O0O + '" version="0" provider-name="' + I1i11 + '">'
      OOo00 = '<description>If you\'re seeing this message it means the add-on is still updating, please wait for the update process to complete.</description>'
      if 60 - 60: o0Oo . i11iIiiIii + O00OOOoOoo0O / OoooO0Oo0O0 * oO0OooOoO * iiIi1i11
      if oOo0Oo0O0O != 'None' :
       IIiIi11i1i = i11ii1iI . replace ( II1iI1I11I , OOo00 ) . replace ( oOo0Oo0O0O , I1iIIIiI )
       if 59 - 59: II11iIiIIIiI + i1Iii1i1I - iiIi1i11 . oOO00Oo + o0Oo % III1IiiI
      else :
       IIiIi11i1i = i11ii1iI . replace ( II1iI1I11I , OOo00 )
       if 37 - 37: i1Iii1i1I + i1Iii1i1I % oOO00Oo
      i1I = open ( IiiiIi1iI1iI , mode = 'w+' )
      i1I . write ( str ( IIiIi11i1i ) )
      i1I . close ( )
      ooo0 = open ( OO00o , mode = 'w+' )
      ooo0 . write ( 'import xbmcplugin,xbmcgui,xbmc,xbmcaddon,os,sys\nAddonID="' + i1iIIIi1i + '"\nAddonName="' + OOo0o0O0O + '"\ndialog=xbmcgui.Dialog()\ndialog.ok(AddonName+" Add-on Requires Update","This add-on may still be in the process of the updating so we recommend waiting a few minutes to see if it updates naturally. If it hasn\'t updated after 5mins please try reinstalling via the Community Portal add-on")\nxbmcplugin.endOfDirectory(int(sys.argv[1]))' )
      ooo0 . close ( )
      if 29 - 29: o0oOo0
     except :
      print "### Failed to backup: " + i1iIIIi1i
      if 41 - 41: O0 % i1Iii1i1I
      if 10 - 10: i1Iii1i1I . i1IIi + iI1IiiIIIiIi
   else :
    try :
     shutil . copytree ( os . path . join ( II11iiii1Ii , i1iIIIi1i ) , os . path . join ( i1Oo00 , i1iIIIi1i ) )
    except :
     print "### Failed to copy: " + i1iIIIi1i
     if 66 - 66: ii1ii11IIIiiI % oOO00Oo
 OOooO0OOoo . close ( )
 if 21 - 21: O00OOOoOoo0O - OoooooooOO % i11iIiiIii
 Oo00O0OO = "Creating Backup"
 oOOOoo0o = "Archiving..."
 iiiI1IiIIii = ""
 IIIIiii = "Please Wait"
 if 26 - 26: OoooooooOO - o0oOo0 * i11iIiiIii + O0 * III1IiiI
 oOoOo ( i1Oo00 , i1i , Oo00O0OO , oOOOoo0o , iiiI1IiIIii , IIIIiii , '' , '' )
 if 87 - 87: II11iIiIIIiI + O0 - o00O0OoO * iIii1I11I1II1 . Iiii1i1 % oOO00Oo
 try :
  shutil . rmtree ( i1Oo00 )
  if 83 - 83: oO0OooOoO * i1IIi * i1Iii1i1I . OoooO0Oo0O0 / o00O0OoO + i1IIi
 except :
  print "### COMMUNITY BUILDS: Failed to remove temp addons folder - manual delete required ###"
  if 43 - 43: OoooooooOO
  if 97 - 97: OoooO0Oo0O0 / II11iIiIIIiI + Iiii1i1
def i111I11i1I ( url ) :
 OOooO0OOoo . create ( 'Cleaning Temp Paths' , '' , 'Please wait...' )
 if os . path . exists ( i1Oo00 ) :
  shutil . rmtree ( i1Oo00 )
  if 85 - 85: iiIi1i11 * i1IIi % o0Oo - o0oOo0
 if not os . path . exists ( i1Oo00 ) :
  os . makedirs ( i1Oo00 )
  if 37 - 37: i11111IIIII . II11iIiIIIiI * II11iIiIIIiI * oO0OooOoO * O0
 extract . all ( i1i , i1Oo00 , OOooO0OOoo )
 if 83 - 83: i11111IIIII / Iiii1i1
 for i1iIIIi1i in os . listdir ( i1Oo00 ) :
  if 64 - 64: ii1ii11IIIiiI % i11111IIIII . Iiii1i1 % ii1ii11IIIiiI + o00O0OoO * i11111IIIII
  if not 'totalinstaller' in i1iIIIi1i and not 'plugin.program.tbs' in i1iIIIi1i :
   if not os . path . exists ( os . path . join ( II11iiii1Ii , i1iIIIi1i ) ) :
    os . rename ( os . path . join ( i1Oo00 , i1iIIIi1i ) , os . path . join ( II11iiii1Ii , i1iIIIi1i ) )
    OOooO0OOoo . update ( 0 , "Installing: [COLOR=yellow]" + i1iIIIi1i + '[/COLOR]' , '' , 'Please wait...' )
    print "### Successfully installed: " + i1iIIIi1i
    if 83 - 83: oOO00Oo % III1IiiI + o00O0OoO % i11iIiiIii + O0
   else :
    print "### " + i1iIIIi1i + " Already exists on system"
    if 65 - 65: iIii1I11I1II1 % III1IiiI + O0 / OoooooooOO
    if 52 - 52: iI1IiiIIIiIi % iiIi1i11 * o0Oo % o00O0OoO + iiIi1i11 / i1Iii1i1I
def oo000o ( welcometext ) :
 OO00o0oOO ( 'disclaimer.xml' )
 oO00oOOoooO ( 'folder' , 'I have read and understand the disclaimer.' , welcometext , 'CB_Menu' , '' , '' , '' , '' )
 if 27 - 27: II11iIiIIIiI
 if 95 - 95: o00O0OoO
def I1i1i11 ( welcometext ) :
 if xbmc . getCondVisibility ( 'system.platform.android' ) :
  o0Ooo0O0 = IiII1iiI ( )
  i1IoOOoooO0O0 = os . path . join ( o0Ooo0O0 , 'Download' )
  try :
   if not os . path . exists ( i1IoOOoooO0O0 ) :
    os . makedirs ( i1IoOOoooO0O0 )
  except :
   print "### Failed to make download folder"
   if 46 - 46: iIii1I11I1II1
  if not os . path . exists ( '/data/data/com.rechild.advancedtaskkiller' ) :
   iI1iii = iI111I11I1I1 . yesno ( 'Advanced Task Killer Required' , 'To be able to us features such as the backup/restore and community builds you need the Advanced Task Killer app installed. Would you like to download it now?' )
   if iI1iii == 1 :
    OOooO0OOoo . create ( 'Downloading APK file' , '' , '' , '' )
    try :
     downloader . download ( 'https://archive.org/download/com.rechild.advancedtaskkiller/com.rechild.advancedtaskkiller.apk' , os . path . join ( i1IoOOoooO0O0 , 'AdvancedTaskKiller.apk' ) )
     iI111I11I1I1 . ok ( 'Download Complete' , "The apk file has now been downloaded, you'll find this in your downloads folder. Just install this exactly the same as you would any other apk file - click on it and then click through the setup screen. The file is called AdvancedTaskKiller.apk" )
    except :
     try :
      downloader . download ( 'https://archive.org/download/com.rechild.advancedtaskkiller/com.rechild.advancedtaskkiller.apk' , os . path . join ( 'storage' , 'emulated' , 'legacy' , 'Download' , 'AdvancedTaskKiller.apk' ) )
      iI111I11I1I1 . ok ( 'Download Complete' , "The AdvancedTaskKiller.apk file has now been downloaded, you'll find this in your downloads folder. You'll need a File Manager app to install this file, we recommend installing ES File Explorer - just do a search for this on your box/stick." )
     except :
      iI111I11I1I1 . ok ( 'Download Failed' , 'It wasn\'t possible to download the Advanced Task Killer, without it you will almost certainly run into problems so make sure you get it installed otherwise you\'ll need to manually force close and switching profiles may fail.' )
      if 33 - 33: o00O0OoO % o00O0OoO % O0 / o0Oo . i1IIi
      if 91 - 91: o0oOo0 * o00O0OoO - oO0OooOoO . o0Oo - II11iIiIIIiI + o0oOo0
 iII = xbmc . getInfoLabel ( "System.BuildVersion" )
 OO00oIii = float ( iII [ : 2 ] )
 iII1iii = int ( OO00oIii )
 print "#### Welcome: " + welcometext
 if 13 - 13: o00O0OoO * oO0OooOoO * III1IiiI * oO0OooOoO % i11111IIIII / o0Oo
 if not 'elc' in welcometext :
  oO00oOOoooO ( '' , '[COLOR=orange]To access community builds you must be logged in[/COLOR]' , 'settings' , 'addon_settings' , '' , '' , '' , 'Register at [COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR]' )
  if 100 - 100: i11111IIIII . iI1IiiIIIiIi - iIii1I11I1II1 . i11iIiiIii / oO0OooOoO
 if o0oOOo0O0Ooo == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Show My Private List[/COLOR]' , '&visibility=private' , 'grab_builds' , '' , '' , '' , '' )
  if 71 - 71: Iiii1i1 * II11iIiIIIiI . o00O0OoO
 if ( ( i1i1II . replace ( '%20' , ' ' ) in welcometext ) and ( 'elc' in welcometext ) ) :
  if 49 - 49: i11111IIIII * O0 . i11111IIIII
  if ( iII1iii < 14 ) or ( I1i1iiI1 == 'true' ) :
   oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Show All Gotham Compatible Builds[/COLOR]' , '&xbmc=gotham&visibility=public' , 'grab_builds' , '' , '' , '' , '' )
   if 19 - 19: oO0OooOoO - i11111IIIII
  if ( iII1iii == 14 ) or ( I1i1iiI1 == 'true' ) :
   oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Show All Helix Compatible Builds[/COLOR]' , '&xbmc=helix&visibility=public' , 'grab_builds' , '' , '' , '' , '' )
   if 59 - 59: oOO00Oo * ii1ii11IIIiiI - iI1IiiIIIiIi . iiIi1i11
  if ( iII1iii == 15 ) or ( I1i1iiI1 == 'true' ) :
   oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Show All Isengard Compatible Builds[/COLOR]' , '&xbmc=isengard&visibility=public' , 'grab_builds' , '' , '' , '' , '' )
  if ( iII1iii == 16 ) or ( I1i1iiI1 == 'true' ) :
   oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Show All Jarvis Compatible Builds[/COLOR]' , '&xbmc=jarvis&visibility=public' , 'grab_builds' , '' , '' , '' , '' )
   if 89 - 89: iiIi1i11
  if I11 == 'false' :
   oO00oOOoooO ( '' , '[COLOR=gold]How to fix builds broken on other wizards![/COLOR]' , '' , 'instructions_5' , '' , '' , '' , '' )
  if Oo0o0000o0o0 != '' and I11 == 'true' :
   oO00oOOoooO ( 'folder' , '[COLOR=darkcyan]Show ' + oOo0oooo00o + ' Builds[/COLOR]' , '&id=1' , 'grab_builds' , '' , '' , '' , '' )
  if oO0o0o0ooO0oO != '' and I11 == 'true' :
   oO00oOOoooO ( 'folder' , '[COLOR=darkcyan]Show ' + oo0o0O00 + ' Builds[/COLOR]' , '&id=2' , 'grab_builds' , '' , '' , '' , '' )
  if oO != '' and I11 == 'true' :
   oO00oOOoooO ( 'folder' , '[COLOR=darkcyan]Show ' + i1iiIIiiI111 + ' Builds[/COLOR]' , '&id=3' , 'grab_builds' , '' , '' , '' , '' )
  if oooOOOOO != '' and I11 == 'true' :
   oO00oOOoooO ( 'folder' , '[COLOR=darkcyan]Show ' + i1iiIII111ii + ' Builds[/COLOR]' , '&id=4' , 'grab_builds' , '' , '' , '' , '' )
  if i1iIIi1 != '' and I11 == 'true' :
   oO00oOOoooO ( 'folder' , '[COLOR=darkcyan]Show ' + ii11iIi1I + ' Builds[/COLOR]' , '&id=5' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Create My Own Community Build' , 'url' , 'backup_option' , '' , '' , '' , 'Back Up Your Full System' )
 if 69 - 69: o0oOo0 - OoooooooOO * O0
 if 84 - 84: o0oOo0 + i11iIiiIii - iiIi1i11 * o0oOo0
def I1IiiIiii1 ( skin ) :
 i11i = '<onleft>%s</onleft>'
 oo0OoOO0o0o = '<onright>%s</onright>'
 OO0OOO00 = '<onup>%s</onup>'
 ooOOo0o = '<ondown>%s</ondown>'
 IiI1Iii1 = '<control type="button" id="%s">'
 if 85 - 85: i11iIiiIii / i11iIiiIii . ii1ii11IIIiiI . O0
 if 67 - 67: oO0OooOoO / oOO00Oo . iiIi1i11 . OoooooooOO
 i1I1Ii11i = [
 ( '65' , '140' ) ,
 ( '66' , '164' ) ,
 ( '67' , '162' ) ,
 ( '68' , '142' ) ,
 ( '69' , '122' ) ,
 ( '70' , '143' ) ,
 ( '71' , '144' ) ,
 ( '72' , '145' ) ,
 ( '73' , '127' ) ,
 ( '74' , '146' ) ,
 ( '75' , '147' ) ,
 ( '76' , '148' ) ,
 ( '77' , '166' ) ,
 ( '78' , '165' ) ,
 ( '79' , '128' ) ,
 ( '80' , '129' ) ,
 ( '81' , '120' ) ,
 ( '82' , '123' ) ,
 ( '83' , '141' ) ,
 ( '84' , '124' ) ,
 ( '85' , '126' ) ,
 ( '86' , '163' ) ,
 ( '87' , '121' ) ,
 ( '88' , '161' ) ,
 ( '89' , '125' ) ,
 ( '90' , '160' ) ]
 if 19 - 19: i11111IIIII - oOO00Oo . iIii1I11I1II1 . O00OOOoOoo0O / iiIi1i11
 for OOO0O00Oo , ii1oOOO0ooOO in i1I1Ii11i :
  i11IiI1iiI11 = open ( skin ) . read ( )
  OOoOOOO00 = i11IiI1iiI11 . replace ( IiI1Iii1 % OOO0O00Oo , IiI1Iii1 % ii1oOOO0ooOO ) . replace ( i11i % OOO0O00Oo , i11i % ii1oOOO0ooOO ) . replace ( oo0OoOO0o0o % OOO0O00Oo , oo0OoOO0o0o % ii1oOOO0ooOO ) . replace ( OO0OOO00 % OOO0O00Oo , OO0OOO00 % ii1oOOO0ooOO ) . replace ( ooOOo0o % OOO0O00Oo , ooOOo0o % ii1oOOO0ooOO )
  Oo0O0O000 = open ( skin , mode = 'w' )
  Oo0O0O000 . write ( OOoOOOO00 )
  Oo0O0O000 . close ( )
  if 49 - 49: ii1ii11IIIiiI - O0 / ii1ii11IIIiiI * O00OOOoOoo0O + Iiii1i1
def Iiii1I ( u , skin ) :
 i11i = '<onleft>%s</onleft>'
 oo0OoOO0o0o = '<onright>%s</onright>'
 OO0OOO00 = '<onup>%s</onup>'
 ooOOo0o = '<ondown>%s</ondown>'
 IiI1Iii1 = '<control type="button" id="%s">'
 if 61 - 61: iIii1I11I1II1 - o00O0OoO / i1Iii1i1I * o00O0OoO % iI1IiiIIIiIi % i1Iii1i1I
 if u < 49 :
  o0ooOoO0oo = u + 61
  if 5 - 5: i11111IIIII
 else :
  o0ooOoO0oo = u + 51
  if 36 - 36: i1Iii1i1I
 i11IiI1iiI11 = open ( skin ) . read ( )
 OOoOOOO00 = i11IiI1iiI11 . replace ( i11i % u , i11i % o0ooOoO0oo ) . replace ( oo0OoOO0o0o % u , oo0OoOO0o0o % o0ooOoO0oo ) . replace ( OO0OOO00 % u , OO0OOO00 % o0ooOoO0oo ) . replace ( ooOOo0o % u , ooOOo0o % o0ooOoO0oo ) . replace ( IiI1Iii1 % u , IiI1Iii1 % o0ooOoO0oo )
 Oo0O0O000 = open ( skin , mode = 'w' )
 Oo0O0O000 . write ( OOoOOOO00 )
 Oo0O0O000 . close ( )
 if 90 - 90: O0
def Iiii1 ( description ) :
 iI111II1ii = os . path . join ( iiI1IiI , 'extracted' )
 O0ooO00ooOO0o = os . path . join ( iiI1IiI , 'temp' )
 o0OI1II = os . path . join ( iI111II1ii , 'userdata' , '.cbcfg' )
 iIIi1Ii1III = os . path . join ( iiI1IiI , description , 'addonlist' )
 Oooo00 = open ( iIIi1Ii1III , 'w+' )
 iii1II1iI1IIi = [ ]
 if 41 - 41: o0Oo - Iiii1i1 % oO0OooOoO . Iiii1i1 - o00O0OoO
 if not os . path . exists ( os . path . join ( iiI1IiI , description ) ) :
  os . makedirs ( os . path . join ( iiI1IiI , description ) )
  if iiIIIII1i1iI == 'true' :
   print "### (line 1147) Created: " + os . path . join ( iiI1IiI , description )
 if not os . path . exists ( II ) :
  os . makedirs ( II )
  if iiIIIII1i1iI == 'true' :
   print "### (line 1450) Created: " + II
 if os . path . exists ( O0ooO00ooOO0o ) :
  shutil . rmtree ( O0ooO00ooOO0o )
  if iiIIIII1i1iI == 'true' :
   print "### (line 1453) Removed: " + O0ooO00ooOO0o
   if 45 - 45: iI1IiiIIIiIi - iiIi1i11
 if os . path . exists ( o0OI1II ) :
  if not os . path . exists ( O0ooO00ooOO0o ) :
   os . makedirs ( O0ooO00ooOO0o )
   if iiIIIII1i1iI == 'true' :
    print "### (line 1458) Created: " + O0ooO00ooOO0o
  extract . all ( o0OI1II , O0ooO00ooOO0o , OOooO0OOoo )
  print "### NEW STYLE BUILD"
  if iiIIIII1i1iI == 'true' :
   print "### (line 1461) Extracted " + o0OI1II + " to: " + O0ooO00ooOO0o
 elif os . path . exists ( os . path . join ( iI111II1ii , 'addons' ) ) :
  os . rename ( os . path . join ( iI111II1ii , 'addons' ) , O0ooO00ooOO0o )
  print "### OLD BUILD - RENAMED ADDONS FOLDER"
  if iiIIIII1i1iI == 'true' :
   print "### (line 1465) renamed " + os . path . join ( iI111II1ii , 'addons' ) + " to " + O0ooO00ooOO0o
   if 70 - 70: ii1ii11IIIiiI % o0Oo / o0Oo . o00O0OoO % o0oOo0 . oO0OooOoO
 OOooO0OOoo . create ( 'Copying Addons' , '' , '' , '' )
 if 10 - 10: iI1IiiIIIiIi - i11iIiiIii . OoooO0Oo0O0 % i1IIi
 for i1iIIIi1i in os . listdir ( OO0o ) :
  iii1II1iI1IIi . append ( i1iIIIi1i )
  if 78 - 78: iIii1I11I1II1 * II11iIiIIIiI . II11iIiIIIiI - iiIi1i11 . iIii1I11I1II1
 for i1iIIIi1i in os . listdir ( II11iiii1Ii ) :
  iii1II1iI1IIi . append ( i1iIIIi1i )
  if 30 - 30: o0oOo0 + o0oOo0 % i11111IIIII - oOO00Oo - OoooO0Oo0O0
 if os . path . exists ( II ) :
  for i1iIIIi1i in os . listdir ( II ) :
   if not i1iIIIi1i in iii1II1iI1IIi :
    iii1II1iI1IIi . append ( i1iIIIi1i )
    if 36 - 36: o00O0OoO % iiIi1i11
    if 72 - 72: o0Oo / i1Iii1i1I - O0 + o00O0OoO
 if not os . path . exists ( os . path . join ( II , 'backups' ) ) :
  os . makedirs ( os . path . join ( II , 'backups' ) )
  if iiIIIII1i1iI == 'true' :
   print "### Created: " + os . path . join ( II , 'backups' )
 for i1iIIIi1i in os . listdir ( O0ooO00ooOO0o ) :
  try :
   if 83 - 83: O0
   if 89 - 89: II11iIiIIIiI + OoooO0Oo0O0 - oOO00Oo
   Oooo00 . write ( i1iIIIi1i + '|' )
   if iiIIIII1i1iI == 'true' :
    print "### Added: " + os . path . join ( II , 'backups' , i1iIIIi1i )
    print "### Added " + i1iIIIi1i + " to " + Oooo00
  except :
   pass
   if 40 - 40: ii1ii11IIIiiI + ii1ii11IIIiiI
  if not i1iIIIi1i in iii1II1iI1IIi :
   try :
    os . rename ( os . path . join ( O0ooO00ooOO0o , i1iIIIi1i ) , os . path . join ( II , i1iIIIi1i ) )
    OOooO0OOoo . update ( 0 , "Configuring" , '[COLOR yellow]%s[/COLOR]' % i1iIIIi1i , 'Please Wait...' )
    if iiIIIII1i1iI == 'true' :
     print "### Renamed from " + os . path . join ( O0ooO00ooOO0o , i1iIIIi1i ) + " to " + os . path . join ( II , i1iIIIi1i )
   except :
    pass
    if 94 - 94: i1Iii1i1I * iIii1I11I1II1 . o00O0OoO
 Oooo00 . close ( )
 shutil . rmtree ( O0ooO00ooOO0o )
 shutil . rmtree ( iI111II1ii )
 if 13 - 13: iIii1I11I1II1 * O00OOOoOoo0O / Iiii1i1 % o0oOo0 + III1IiiI
 if 41 - 41: OoooO0Oo0O0
def i1iI1i ( ) :
 iiI = xbmc . translatePath ( os . path . join ( zip , 'testCBFolder' ) )
 if 59 - 59: i11111IIIII
 if not os . path . exists ( zip ) :
  iI111I11I1I1 . ok ( 'Download/Storage Path Check' , 'The download location you have stored does not exist .\nPlease update the addon settings and try again.' )
  i1IiI1I11 . openSettings ( sys . argv [ 0 ] )
  if 89 - 89: O00OOOoOoo0O % iIii1I11I1II1
  if 35 - 35: OoooO0Oo0O0 + Iiii1i1 - O00OOOoOoo0O % III1IiiI % oOO00Oo % O00OOOoOoo0O
def ii1IIiII111I ( ) :
 oOo0 = 'http://noobsandnerds.com/TI/menu_check'
 OOOoOO = I11IIIi ( oOo0 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 O00OoOoO = re . compile ( 'd="(.+?)"' ) . findall ( OOOoOO )
 ooO0o0oo = O00OoOoO [ 0 ] if ( len ( O00OoOoO ) > 0 ) else ''
 if ooO0o0oo != '' :
  return ooO0o0oo
 else :
  return "none"
  if 79 - 79: i11111IIIII % ii1ii11IIIiiI
  if 81 - 81: i11iIiiIii + i11iIiiIii * ii1ii11IIIiiI + i11111IIIII
def iiiIii ( localbuildcheck , localversioncheck , id ) :
 oOo0 = 'http://noobsandnerds.com/TI/Community_Builds/buildupdate.php?id=%s' % ( id )
 OOOoOO = I11IIIi ( oOo0 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 32 - 32: O0 . OoooooooOO
 if id != 'None' :
  iiIIiiIi = re . compile ( 'version="(.+?)"' ) . findall ( OOOoOO )
  i1ii1I = iiIIiiIi [ 0 ] if ( len ( iiIIiiIi ) > 0 ) else ''
  if 50 - 50: iIii1I11I1II1 + O00OOOoOoo0O . O00OOOoOoo0O + i1IIi + i11111IIIII
  if localversioncheck < i1ii1I :
   return True
   if 27 - 27: i1IIi % iI1IiiIIIiIi - ii1ii11IIIiiI / III1IiiI . o0oOo0 / II11iIiIIIiI
 else :
  return False
  if 99 - 99: ii1ii11IIIiiI - O00OOOoOoo0O * O00OOOoOoo0O . oO0OooOoO % o0oOo0
  if 1 - 1: OoooO0Oo0O0 + II11iIiIIIiI * III1IiiI + oOO00Oo - o00O0OoO . OoooO0Oo0O0
def IiiIIi1 ( ) :
 IiIiiI11i1Ii = open ( I1IIiiIiii , mode = 'r' )
 i11ii1iI = IiIiiI11i1Ii . read ( )
 IiIiiI11i1Ii . close ( )
 if 31 - 31: iIii1I11I1II1 . oO0OooOoO - ii1ii11IIIiiI
 O0Oo0 = re . compile ( 'name="(.+?)"' ) . findall ( i11ii1iI )
 iIIIi1IiI11I1 = O0Oo0 [ 0 ] if ( len ( O0Oo0 ) > 0 ) else ''
 if 71 - 71: iI1IiiIIIiIi - O0 - i1Iii1i1I . iiIi1i11 % II11iIiIIIiI
 if iIIIi1IiI11I1 == "Incomplete" :
  iI1iii = xbmcgui . Dialog ( ) . yesno ( "Finish Restore Process" , 'If you\'re certain the correct skin has now been set click OK' , 'to finish the install process, once complete XBMC/Kodi will' , ' then close. Do you want to finish the install process?' , yeslabel = 'Yes' , nolabel = 'No' )
  if 82 - 82: OoooooooOO + iiIi1i11 % O00OOOoOoo0O . ii1ii11IIIiiI * i1IIi
  if iI1iii == 1 :
   iIiIi1iIIi11i ( )
   if 20 - 20: i11111IIIII + O00OOOoOoo0O - iiIi1i11 - iiIi1i11 - OoooO0Oo0O0
  elif iI1iii == 0 :
   return
   if 7 - 7: O0
def II1i ( ) :
 iiI = xbmc . translatePath ( os . path . join ( zip , 'testCBFolder' ) )
 if 68 - 68: oOO00Oo % OoooO0Oo0O0 / Iiii1i1 + Iiii1i1 - Iiii1i1 . ii1ii11IIIiiI
 try :
  os . makedirs ( iiI )
  os . removedirs ( iiI )
  iI111I11I1I1 . ok ( '[COLOR=lime]SUCCESS[/COLOR]' , 'Great news, the path you chose is writeable.' , 'Some of these builds are rather big, we recommend a minimum of 1GB storage space.' )
  if 100 - 100: O00OOOoOoo0O % II11iIiIIIiI
 except :
  iI111I11I1I1 . ok ( '[COLOR=red]CANNOT WRITE TO PATH[/COLOR]' , 'Kodi cannot write to the path you\'ve chosen. Please click OK in the settings menu to save the path then try again. Some devices give false results, we recommend using a USB stick as the backup path.' )
  if 76 - 76: oO0OooOoO / ii1ii11IIIiiI + OoooooooOO . OoooO0Oo0O0 . o00O0OoO . o0oOo0
  if 43 - 43: i1IIi
def i1i1IiIi1 ( s , n ) :
 for iiI1IIIii in range ( 0 , len ( s ) , n ) :
  yield s [ iiI1IIIii : iiI1IIIii + n ]
  if 24 - 24: o0Oo . Iiii1i1 % iI1IiiIIIiIi
  if 62 - 62: OoooO0Oo0O0 - O0 . o0Oo . O0 * iIii1I11I1II1
def oOo0O ( data ) :
 data = data . replace ( '</p><p>' , '[CR][CR]' ) . replace ( '&ndash;' , '-' ) . replace ( '&mdash;' , '-' ) . replace ( "\n" , " " ) . replace ( "\r" , " " ) . replace ( "&rsquo;" , "'" ) . replace ( "&rdquo;" , '"' ) . replace ( "</a>" , " " ) . replace ( "&hellip;" , '...' ) . replace ( "&lsquo;" , "'" ) . replace ( "&ldquo;" , '"' )
 data = " " . join ( data . split ( ) )
 i1iOO = re . compile ( r'< script[^<>]*?>.*?< / script >' )
 data = i1iOO . sub ( '' , data )
 i1iOO = re . compile ( r'< style[^<>]*?>.*?< / style >' )
 data = i1iOO . sub ( '' , data )
 i1iOO = re . compile ( r'' )
 data = i1iOO . sub ( '' , data )
 i1iOO = re . compile ( r'<[^<]*?>' )
 data = i1iOO . sub ( '' , data )
 data = data . replace ( '&nbsp;' , ' ' )
 return data
 if 80 - 80: o0Oo - iI1IiiIIIiIi * o0Oo + iIii1I11I1II1 / O0 - iI1IiiIIIiIi
def IiI1Ii1ii ( ) :
 if 44 - 44: o0Oo % iI1IiiIIIiIi * o0Oo . II11iIiIIIiI + OoooO0Oo0O0 . iiIi1i11
 iiI = xbmc . translatePath ( 'special://home/userdata/Database' )
 IIII = glob . glob ( os . path . join ( iiI , 'Textures*.db' ) )
 I1Iii11I111I = 0
 IIIiI1iiiiiIi = ''
 if 74 - 74: o00O0OoO / OoooooooOO / II11iIiIIIiI * i11iIiiIii . oO0OooOoO . OoooooooOO
 if 59 - 59: i11iIiiIii . OoooooooOO / o00O0OoO * OoooO0Oo0O0 + OoooooooOO
 for file in IIII :
  Ii1I1i1ii1I1 = int ( re . compile ( 'extures(.+?).db' ) . findall ( file ) [ 0 ] )
  if I1Iii11I111I < Ii1I1i1ii1I1 :
   I1Iii11I111I = Ii1I1i1ii1I1
   IIIiI1iiiiiIi = file
   if 98 - 98: i11111IIIII * iIii1I11I1II1 . iI1IiiIIIiIi * II11iIiIIIiI / OoooO0Oo0O0 + o0oOo0
 iiI1ii111 = xbmc . translatePath ( IIIiI1iiiiiIi )
 OoOO = database . connect ( iiI1ii111 , timeout = 10 , detect_types = database . PARSE_DECLTYPES , check_same_thread = False )
 OoOO . row_factory = database . Row
 IIIIIiI11Ii = OoOO . cursor ( )
 if 41 - 41: i11iIiiIii - i1IIi / II11iIiIIIiI * i11111IIIII / Iiii1i1 - II11iIiIIIiI
 if 56 - 56: O0
 iIIIII1iI = datetime . datetime . today ( ) - datetime . timedelta ( days = 14 )
 iIi1II11i = 10
 if 8 - 8: i1IIi
 if 20 - 20: i1Iii1i1I / iiIi1i11
 I1111ii11IIII = [ ]
 IiIi1II111I = [ ]
 if 80 - 80: iI1IiiIIIiIi / iiIi1i11
 IIIIIiI11Ii . execute ( "SELECT idtexture FROM sizes WHERE usecount < ? AND lastusetime < ?" , ( iIi1II11i , str ( iIIIII1iI ) ) )
 if 21 - 21: II11iIiIIIiI - iIii1I11I1II1 - Iiii1i1
 for III1I1Iii11i in IIIIIiI11Ii :
  I1111ii11IIII . append ( III1I1Iii11i [ "idtexture" ] )
  if 96 - 96: III1IiiI - III1IiiI
 for id in I1111ii11IIII :
  IIIIIiI11Ii . execute ( "SELECT cachedurl FROM texture WHERE id = ?" , ( id , ) )
  for III1I1Iii11i in IIIIIiI11Ii :
   IiIi1II111I . append ( III1I1Iii11i [ "cachedurl" ] )
   if 87 - 87: II11iIiIIIiI / OoooooooOO - OoooO0Oo0O0 . i11111IIIII + iIii1I11I1II1 . OoooO0Oo0O0
 print "### Community Portal Automatic Cache Removal: %d Old Textures removed" % len ( IiIi1II111I )
 if 4 - 4: OoooooooOO + o0oOo0 . i1IIi / O0 - O0
 if 52 - 52: ii1ii11IIIiiI * OoooooooOO
 for id in I1111ii11IIII :
  IIIIIiI11Ii . execute ( "DELETE FROM sizes   WHERE idtexture = ?" , ( id , ) )
  IIIIIiI11Ii . execute ( "DELETE FROM texture WHERE id        = ?" , ( id , ) )
  if 12 - 12: O0 + i11111IIIII * i1IIi . ii1ii11IIIiiI
 IIIIIiI11Ii . execute ( "VACUUM" )
 OoOO . commit ( )
 IIIIIiI11Ii . close ( )
 if 71 - 71: Iiii1i1 - oOO00Oo - iiIi1i11
 if 28 - 28: iIii1I11I1II1
 iI11II1i1I1 = xbmc . translatePath ( 'special://home/userdata/Thumbnails' )
 for o0oo00O0o in IiIi1II111I :
  iiI = os . path . join ( iI11II1i1I1 , o0oo00O0o )
  try :
   os . remove ( iiI )
  except :
   pass
   if 57 - 57: i1IIi * oO0OooOoO * III1IiiI
   if 30 - 30: o00O0OoO % O00OOOoOoo0O / OoooO0Oo0O0 * O0 * iI1IiiIIIiIi . o0Oo
   if 46 - 46: O00OOOoOoo0O - O0
def IIi1IiII ( ) :
 if os . path . exists ( os . path . join ( iiI1IiI , 'extracted' ) ) :
  try :
   shutil . rmtree ( os . path . join ( iiI1IiI , 'extracted' ) )
  except :
   print "### Unsuccessful Community Build Install detected, unabled to remove extracted folder"
   if 70 - 70: o00O0OoO + II11iIiIIIiI * iIii1I11I1II1 . o0Oo * o00O0OoO
 if os . path . exists ( os . path . join ( iiI1IiI , 'temp' ) ) :
  try :
   shutil . rmtree ( os . path . join ( iiI1IiI , 'temp' ) )
  except :
   print "### Unsuccessful Community Build Install detected, unabled to remove temp folder"
   if 49 - 49: oOO00Oo
   if 25 - 25: i1Iii1i1I . OoooooooOO * iIii1I11I1II1 . oOO00Oo / O0 + iI1IiiIIIiIi
def ooo0o0 ( ) :
 iI1iii = xbmcgui . Dialog ( ) . yesno ( 'Clear All Known Cache?' , 'This will clear all known cache files and can help if you\'re encountering kick-outs during playback as well as other random issues. There is no harm in using this.' , nolabel = 'Cancel' , yeslabel = 'Delete' )
 if 84 - 84: o00O0OoO - II11iIiIIIiI * O0 / iI1IiiIIIiIi . iI1IiiIIIiIi
 if iI1iii == 1 :
  ooO0 ( )
  ii111iiIii ( )
  if 57 - 57: oOO00Oo / Iiii1i1
  if 13 - 13: OoooooooOO + ii1ii11IIIiiI
def ii1IIii ( url ) :
 oO00oOOoooO ( 'folder' , 'African' , str ( url ) + '&genre=african' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Arabic' , str ( url ) + '&genre=arabic' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Asian' , str ( url ) + '&genre=asian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Australian' , str ( url ) + '&genre=australian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Austrian' , str ( url ) + '&genre=austrian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Belgian' , str ( url ) + '&genre=belgian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Brazilian' , str ( url ) + '&genre=brazilian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Canadian' , str ( url ) + '&genre=canadian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Columbian' , str ( url ) + '&genre=columbian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Czech' , str ( url ) + '&genre=czech' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Danish' , str ( url ) + '&genre=danish' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Dominican' , str ( url ) + '&genre=dominican' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Dutch' , str ( url ) + '&genre=dutch' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Egyptian' , str ( url ) + '&genre=egyptian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Filipino' , str ( url ) + '&genre=filipino' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Finnish' , str ( url ) + '&genre=finnish' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'French' , str ( url ) + '&genre=french' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'German' , str ( url ) + '&genre=german' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Greek' , str ( url ) + '&genre=greek' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Hebrew' , str ( url ) + '&genre=hebrew' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Hungarian' , str ( url ) + '&genre=hungarian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Icelandic' , str ( url ) + '&genre=icelandic' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Indian' , str ( url ) + '&genre=indian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Irish' , str ( url ) + '&genre=irish' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Italian' , str ( url ) + '&genre=italian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Japanese' , str ( url ) + '&genre=japanese' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Korean' , str ( url ) + '&genre=korean' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Lebanese' , str ( url ) + '&genre=lebanese' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Mongolian' , str ( url ) + '&genre=mongolian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Nepali' , str ( url ) + '&genre=nepali' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'New Zealand' , str ( url ) + '&genre=newzealand' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Norwegian' , str ( url ) + '&genre=norwegian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Pakistani' , str ( url ) + '&genre=pakistani' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Polish' , str ( url ) + '&genre=polish' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Portuguese' , str ( url ) + '&genre=portuguese' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Romanian' , str ( url ) + '&genre=romanian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Russian' , str ( url ) + '&genre=russian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Singapore' , str ( url ) + '&genre=singapore' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Spanish' , str ( url ) + '&genre=spanish' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Swedish' , str ( url ) + '&genre=swedish' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Swiss' , str ( url ) + '&genre=swiss' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Syrian' , str ( url ) + '&genre=syrian' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Tamil' , str ( url ) + '&genre=tamil' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Thai' , str ( url ) + '&genre=thai' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Turkish' , str ( url ) + '&genre=turkish' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'UK' , str ( url ) + '&genre=uk' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'USA' , str ( url ) + '&genre=usa' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Vietnamese' , str ( url ) + '&genre=vietnamese' , 'grab_builds' , '' , '' , '' , '' )
 if 31 - 31: iIii1I11I1II1 * o0oOo0 - OoooooooOO * o0oOo0
 if 60 - 60: iiIi1i11 % iiIi1i11 * III1IiiI / o0Oo * O00OOOoOoo0O * o0Oo
def OOoO0o ( ) :
 O00Oo = iii ( 'welcometext' )
 if os . path . exists ( i1Oo00 ) :
  shutil . rmtree ( i1Oo00 )
 O0ooO0O0Ooo0o = 1
 i1iI1i ( )
 iI1iii = iI111I11I1I1 . yesno ( 'Are you sure?!!!' , 'This is method is very dated and is only left here for LOCAL installs. For online backups you really should be using the NaN backup option which creates a much smaller file and allows for a much more reliable install process.' )
 if iI1iii == 0 :
  return
 IIi11IIiIi1i = xbmc . translatePath ( os . path . join ( OOO00 , 'Community_Builds' , 'My_Builds' , '' ) )
 IiiOoo0o0ooooOOo = xbmc . translatePath ( os . path . join ( OOO00 , 'Community_Builds' , 'My_Builds' , 'my_full_backup.zip' ) )
 oOoOO0000oO00 = xbmc . translatePath ( os . path . join ( OOO00 , 'Community_Builds' , 'My_Builds' , 'my_full_backup_GUI_Settings.zip' ) )
 if 93 - 93: o00O0OoO . O00OOOoOoo0O / II11iIiIIIiI + III1IiiI
 if not os . path . exists ( IIi11IIiIi1i ) :
  os . makedirs ( IIi11IIiIi1i )
  if 8 - 8: O00OOOoOoo0O
 iIo00OOOOOo0OOo = i1II11I11ii1 ( heading = "Enter a name for this backup" )
 if ( not iIo00OOOOOo0OOo ) :
  return False , 0
  if 64 - 64: III1IiiI % O00OOOoOoo0O / oO0OooOoO % o0oOo0 - i1Iii1i1I
 I1II1IiI1 = urllib . quote_plus ( iIo00OOOOOo0OOo )
 iIIiI11iI1Ii1 = xbmc . translatePath ( os . path . join ( IIi11IIiIi1i , I1II1IiI1 + '.zip' ) )
 o00oo = [ o0OO00 ]
 O0oO0oo0O = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'Thumbs.db' , '.gitignore' ]
 oooOOO0ooOoOOO = [ o0OO00 , 'cache' , 'system' , 'Thumbnails' , "peripheral_data" , 'library' , 'keymaps' ]
 o0IiIiI111IIII1 = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , "Textures13.db" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'advancedsettings.xml' , 'Thumbs.db' , '.gitignore' ]
 Oo00O0OO = "Creating full backup of existing build"
 OOOoOooO000oO = "Creating Community Build"
 oOOOoo0o = "Archiving..."
 iiiI1IiIIii = ""
 IIIIiii = "Please Wait"
 if 87 - 87: i1Iii1i1I % II11iIiIIIiI
 if iI1Ii11111iIi == 'true' :
  oOoOo ( iIii1 , IiiOoo0o0ooooOOo , Oo00O0OO , oOOOoo0o , iiiI1IiIIii , IIIIiii , o00oo , O0oO0oo0O )
  if 62 - 62: ii1ii11IIIiiI + o0oOo0 / i1Iii1i1I * i11iIiiIii
 iI1iii = xbmcgui . Dialog ( ) . yesno ( "Do you want to include your addon_data folder?" , 'This contains ALL addon settings including passwords but may also contain important information such as skin shortcuts. We recommend MANUALLY removing the addon_data folders that aren\'t required.' , yeslabel = 'Yes' , nolabel = 'No' )
 if 37 - 37: i1Iii1i1I
 if iI1iii == 0 :
  oooOOO0ooOoOOO = [ o0OO00 , 'cache' , 'system' , 'peripheral_data' , 'library' , 'keymaps' , 'addon_data' , 'Thumbnails' ]
  if 33 - 33: ii1ii11IIIiiI - O0 - ii1ii11IIIiiI
 elif iI1iii == 1 :
  pass
  if 94 - 94: i11111IIIII * o00O0OoO * OoooooooOO / oOO00Oo . i11111IIIII - oOO00Oo
 if i1i1II . replace ( '%20' , ' ' ) in O00Oo and i1i1II != '' :
  if ( os . path . exists ( os . path . join ( II11iiii1Ii , binascii . unhexlify ( '7363726970742e6d6f64756c652e637967706669' ) ) ) and i1i1II . replace ( '%20' , ' ' ) in I1I1iiii1IiI1i ( ) ) or not os . path . exists ( os . path . join ( II11iiii1Ii , binascii . unhexlify ( '7363726970742e6d6f64756c652e637967706669' ) ) ) :
   iI1iii = xbmcgui . Dialog ( ) . yesno ( "Stop leechers profiting from your work?" , 'If you\'d prefer sellers not to profit from your build click yes to add a startup message on your build. Do you want add the message?' , yeslabel = 'No' , nolabel = 'Yes' )
   if iI1iii == 0 :
    I11I ( i1i1II )
   if iI1iii == 1 :
    try :
     OooO0ooO0o0 ( )
    except :
     pass
     if 88 - 88: III1IiiI % II11iIiIIIiI - o00O0OoO % III1IiiI + i11111IIIII - i1Iii1i1I
 ii1OO0 ( iIii1 )
 Oo ( )
 oOoOo ( iIii1 , iIIiI11iI1Ii1 , OOOoOooO000oO , oOOOoo0o , iiiI1IiIIii , IIIIiii , oooOOO0ooOoOOO , o0IiIiI111IIII1 )
 time . sleep ( 1 )
 if 54 - 54: o0Oo * iiIi1i11 + oOO00Oo % i1IIi - oOO00Oo + O00OOOoOoo0O
 IIIIiI11Ii1i = xbmc . translatePath ( os . path . join ( IIi11IIiIi1i , I1II1IiI1 + '_guisettings.zip' ) )
 O0O0O0o = zipfile . ZipFile ( IIIIiI11Ii1i , mode = 'w' )
 if 83 - 83: i1Iii1i1I % o00O0OoO
 try :
  O0O0O0o . write ( I11i1 , 'guisettings.xml' , zipfile . ZIP_DEFLATED )
 except :
  O0ooO0O0Ooo0o = 0
  if 6 - 6: O00OOOoOoo0O / o0oOo0 + i1Iii1i1I - oOO00Oo * iiIi1i11 + o0oOo0
 try :
  O0O0O0o . write ( xbmc . translatePath ( os . path . join ( iIii1 , 'userdata' , 'profiles.xml' ) ) , 'profiles.xml' , zipfile . ZIP_DEFLATED )
 except :
  pass
  if 76 - 76: oO0OooOoO - OoooooooOO % i11111IIIII
 O0O0O0o . close ( )
 if 40 - 40: iI1IiiIIIiIi
 if iI1Ii11111iIi == 'true' :
  O0Ooo0ooo00o = zipfile . ZipFile ( oOoOO0000oO00 , mode = 'w' )
  try :
   O0Ooo0ooo00o . write ( I11i1 , 'guisettings.xml' , zipfile . ZIP_DEFLATED )
  except :
   O0ooO0O0Ooo0o = 0
   if 73 - 73: o0oOo0 % o0oOo0 . i1Iii1i1I + Iiii1i1
  try :
   O0Ooo0ooo00o . write ( xbmc . translatePath ( os . path . join ( iIii1 , 'userdata' , 'profiles.xml' ) ) , 'profiles.xml' , zipfile . ZIP_DEFLATED )
  except :
   pass
  O0Ooo0ooo00o . close ( )
  if 10 - 10: O0 / iiIi1i11 * o0oOo0 - ii1ii11IIIiiI - i1IIi . O00OOOoOoo0O
 if O0ooO0O0Ooo0o == 0 :
  iI111I11I1I1 . ok ( "FAILED!" , 'The guisettings.xml file could not be found on your system, please reboot and try again.' , '' , '' )
  if 69 - 69: II11iIiIIIiI - iI1IiiIIIiIi % iI1IiiIIIiIi - iiIi1i11 * iiIi1i11 / II11iIiIIIiI
 else :
  iI111I11I1I1 . ok ( "SUCCESS!" , 'You Are Now Backed Up. Remember this should only be used for local backup purposes and is not recommended for sharing online. Use the far superior NaN CP backup method for online use.' )
  if 13 - 13: O00OOOoOoo0O
  if iI1Ii11111iIi == 'true' :
   iI111I11I1I1 . ok ( "Build Locations" , 'Full Backup (only used to restore on this device): [COLOR=dodgerblue]' + IiiOoo0o0ooooOOo , '[/COLOR]Universal Backup: [COLOR=dodgerblue]' + iIIiI11iI1Ii1 + '[/COLOR]' )
   if 67 - 67: OoooO0Oo0O0 . oO0OooOoO - iI1IiiIIIiIi % OoooooooOO
  else :
   iI111I11I1I1 . ok ( "Build Location" , 'Universal Backup:[CR][COLOR=dodgerblue]' + iIIiI11iI1Ii1 + '[/COLOR]' )
   if 49 - 49: OoooO0Oo0O0 + O0 . iI1IiiIIIiIi * OoooooooOO
   if 82 - 82: OoooO0Oo0O0
def OOO00o0 ( ) :
 O00Oo = iii ( 'welcometext' )
 i1iI1i ( )
 if 97 - 97: OoooO0Oo0O0 / OoooO0Oo0O0 / iIii1I11I1II1 % i1IIi . OoooO0Oo0O0 . i11111IIIII
 if os . path . exists ( i1Oo00 ) :
  shutil . rmtree ( i1Oo00 )
  if 4 - 4: II11iIiIIIiI - ii1ii11IIIiiI - i11iIiiIii * Iiii1i1 / iI1IiiIIIiIi - iiIi1i11
 iI1iii = iI111I11I1I1 . yesno ( 'Create noobsandnerds Build' , 'This backup will only work if you share your build on the [COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR] portal with the rest of the community. It will not work with any other installer/wizard, do you wish to continue?' )
 if 45 - 45: oOO00Oo % II11iIiIIIiI * i1IIi - O0
 if iI1iii == 1 :
  OOooO0OOoo . create ( 'Checking File Structure' , '' , 'Please wait' , '' )
  if not os . path . exists ( oO0Oo ) :
   os . makedirs ( oO0Oo )
   if 82 - 82: oO0OooOoO / i1Iii1i1I
  O0ooO0O0Ooo0o = 1
  IIi11IIiIi1i = xbmc . translatePath ( os . path . join ( OOO00 , 'Community_Builds' , 'My_Builds' , '' ) )
  IiiOoo0o0ooooOOo = xbmc . translatePath ( os . path . join ( OOO00 , 'Community_Builds' , 'My_Builds' , 'my_full_backup.zip' ) )
  oOoOO0000oO00 = xbmc . translatePath ( os . path . join ( OOO00 , 'Community_Builds' , 'My_Builds' , 'my_full_backup_GUI_Settings.zip' ) )
  if 96 - 96: II11iIiIIIiI / III1IiiI . oO0OooOoO . II11iIiIIIiI
  if not os . path . exists ( IIi11IIiIi1i ) :
   os . makedirs ( IIi11IIiIi1i )
   if 91 - 91: oO0OooOoO . iiIi1i11 + oOO00Oo
  iIo00OOOOOo0OOo = i1II11I11ii1 ( heading = "Enter a name for this backup" )
  if 8 - 8: iiIi1i11 * II11iIiIIIiI / i1Iii1i1I - ii1ii11IIIiiI - OoooooooOO
  if ( not iIo00OOOOOo0OOo ) :
   return False , 0
   if 100 - 100: III1IiiI . iIii1I11I1II1 . iIii1I11I1II1
  I1II1IiI1 = urllib . quote_plus ( iIo00OOOOOo0OOo )
  iIIiI11iI1Ii1 = xbmc . translatePath ( os . path . join ( IIi11IIiIi1i , I1II1IiI1 + '.zip' ) )
  if 55 - 55: III1IiiI
  if 37 - 37: i11111IIIII / i11iIiiIii / II11iIiIIIiI
  o00oo = [ o0OO00 ]
  O0oO0oo0O = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'Thumbs.db' , '.gitignore' ]
  o0IiIiI111IIII1 = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , "Textures13.db" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'advancedsettings.xml' , 'Thumbs.db' , '.gitignore' ]
  Oo00O0OO = "Creating full backup of existing build"
  OOOoOooO000oO = "Creating Community Build"
  oOOOoo0o = "Archiving..."
  iiiI1IiIIii = ""
  IIIIiii = "Please Wait"
  if 97 - 97: Iiii1i1 . o00O0OoO / o0Oo
  if 83 - 83: o00O0OoO - OoooO0Oo0O0 * III1IiiI
  if iI1Ii11111iIi == 'true' :
   oOoOo ( iIii1 , IiiOoo0o0ooooOOo , Oo00O0OO , oOOOoo0o , iiiI1IiIIii , IIIIiii , o00oo , O0oO0oo0O )
   if 90 - 90: II11iIiIIIiI * o0Oo
  iI1iii = xbmcgui . Dialog ( ) . yesno ( "Do you want to include your addon_data folder?" , 'This contains ALL addon settings including passwords but may also contain important information such as skin shortcuts. We recommend MANUALLY removing the addon_data folders that aren\'t required.' , yeslabel = 'Yes' , nolabel = 'No' )
  if 75 - 75: OoooO0Oo0O0 - O00OOOoOoo0O * i11iIiiIii . OoooooooOO - II11iIiIIIiI . o00O0OoO
  if 6 - 6: o00O0OoO * III1IiiI / OoooooooOO % iI1IiiIIIiIi * oOO00Oo
  if iI1iii == 0 :
   oooOOO0ooOoOOO = [ o0OO00 , 'cache' , 'system' , 'addons' , 'Thumbnails' , 'CP_Profiles' , 'peripheral_data' , 'library' , 'keymaps' , 'addon_data' ]
   if 28 - 28: i11111IIIII * o0Oo % i11111IIIII
  elif iI1iii == 1 :
   oooOOO0ooOoOOO = [ o0OO00 , 'cache' , 'system' , 'addons' , 'Thumbnails' , 'CP_Profiles' , "peripheral_data" , 'library' , 'keymaps' ]
   if 95 - 95: O0 / o00O0OoO . Iiii1i1
  if i1i1II . replace ( '%20' , ' ' ) in O00Oo and i1i1II != '' :
   if ( os . path . exists ( os . path . join ( II11iiii1Ii , binascii . unhexlify ( '7363726970742e6d6f64756c652e637967706669' ) ) ) and i1i1II . replace ( '%20' , ' ' ) in I1I1iiii1IiI1i ( ) ) or not os . path . exists ( os . path . join ( II11iiii1Ii , binascii . unhexlify ( '7363726970742e6d6f64756c652e637967706669' ) ) ) :
    iI1iii = xbmcgui . Dialog ( ) . yesno ( "Stop leechers profiting from your work?" , 'If you\'d prefer sellers not to profit from your build click yes to add a startup message on your build. Do you want add the message?' , yeslabel = 'No' , nolabel = 'Yes' )
    if iI1iii == 0 :
     I11I ( i1i1II )
    if iI1iii == 1 :
     try :
      OooO0ooO0o0 ( )
     except :
      pass
      if 17 - 17: o00O0OoO
  Iiii1i11ii1Ii ( )
  ii1OO0 ( iIii1 )
  oOoOo ( iIii1 , iIIiI11iI1Ii1 , OOOoOooO000oO , oOOOoo0o , iiiI1IiIIii , IIIIiii , oooOOO0ooOoOOO , o0IiIiI111IIII1 )
  if 56 - 56: o0oOo0 * oOO00Oo + o00O0OoO
  if 48 - 48: i11111IIIII * ii1ii11IIIiiI % Iiii1i1 - o00O0OoO
  try :
   os . remove ( i1i )
  except :
   pass
   if 72 - 72: i1IIi % o0oOo0 % i11111IIIII % III1IiiI - III1IiiI
  try :
   os . remove ( i1Oo00 )
  except :
   pass
   if 97 - 97: oOO00Oo * O0 / oOO00Oo * ii1ii11IIIiiI * II11iIiIIIiI
  time . sleep ( 1 )
  if 38 - 38: Iiii1i1
  if 25 - 25: iIii1I11I1II1 % oO0OooOoO / o00O0OoO / OoooO0Oo0O0
  IIIIiI11Ii1i = xbmc . translatePath ( os . path . join ( IIi11IIiIi1i , I1II1IiI1 + '_guisettings.zip' ) )
  if 22 - 22: III1IiiI * i1Iii1i1I
  try :
   shutil . copyfile ( I11i1 , os . path . join ( oO0Oo , 'guisettings.xml' ) )
   if iiIIIII1i1iI == 'true' :
    print "### Successfully copied guisettings to : " + os . path . join ( oO0Oo , 'guisettings.xml' )
  except :
   if iiIIIII1i1iI == 'true' :
    print "### FAILED TO copy guisettings to : " + os . path . join ( oO0Oo , 'guisettings.xml' )
   O0ooO0O0Ooo0o = 0
   if 4 - 4: O00OOOoOoo0O - III1IiiI + o0Oo
  try :
   shutil . copyfile ( xbmc . translatePath ( os . path . join ( iIii1 , 'userdata' , 'profiles.xml' ) ) , xbmc . translatePath ( os . path . join ( oO0Oo , 'profiles.xml' ) ) )
   print "### Successfully copied profiles to : " + os . path . join ( oO0Oo , 'profiles.xml' )
  except :
   pass
   if 36 - 36: i11111IIIII
  iIioOo = os . path . join ( O0OoO000O0OO , 'script.skinshortcuts' )
  if os . path . exists ( iIioOo ) :
   try :
    shutil . copytree ( os . path . join ( O0OoO000O0OO , 'script.skinshortcuts' ) , os . path . join ( oO0Oo , 'addon_data' , 'script.skinshortcuts' ) )
    if iiIIIII1i1iI == 'true' :
     print "### Successfully copied skinshortcuts to : " + os . path . join ( oO0Oo , 'addon_data' , 'script.skinshortcuts' )
   except :
    iI111I11I1I1 . ok ( 'Failed to copy Skin Shortcuts' , 'There was an error trying to backup your script.skinshortcuts, please try again and if you continue to receive this message upload a log and send details to the noobsandnerds forum.' )
    if iiIIIII1i1iI == 'true' :
     print "### FAILED to copy skinshortcuts to: " + os . path . join ( oO0Oo , 'addon_data' , 'script.skinshortcuts' )
     if 66 - 66: oO0OooOoO + ii1ii11IIIiiI
  if os . path . exists ( os . path . join ( O0OoO000O0OO , OOOO0OOoO0O0 ) ) :
   try :
    shutil . copytree ( os . path . join ( O0OoO000O0OO , OOOO0OOoO0O0 ) , os . path . join ( oO0Oo , 'addon_data' , OOOO0OOoO0O0 ) )
    if iiIIIII1i1iI == 'true' :
     print "### Successfully copied skin data to : " + os . path . join ( oO0Oo , 'addon_data' , OOOO0OOoO0O0 )
   except :
    iI111I11I1I1 . ok ( 'Failed to copy skin data' , 'There was an error trying to backup your skin data, please try again and if you continue to receive this message upload a log and send details to the noobsandnerds forum.' )
    if iiIIIII1i1iI == 'true' :
     print "### FAILED to copy skin data to: " + os . path . join ( oO0Oo , 'addon_data' , OOOO0OOoO0O0 )
     if 19 - 19: ii1ii11IIIiiI . OoooooooOO * ii1ii11IIIiiI + i11111IIIII + OoooooooOO
  iI11Ii111 ( oO0Oo , IIIIiI11Ii1i )
  if 19 - 19: II11iIiIIIiI
  if 75 - 75: OoooooooOO . iiIi1i11 + ii1ii11IIIiiI / iI1IiiIIIiIi - o0Oo % iI1IiiIIIiIi
  if 89 - 89: i1Iii1i1I * iIii1I11I1II1 + i11iIiiIii . OoooooooOO
  if 51 - 51: iiIi1i11 / o0oOo0 + ii1ii11IIIiiI % O00OOOoOoo0O / iI1IiiIIIiIi
  if iI1Ii11111iIi == 'true' :
   iI11Ii111 ( oO0Oo , oOoOO0000oO00 )
   if 25 - 25: oOO00Oo
   if 25 - 25: o0oOo0 * i1Iii1i1I / o00O0OoO / o00O0OoO % oOO00Oo
  if os . path . exists ( oO0Oo ) :
   shutil . rmtree ( oO0Oo )
   if 19 - 19: III1IiiI - iIii1I11I1II1 / o0oOo0 . ii1ii11IIIiiI * O0 - O0
  if O0ooO0O0Ooo0o == 0 :
   iI111I11I1I1 . ok ( 'ERROR' , 'There was an error backing up your guisettings.xml, you cannot share a build without one so please try again. If this keeps happening please upload a log and contact the noobsandnerds forum with details.' )
   if 41 - 41: i1IIi - o0Oo
  else :
   iI111I11I1I1 . ok ( "SUCCESS!" , 'You Are Now Backed Up and can share this build with the community.' )
   if 48 - 48: o0Oo - oO0OooOoO / ii1ii11IIIiiI + o0Oo
   if iI1Ii11111iIi == 'true' :
    iI111I11I1I1 . ok ( "Build Locations" , 'Full Backup (only used to restore on this device): [COLOR=dodgerblue]' + IiiOoo0o0ooooOOo , '[/COLOR]Universal Backup (this will ONLY work for sharing on the [COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR] portal):[CR][COLOR=dodgerblue]' + iIIiI11iI1Ii1 + '[/COLOR]' )
    if 5 - 5: O0
   else :
    iI111I11I1I1 . ok ( "Build Location" , '[COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR] Backup (this will ONLY work for sharing on the Community Portal):[CR][COLOR=dodgerblue]' + iIIiI11iI1Ii1 + '[/COLOR]' )
    if 75 - 75: Iiii1i1 + iIii1I11I1II1
    if 19 - 19: o0Oo + i11iIiiIii . i11111IIIII - o00O0OoO / iI1IiiIIIiIi + oOO00Oo
def II1io0Oo00oOO ( url , video ) :
 IIi1IiII ( )
 oOo0 = 'http://noobsandnerds.com/TI/Community_Builds/community_builds_test.php?id=%s' % ( url )
 OOOoOO = I11IIIi ( oOo0 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 O0oo = re . compile ( 'path="(.+?)"' ) . findall ( OOOoOO )
 o0000O00oO0O = re . compile ( 'myart="(.+?)"' ) . findall ( OOOoOO )
 IiiI111I11 = re . compile ( 'artpack="(.+?)"' ) . findall ( OOOoOO )
 I1I1i = re . compile ( 'videopreview="(.+?)"' ) . findall ( OOOoOO )
 oO0Ooooo000 = re . compile ( 'videoguide1="(.+?)"' ) . findall ( OOOoOO )
 Iii1Iiii = re . compile ( 'videoguide2="(.+?)"' ) . findall ( OOOoOO )
 i1i1Ii1IiIII = re . compile ( 'videoguide3="(.+?)"' ) . findall ( OOOoOO )
 I1IIii11 = re . compile ( 'videoguide4="(.+?)"' ) . findall ( OOOoOO )
 I1I1 = re . compile ( 'videoguide5="(.+?)"' ) . findall ( OOOoOO )
 O0OOO0ooO00o = re . compile ( 'videolabel1="(.+?)"' ) . findall ( OOOoOO )
 I1iii1 = re . compile ( 'videolabel2="(.+?)"' ) . findall ( OOOoOO )
 iIiiiIIiii = re . compile ( 'videolabel3="(.+?)"' ) . findall ( OOOoOO )
 OO0 = re . compile ( 'videolabel4="(.+?)"' ) . findall ( OOOoOO )
 Oo00Oo = re . compile ( 'videolabel5="(.+?)"' ) . findall ( OOOoOO )
 OOo0o0O0O = re . compile ( 'name="(.+?)"' ) . findall ( OOOoOO )
 iIiO0O = re . compile ( 'author="(.+?)"' ) . findall ( OOOoOO )
 OooIiIIII1i11I = re . compile ( 'version="(.+?)"' ) . findall ( OOOoOO )
 iI1iI1IiIIiI = re . compile ( 'description="(.+?)"' ) . findall ( OOOoOO )
 oOOoooo = re . compile ( 'DownloadURL="(.+?)"' ) . findall ( OOOoOO )
 O0oIi1iIiIi1I11 = re . compile ( 'UpdateURL="(.+?)"' ) . findall ( OOOoOO )
 ii1I11 = re . compile ( 'UpdateDate="(.+?)"' ) . findall ( OOOoOO )
 OOO0 = re . compile ( 'UpdateDesc="(.+?)"' ) . findall ( OOOoOO )
 OOo = re . compile ( 'updated="(.+?)"' ) . findall ( OOOoOO )
 I1Ii1 = re . compile ( 'defaultskin="(.+?)"' ) . findall ( OOOoOO )
 O0oo0oOoO00 = re . compile ( 'skins="(.+?)"' ) . findall ( OOOoOO )
 i1ii1iIi = re . compile ( 'videoaddons="(.+?)"' ) . findall ( OOOoOO )
 I1I1Ii = re . compile ( 'audioaddons="(.+?)"' ) . findall ( OOOoOO )
 iI1IIII1 = re . compile ( 'programaddons="(.+?)"' ) . findall ( OOOoOO )
 Oo0o = re . compile ( 'pictureaddons="(.+?)"' ) . findall ( OOOoOO )
 OoO000oo000o0 = re . compile ( 'sources="(.+?)"' ) . findall ( OOOoOO )
 i1Ii1I1Ii11iI = re . compile ( 'adult="(.+?)"' ) . findall ( OOOoOO )
 i1ii111i = re . compile ( 'guisettings="(.+?)"' ) . findall ( OOOoOO )
 i1ii1i1Ii11 = re . compile ( 'thumb="(.+?)"' ) . findall ( OOOoOO )
 O0O0Oo0O0oo = re . compile ( 'fanart="(.+?)"' ) . findall ( OOOoOO )
 o0O0 = re . compile ( 'openelec="(.+?)"' ) . findall ( OOOoOO )
 if 82 - 82: III1IiiI / OoooooooOO % i1Iii1i1I
 ooOoOoO0 = o0000O00oO0O [ 0 ] if ( len ( o0000O00oO0O ) > 0 ) else ''
 Iii1II1ii = IiiI111I11 [ 0 ] if ( len ( IiiI111I11 ) > 0 ) else ''
 iiI = O0oo [ 0 ] if ( len ( O0oo ) > 0 ) else ''
 i1iIIIi1i = OOo0o0O0O [ 0 ] if ( len ( OOo0o0O0O ) > 0 ) else ''
 ooOo00 = iIiO0O [ 0 ] if ( len ( iIiO0O ) > 0 ) else ''
 iII1iii = OooIiIIII1i11I [ 0 ] if ( len ( OooIiIIII1i11I ) > 0 ) else ''
 OOo00 = iI1iI1IiIIiI [ 0 ] if ( len ( iI1iI1IiIIiI ) > 0 ) else 'No information available'
 oOOo0oo0O = OOo [ 0 ] if ( len ( OOo ) > 0 ) else ''
 OO0III = I1Ii1 [ 0 ] if ( len ( I1Ii1 ) > 0 ) else ''
 OoO0oOO0o0O0O0O0 = O0oo0oOoO00 [ 0 ] if ( len ( O0oo0oOoO00 ) > 0 ) else ''
 iI11IiIiiII1 = i1ii1iIi [ 0 ] if ( len ( i1ii1iIi ) > 0 ) else ''
 I11iii1i = I1I1Ii [ 0 ] if ( len ( I1I1Ii ) > 0 ) else ''
 ii1i1Iii = iI1IIII1 [ 0 ] if ( len ( iI1IIII1 ) > 0 ) else ''
 oO00oO00O0Oo = Oo0o [ 0 ] if ( len ( Oo0o ) > 0 ) else ''
 OO0o0o0oo = OoO000oo000o0 [ 0 ] if ( len ( OoO000oo000o0 ) > 0 ) else ''
 iIiII1 = i1Ii1I1Ii11iI [ 0 ] if ( len ( i1Ii1I1Ii11iI ) > 0 ) else ''
 i111iii1I1 = i1ii111i [ 0 ] if ( len ( i1ii111i ) > 0 ) else 'None'
 iiIiII1 = oOOoooo [ 0 ] if ( len ( oOOoooo ) > 0 ) else 'None'
 ii111iI = O0oIi1iIiIi1I11 [ 0 ] if ( len ( O0oIi1iIiIi1I11 ) > 0 ) else 'None'
 ii11I1 = ii1I11 [ 0 ] if ( len ( ii1I11 ) > 0 ) else 'None'
 I1IoOO0o0 = OOO0 [ 0 ] if ( len ( OOO0 ) > 0 ) else 'None'
 I1i11ii11 = I1I1i [ 0 ] if ( len ( I1I1i ) > 0 ) else 'None'
 Ii1iI111 = oO0Ooooo000 [ 0 ] if ( len ( oO0Ooooo000 ) > 0 ) else 'None'
 O0oooo00o0Oo = Iii1Iiii [ 0 ] if ( len ( Iii1Iiii ) > 0 ) else 'None'
 I1iii = i1i1Ii1IiIII [ 0 ] if ( len ( i1i1Ii1IiIII ) > 0 ) else 'None'
 oO0o0O0Ooo0o = I1IIii11 [ 0 ] if ( len ( I1IIii11 ) > 0 ) else 'None'
 i1Ii11II = I1I1 [ 0 ] if ( len ( I1I1 ) > 0 ) else 'None'
 oOo0oO = O0OOO0ooO00o [ 0 ] if ( len ( O0OOO0ooO00o ) > 0 ) else 'None'
 IIi1IIIIi = I1iii1 [ 0 ] if ( len ( I1iii1 ) > 0 ) else 'None'
 OOOoO = iIiiiIIiii [ 0 ] if ( len ( iIiiiIIiii ) > 0 ) else 'None'
 I1i = OO0 [ 0 ] if ( len ( OO0 ) > 0 ) else 'None'
 iiiI = Oo00Oo [ 0 ] if ( len ( Oo00Oo ) > 0 ) else 'None'
 iii1I1Iii = i1ii1i1Ii11 [ 0 ] if ( len ( i1ii1i1Ii11 ) > 0 ) else 'None'
 o00oo0 = O0O0Oo0O0oo [ 0 ] if ( len ( O0O0Oo0O0oo ) > 0 ) else 'None'
 Ii1Ii1 = o0O0 [ 0 ] if ( len ( o0O0 ) > 0 ) else 'None'
 if 62 - 62: Iiii1i1 * o00O0OoO
 IiIiiI11i1Ii = open ( I11iii1Ii , mode = 'w+' )
 IiIiiI11i1Ii . write ( 'id="' + str ( video ) + '"\nname="' + i1iIIIi1i + '"\nversion="' + iII1iii + '"' )
 IiIiiI11i1Ii . close ( )
 if 74 - 74: O00OOOoOoo0O . iIii1I11I1II1
 oOOoO0oO0oo0O = open ( I1IIiiIiii , mode = 'r' )
 oO00Oo = oOOoO0oO0oo0O . read ( )
 oOOoO0oO0oo0O . close ( )
 if 82 - 82: i11111IIIII
 Ii1IIi = re . compile ( 'id="(.+?)"' ) . findall ( oO00Oo )
 OOOOOOO0oo = Ii1IIi [ 0 ] if ( len ( Ii1IIi ) > 0 ) else 'None'
 iII11IiI1 = re . compile ( 'version="(.+?)"' ) . findall ( oO00Oo )
 I1I1IiI1 = iII11IiI1 [ 0 ] if ( len ( iII11IiI1 ) > 0 ) else 'None'
 OoOOOO00oOO , iiIIiIi , O000oO = url . partition ( '&' )
 print "### Community Build Details:"
 print "### Name: " + i1iIIIi1i
 print "### URL: " + iiIiII1
 oO00oOOoooO ( '' , '[COLOR=yellow]IMPORTANT:[/COLOR] Install Instructions' , '' , 'instructions_2' , '' , '' , '' , '' )
 oOo00oOoO000 ( '[COLOR=yellow]Description:[/COLOR] This contains important info from the build author' , 'None' , 'description' , '' , o00oo0 , i1iIIIi1i , ooOo00 , iII1iii , OOo00 , oOOo0oo0O , OoO0oOO0o0O0O0O0 , iI11IiIiiII1 , I11iii1i , ii1i1Iii , oO00oO00O0Oo , OO0o0o0oo , iIiII1 )
 if 23 - 23: oO0OooOoO * i1Iii1i1I
 if OOOOOOO0oo == OoOOOO00oOO and I1I1IiI1 != iII1iii :
  oO00oOOoooO ( '' , '[COLOR=orange]----------------- UPDATE AVAILABLE ------------------[/COLOR]' , 'None' , '' , '' , '' , '' , '' )
  o0OIiII ( '[COLOR=dodgerblue]1. Update:[/COLOR] Overwrite My Library & Profiles' , iiIiII1 , 'update_community' , iii1I1Iii , '' , 'update' , i1iIIIi1i , OO0III , i111iii1I1 , Iii1II1ii )
  o0OIiII ( '[COLOR=dodgerblue]2. Update:[/COLOR] Keep My Library & Profiles' , iiIiII1 , 'update_community' , iii1I1Iii , '' , 'updatelibprofile' , i1iIIIi1i , OO0III , i111iii1I1 , Iii1II1ii )
  o0OIiII ( '[COLOR=dodgerblue]3. Update:[/COLOR] Keep My Library Only' , iiIiII1 , 'update_community' , iii1I1Iii , '' , 'updatelibrary' , i1iIIIi1i , OO0III , i111iii1I1 , Iii1II1ii )
  o0OIiII ( '[COLOR=dodgerblue]4. Update:[/COLOR] Keep My Profiles Only' , iiIiII1 , 'update_community' , iii1I1Iii , '' , 'updateprofiles' , i1iIIIi1i , OO0III , i111iii1I1 , Iii1II1ii )
  if 80 - 80: Iiii1i1 / i11iIiiIii + OoooooooOO
 if I1i11ii11 != 'None' or Ii1iI111 != 'None' or O0oooo00o0Oo != 'None' or I1iii != 'None' or oO0o0O0Ooo0o != 'None' or i1Ii11II != 'None' :
  oO00oOOoooO ( '' , '[COLOR=orange]------------------ VIDEO GUIDES -----------------[/COLOR]' , 'None' , '' , '' , '' , '' , '' )
  if 38 - 38: OoooO0Oo0O0 % o0oOo0 + i1IIi * OoooooooOO * III1IiiI
 if I1i11ii11 != 'None' :
  oO00oOOoooO ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] Preview[/COLOR]' , I1i11ii11 , 'play_video' , '' , o00oo0 , '' , '' )
  if 83 - 83: iIii1I11I1II1 - o0oOo0 - Iiii1i1 / ii1ii11IIIiiI - O0
 if Ii1iI111 != 'None' :
  oO00oOOoooO ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] ' + oOo0oO + '[/COLOR]' , Ii1iI111 , 'play_video' , '' , o00oo0 , '' , '' )
  if 81 - 81: iI1IiiIIIiIi - III1IiiI * OoooO0Oo0O0 / Iiii1i1
 if O0oooo00o0Oo != 'None' :
  oO00oOOoooO ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] ' + IIi1IIIIi + '[/COLOR]' , O0oooo00o0Oo , 'play_video' , '' , o00oo0 , '' , '' )
  if 21 - 21: ii1ii11IIIiiI
 if I1iii != 'None' :
  oO00oOOoooO ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] ' + OOOoO + '[/COLOR]' , I1iii , 'play_video' , '' , o00oo0 , '' , '' )
  if 63 - 63: o00O0OoO . O0 * o00O0OoO + iIii1I11I1II1
 if oO0o0O0Ooo0o != 'None' :
  oO00oOOoooO ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] ' + I1i + '[/COLOR]' , oO0o0O0Ooo0o , 'play_video' , '' , o00oo0 , '' , '' )
  if 46 - 46: i1IIi + oO0OooOoO * i1IIi - iI1IiiIIIiIi
 if i1Ii11II != 'None' :
  oO00oOOoooO ( '' , '[COLOR=orange]Video:[/COLOR][COLOR=white] ' + iiiI + '[/COLOR]' , i1Ii11II , 'play_video' , '' , o00oo0 , '' , '' )
  if 79 - 79: oO0OooOoO - III1IiiI * OoooO0Oo0O0 - O00OOOoOoo0O . OoooO0Oo0O0
 if OOOOOOO0oo != OoOOOO00oOO :
  oO00oOOoooO ( '' , '[COLOR=orange]------------------ INSTALL OPTIONS ------------------[/COLOR]' , 'None' , '' , '' , '' , '' , '' )
  if 11 - 11: O0 * O00OOOoOoo0O
 if iiIiII1 == 'None' :
  o0OIiII ( '[COLOR=orange]Sorry this build is currently unavailable[/COLOR]' , '' , '' , '' , '' , '' , '' , '' , '' , '' )
  if 37 - 37: O00OOOoOoo0O + O0 . O0 * II11iIiIIIiI % Iiii1i1 / i1Iii1i1I
 if OOOOOOO0oo != OoOOOO00oOO :
  if OOOOOo ( ) and Ii1Ii1 != 'None' :
   if 18 - 18: OoooooooOO
   o0OIiII ( '[COLOR=darkcyan]OpenELEC FRESH INSTALL[/COLOR]' , Ii1Ii1 , 'restore_openelec' , iii1I1Iii , o00oo0 , i111iii1I1 , i1iIIIi1i , '' , '' , '' )
   if 57 - 57: o0oOo0 . O00OOOoOoo0O * oOO00Oo - OoooooooOO
   if 75 - 75: i11iIiiIii / oOO00Oo . i11111IIIII . i1IIi . i1IIi / o00O0OoO
  o0OIiII ( '[COLOR=dodgerblue]Standard Install[/COLOR]' , iiIiII1 , 'restore_community' , iii1I1Iii , o00oo0 , 'merge' , i1iIIIi1i , OO0III , i111iii1I1 , Iii1II1ii )
  if 94 - 94: o0oOo0 + o0Oo
  if 56 - 56: O00OOOoOoo0O % oOO00Oo
  if 40 - 40: iiIi1i11 / i11111IIIII
  if 29 - 29: iI1IiiIIIiIi - iI1IiiIIIiIi / o0oOo0
 if i111iii1I1 != 'None' :
  if 49 - 49: o00O0OoO + III1IiiI % ii1ii11IIIiiI - II11iIiIIIiI - O0 - OoooooooOO
  oO00oOOoooO ( '' , '[COLOR=dodgerblue](Optional) Apply guisettings.xml fix[/COLOR]' , i111iii1I1 , 'guisettingsfix' , '' , o00oo0 , '' , '' )
  if 4 - 4: oO0OooOoO - III1IiiI % II11iIiIIIiI * i11iIiiIii
  if 18 - 18: II11iIiIIIiI % O0
def oooooO00OOO ( url ) :
 if 53 - 53: oO0OooOoO
 OoO = ''
 if url == 'create_pack' :
  OoO = I11IIIi ( 'http://noobsandnerds.com/TI/AddonPortal/approved.php' , 10 )
  Oo0O0ooo0O0O = xbmcgui . Dialog ( ) . browse ( 3 , 'Select the folder you want to store this file in' , 'files' , '' , False , False )
  iIo00OOOOOo0OOo = i1II11I11ii1 ( heading = "Enter a name for this keyword" )
  if 13 - 13: II11iIiIIIiI / OoooO0Oo0O0
  if ( not iIo00OOOOOo0OOo ) :
   return False , 0
   if 29 - 29: o0oOo0 * oO0OooOoO * ii1ii11IIIiiI * i11111IIIII
  I1II1IiI1 = urllib . quote_plus ( iIo00OOOOOo0OOo )
 OOooO0OOoo . create ( 'Backing Up Addons & Repositories' , '' , 'Please Wait...' )
 if 92 - 92: III1IiiI
 if not os . path . exists ( i1Oo00 ) :
  os . makedirs ( i1Oo00 )
  if 7 - 7: i1Iii1i1I
  if 73 - 73: ii1ii11IIIiiI % OoooO0Oo0O0
 for i1iIIIi1i in os . listdir ( II11iiii1Ii ) :
  if not 'metadata' in i1iIIIi1i and not 'module' in i1iIIIi1i and not 'script.common' in i1iIIIi1i and not 'packages' in i1iIIIi1i and not 'service.xbmc.versioncheck' in i1iIIIi1i and os . path . isdir ( os . path . join ( II11iiii1Ii , i1iIIIi1i ) ) :
   try :
    OOooO0OOoo . update ( 0 , "Backing Up" , '[COLOR yellow]%s[/COLOR]' % i1iIIIi1i , 'Please Wait...' )
    if 32 - 32: iiIi1i11 + i1Iii1i1I + iIii1I11I1II1 * II11iIiIIIiI
    if 62 - 62: i11iIiiIii
    if i1iIIIi1i in OoO or url != 'create_pack' :
     if 2 - 2: o0Oo
     if not os . path . exists ( os . path . join ( i1Oo00 , 'addons' , i1iIIIi1i ) ) :
      os . makedirs ( os . path . join ( i1Oo00 , 'addons' , i1iIIIi1i ) )
     shutil . copyfile ( os . path . join ( II11iiii1Ii , i1iIIIi1i , 'addon.xml' ) , os . path . join ( i1Oo00 , 'addons' , i1iIIIi1i , 'addon.xml' ) )
    if not i1iIIIi1i in OoO :
     shutil . copytree ( os . path . join ( II11iiii1Ii , i1iIIIi1i ) , os . path . join ( i1Oo00 , 'addons' , i1iIIIi1i ) )
     if 69 - 69: OoooooooOO / II11iIiIIIiI * Iiii1i1
    Oo0o0ooO0ooo = os . path . join ( i1Oo00 , 'addons' , i1iIIIi1i , 'addon.xml' )
    if 47 - 47: i11111IIIII
    if 76 - 76: ii1ii11IIIiiI * iIii1I11I1II1 + OoooO0Oo0O0 - o0oOo0 - o00O0OoO / i1IIi
    if 27 - 27: OoooO0Oo0O0 . i11111IIIII
    OOOoO00 = open ( Oo0o0ooO0ooo , mode = 'r' )
    i11ii1iI = OOOoO00 . read ( )
    OOOoO00 . close ( )
    if 66 - 66: O0 / O0 * i1IIi . OoooooooOO % iIii1I11I1II1
    if 21 - 21: i11111IIIII - o0Oo % OoooooooOO + oOO00Oo
    ooo000oOO = re . compile ( '<addon[\s\S]*?">' ) . findall ( i11ii1iI )
    oOo0Oo0O0O = ooo000oOO [ 0 ] if ( len ( ooo000oOO ) > 0 ) else 'None'
    o00O0o = re . compile ( 'version="[\s\S]*?"' ) . findall ( oOo0Oo0O0O )
    i1Ii1 = o00O0o [ 0 ] if ( len ( o00O0o ) > 0 ) else '0'
    if 75 - 75: OoooooooOO * i11iIiiIii
    if 67 - 67: Iiii1i1 / ii1ii11IIIiiI . OoooooooOO
    OoIIiIIIII1I = str ( oOo0Oo0O0O ) . replace ( i1Ii1 , 'version="0.0.0.1"' )
    IIiIi11i1i = i11ii1iI . replace ( oOo0Oo0O0O , OoIIiIIIII1I )
    if 96 - 96: i11iIiiIii . oO0OooOoO
    ooo0 = open ( Oo0o0ooO0ooo , mode = 'w' )
    ooo0 . write ( str ( IIiIi11i1i ) )
    ooo0 . close ( )
    if 7 - 7: i1IIi
   except :
    if iiIIIII1i1iI == 'true' :
     print "### Failed to create: " + i1iIIIi1i + ' ###'
     if 63 - 63: iIii1I11I1II1 + i11111IIIII % i1IIi / o0Oo % oO0OooOoO
 if url == 'create_pack' :
  oooOOO0ooOoOOO = [ '.svn' , '.git' ]
  o0IiIiI111IIII1 = [ '.DS_Store' , 'Thumbs.db' , '.gitignore' ]
  OO0iiiii1iiIIii = os . path . join ( Oo0O0ooo0O0O , I1II1IiI1 + '.zip' )
  oOoOo ( i1Oo00 , OO0iiiii1iiIIii , 'Creating Addons Archive' , '' , '' , '' , oooOOO0ooOoOOO , o0IiIiI111IIII1 )
  try :
   shutil . rmtree ( i1Oo00 )
  except :
   pass
  iI111I11I1I1 . ok ( 'New Keyword Created' , 'Please read the instructions on how to share this keyword with the community. Your zip file can be found at:' , '[COLOR=dodgerblue]' + OO0iiiii1iiIIii + '[/COLOR]' )
  if 8 - 8: OoooO0Oo0O0 * OoooO0Oo0O0 * i1IIi + i1Iii1i1I . OoooO0Oo0O0
  if 100 - 100: OoooooooOO - O0 . o00O0OoO / o00O0OoO + oO0OooOoO * O00OOOoOoo0O
def i11111 ( name ) :
 if 60 - 60: iiIi1i11
 IiIiiI11i1Ii = open ( I1IIiiIiii , mode = 'r' )
 i11ii1iI = IiIiiI11i1Ii . read ( )
 IiIiiI11i1Ii . close ( )
 O0Oo0 = re . compile ( 'name="(.+?)"' ) . findall ( i11ii1iI )
 iIIIi1IiI11I1 = O0Oo0 [ 0 ] if ( len ( O0Oo0 ) > 0 ) else 'None'
 iii1II1iI1IIi = [ ]
 if 73 - 73: o0oOo0
 if 86 - 86: O00OOOoOoo0O . o00O0OoO / II11iIiIIIiI * o00O0OoO
 if iIIIi1IiI11I1 == 'None' or iIIIi1IiI11I1 == 'unknown' :
  iI111I11I1I1 . ok ( 'No Profile Set' , "There's no profile name set to the build you're currently running. Please enter a name for this build so we can save it and make sure no data is lost." )
  iIo00OOOOOo0OOo = i1II11I11ii1 ( heading = "Enter a name for this backup" )
  if ( not iIo00OOOOOo0OOo ) :
   return False , 0
  iIo00OOOOOo0OOo = iIo00OOOOOo0OOo . replace ( ' ' , '_' )
  I1II1IiI1 = urllib . quote_plus ( iIo00OOOOOo0OOo )
  os . makedirs ( os . path . join ( iiI1IiI , I1II1IiI1 ) )
  I1111I1Ii = I1II1IiI1
  IiIiiI11i1Ii = open ( I1IIiiIiii , 'w' )
  IIiIi11i1i = i11ii1iI . replace ( 'id="None"' , 'id="Local"' ) . replace ( 'name="None"' , 'name="' + str ( I1111I1Ii ) + '"' )
  IiIiiI11i1Ii . write ( IIiIi11i1i )
  IiIiiI11i1Ii . close ( )
  if 68 - 68: ii1ii11IIIiiI + o0Oo * oOO00Oo . III1IiiI + O00OOOoOoo0O + o0oOo0
  if 80 - 80: O00OOOoOoo0O * iiIi1i11
  for iIIii1iiiIiiI in os . listdir ( OO0o ) :
   iii1II1iI1IIi . append ( iIIii1iiiIiiI )
   if 67 - 67: oO0OooOoO
  iI1iii1iIiiI = open ( os . path . join ( iiI1IiI , I1II1IiI1 , 'addonlist' ) , mode = 'w+' )
  for iIIii1iiiIiiI in os . listdir ( II11iiii1Ii ) :
   if not iIIii1iiiIiiI in iii1II1iI1IIi and iIIii1iiiIiiI != 'plugin.program.totalinstaller' and iIIii1iiiIiiI != 'script.module.addon.common' and iIIii1iiiIiiI != 'packages' :
    iI1iii1iIiiI . write ( iIIii1iiiIiiI + '|' )
  iI1iii1iIiiI . close ( )
  if 36 - 36: ii1ii11IIIiiI - O0 * o0Oo / OoooO0Oo0O0 / iiIi1i11
  o00oo = [ 'addons' , 'cache' , 'CP_Profiles' , 'system' , 'temp' , 'Thumbnails' ]
  O0oO0oo0O = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' , 'addons*.db' , 'textures13.db' ]
  Oo00O0OO = "Creating backup of existing build"
  oOOOoo0o = "Archiving..."
  iiiI1IiIIii = ""
  IIIIiii = "Please Wait"
  oOoOo ( iIii1 , os . path . join ( iiI1IiI , I1II1IiI1 , 'build.zip' ) , Oo00O0OO , oOOOoo0o , iiiI1IiIIii , IIIIiii , o00oo , O0oO0oo0O )
  if 33 - 33: OoooooooOO % OoooO0Oo0O0 . O0 / OoooO0Oo0O0
  if 63 - 63: i11111IIIII + iIii1I11I1II1 + o0Oo + Iiii1i1
  if 72 - 72: ii1ii11IIIiiI + i11iIiiIii + OoooO0Oo0O0
 else :
  I1111I1Ii = iIIIi1IiI11I1 . replace ( ' ' , '_' ) . replace ( ':' , '-' ) . replace ( "'" , '' )
  if 96 - 96: III1IiiI % i1IIi / oOO00Oo
  iI1iii1iIiiI = open ( os . path . join ( iiI1IiI , I1111I1Ii , 'addonlist' ) , mode = 'w+' )
  for iIIii1iiiIiiI in os . listdir ( II11iiii1Ii ) :
   if not iIIii1iiiIiiI in iii1II1iI1IIi and iIIii1iiiIiiI != 'plugin.program.totalinstaller' and iIIii1iiiIiiI != 'script.module.addon.common' and iIIii1iiiIiiI != 'packages' :
    iI1iii1iIiiI . write ( iIIii1iiiIiiI + '|' )
  iI1iii1iIiiI . close ( )
  if 13 - 13: oO0OooOoO - II11iIiIIIiI % i11iIiiIii + i1Iii1i1I
  o00oo = [ 'addons' , 'cache' , 'CP_Profiles' , 'system' , 'temp' , 'Thumbnails' ]
  O0oO0oo0O = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' , 'addons*.db' , 'textures13.db' ]
  Oo00O0OO = "Creating backup of existing build"
  oOOOoo0o = "Archiving..."
  iiiI1IiIIii = ""
  IIIIiii = "Please Wait"
  oOoOo ( iIii1 , os . path . join ( iiI1IiI , I1111I1Ii , 'build.zip' ) , Oo00O0OO , oOOOoo0o , iiiI1IiIIii , IIIIiii , o00oo , O0oO0oo0O )
 return I1111I1Ii
 if 88 - 88: O0 . III1IiiI % o0Oo
 if 10 - 10: o0Oo + O0
def Oooo0Oo00o ( ) :
 print '############################################################       DELETING USERDATA             ###############################################################'
 IIoO = xbmc . translatePath ( os . path . join ( 'special://home/userdata/addon_data' , '' ) )
 if 13 - 13: i1IIi
 for IiiI111 , ooooOoO0O , IIII in os . walk ( IIoO ) :
  O0OOOo0Oo0 = 0
  O0OOOo0Oo0 += len ( IIII )
  if 55 - 55: iiIi1i11 / O00OOOoOoo0O * iiIi1i11
  if O0OOOo0Oo0 >= 0 :
   if 40 - 40: ii1ii11IIIiiI . i11iIiiIii + OoooO0Oo0O0 + o0Oo . III1IiiI
   for Oo0O0O000 in IIII :
    os . unlink ( os . path . join ( IiiI111 , Oo0O0O000 ) )
    if 90 - 90: Iiii1i1 . O00OOOoOoo0O * oO0OooOoO % o0oOo0
   for Ii1iI in ooooOoO0O :
    shutil . rmtree ( os . path . join ( IiiI111 , Ii1iI ) )
    if 36 - 36: o0Oo - II11iIiIIIiI % iiIi1i11 . o00O0OoO + o00O0OoO + iI1IiiIIIiIi
    if 28 - 28: II11iIiIIIiI / III1IiiI * O00OOOoOoo0O + OoooO0Oo0O0 - Iiii1i1
def Oo0Ii1iii ( ) :
 for o000o0o00Oo in glob . glob ( os . path . join ( O0Oo000ooO00 , 'xbmc_crashlog*.*' ) ) :
  oo0O00o0O0Oo = o000o0o00Oo
  os . remove ( o000o0o00Oo )
  iI111I11I1I1 = xbmcgui . Dialog ( )
  iI111I11I1I1 . ok ( "Crash Logs Deleted" , "Your old crash logs have now been deleted." )
  if 26 - 26: i1IIi / i1Iii1i1I . i1Iii1i1I
  if 20 - 20: iiIi1i11 - i1Iii1i1I / II11iIiIIIiI * ii1ii11IIIiiI
def Oo ( ) :
 print '############################################################       DELETING PACKAGES             ###############################################################'
 o00O = xbmc . translatePath ( os . path . join ( 'special://home/addons/packages' , '' ) )
 if 50 - 50: O00OOOoOoo0O - III1IiiI + iIii1I11I1II1 - ii1ii11IIIiiI . II11iIiIIIiI
 for IiiI111 , ooooOoO0O , IIII in os . walk ( o00O ) :
  O0OOOo0Oo0 = 0
  O0OOOo0Oo0 += len ( IIII )
  if 8 - 8: iI1IiiIIIiIi
  if O0OOOo0Oo0 > 0 :
   if 30 - 30: i1IIi
   for Oo0O0O000 in IIII :
    os . unlink ( os . path . join ( IiiI111 , Oo0O0O000 ) )
    if 61 - 61: Iiii1i1 / Iiii1i1
   for Ii1iI in ooooOoO0O :
    shutil . rmtree ( os . path . join ( IiiI111 , Ii1iI ) )
    if 26 - 26: i11111IIIII . O0 * i11111IIIII - oOO00Oo * II11iIiIIIiI
    if 6 - 6: O00OOOoOoo0O . oO0OooOoO * o0Oo . o0Oo / iI1IiiIIIiIi
def I1I1ii1111 ( path ) :
 iI1iii = iI111I11I1I1 . yesno ( 'Are you certain?' , 'This will completely wipe this folder, are you absolutely certain you want to continue? There is NO going back after this!' )
 if iI1iii == 1 :
  OOooO0OOoo . create ( "[COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR]" , "Wiping..." , '' , 'Please Wait' )
  shutil . rmtree ( path , ignore_errors = True )
  OOooO0OOoo . close ( )
  xbmc . executebuiltin ( 'container.Refresh' )
  if 4 - 4: OoooO0Oo0O0 * O0 - Iiii1i1 - i11iIiiIii / oOO00Oo . iiIi1i11
  if 44 - 44: o0oOo0 * i11iIiiIii
def II111Ii11II ( url ) :
 for i1iIIIi1i in os . listdir ( iiI1IiI ) :
  if i1iIIIi1i != 'Master' and i1iIIIi1i != url . replace ( ' ' , '_' ) . replace ( "'" , '' ) . replace ( ':' , '-' ) :
   oO00oOOoooO ( '' , '[COLOR=darkcyan]DELETE[/COLOR] ' + i1iIIIi1i . replace ( '_' , ' ' ) , os . path . join ( iiI1IiI , i1iIIIi1i ) , 'delete_path' , '' , '' , '' , '' )
   if 14 - 14: o0oOo0 * OoooooooOO + ii1ii11IIIiiI
   if 6 - 6: i1IIi - o00O0OoO
def O0o00ooo ( ) :
 print '############################################################       DELETING USERDATA             ###############################################################'
 IIoO = xbmc . translatePath ( os . path . join ( 'special://home/userdata/addon_data' , '' ) )
 if 5 - 5: i1IIi - III1IiiI / O00OOOoOoo0O
 for IiiI111 , ooooOoO0O , IIII in os . walk ( IIoO ) :
  O0OOOo0Oo0 = 0
  O0OOOo0Oo0 += len ( IIII )
  if 13 - 13: oO0OooOoO
  if O0OOOo0Oo0 >= 0 :
   if 55 - 55: II11iIiIIIiI % i1IIi * o00O0OoO
   for Oo0O0O000 in IIII :
    os . unlink ( os . path . join ( IiiI111 , Oo0O0O000 ) )
    if 95 - 95: iiIi1i11 / oO0OooOoO - oOO00Oo % Iiii1i1 . o00O0OoO
   for Ii1iI in ooooOoO0O :
    shutil . rmtree ( os . path . join ( IiiI111 , Ii1iI ) )
    if 63 - 63: iIii1I11I1II1 / o0oOo0
    if 24 - 24: II11iIiIIIiI / iIii1I11I1II1 % iiIi1i11 * O00OOOoOoo0O - iIii1I11I1II1
def O000OOo00oo ( ) :
 OOooO0OOoo . create ( 'Checking dependencies' , '' , 'Please Wait...' )
 oo0OOo = [ ]
 if 50 - 50: oO0OooOoO
 for i1iIIIi1i in os . listdir ( II11iiii1Ii ) :
  if i1iIIIi1i != 'packages' :
   try :
    iI1iIIiiii = os . path . join ( II11iiii1Ii , i1iIIIi1i , 'addon.xml' )
    i1iI11i1ii11 = open ( iI1iIIiiii , mode = 'r' )
    OOooo0O00o = i1iI11i1ii11 . read ( )
    i1iI11i1ii11 . close ( )
    oOOoOooOo = re . compile ( 'import addon="(.+?)"' ) . findall ( OOooo0O00o )
    if 39 - 39: oO0OooOoO . O00OOOoOoo0O - II11iIiIIIiI * i1IIi . OoooooooOO
    for OOoO00 in oOOoOooOo :
     if 44 - 44: o0Oo
     if not 'xbmc.python' in OOoO00 and not OOoO00 in oo0OOo :
      oo0OOo . append ( OOoO00 )
      print 'Script Requires --- ' + OOoO00
   except :
    pass
    if 55 - 55: III1IiiI . Iiii1i1 * Iiii1i1
 return oo0OOo
 if 82 - 82: o0Oo % ii1ii11IIIiiI % o00O0OoO + o00O0OoO
 if 6 - 6: II11iIiIIIiI
def oOoooO0 ( name , addon_id ) :
 iIi = 1
 oOOoo0 = 1
 iI1iIIiiii = xbmc . translatePath ( os . path . join ( II11iiii1Ii , addon_id , 'addon.xml' ) )
 i1iI11i1ii11 = open ( iI1iIIiiii , mode = 'r' )
 OOooo0O00o = i1iI11i1ii11 . read ( )
 i1iI11i1ii11 . close ( )
 oOOoOooOo = re . compile ( 'import addon="(.+?)"' ) . findall ( OOooo0O00o )
 if 73 - 73: Iiii1i1 * OoooO0Oo0O0 + oOO00Oo - II11iIiIIIiI . o00O0OoO
 for OOoO00 in oOOoOooOo :
  if 93 - 93: i11iIiiIii
  if not 'xbmc.python' in OOoO00 :
   print 'Script Requires --- ' + OOoO00
   OoOiII11IiIi = xbmc . translatePath ( os . path . join ( II11iiii1Ii , OOoO00 ) )
   if 27 - 27: ii1ii11IIIiiI + O00OOOoOoo0O
   if not os . path . exists ( OoOiII11IiIi ) :
    oOo0 = 'http://noobsandnerds.com/TI/AddonPortal/dependencyinstall.php?id=%s' % ( OOoO00 )
    OOOoOO = I11IIIi ( oOo0 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
    OOo0o0O0O = re . compile ( 'name="(.+?)"' ) . findall ( OOOoOO )
    OooIiIIII1i11I = re . compile ( 'version="(.+?)"' ) . findall ( OOOoOO )
    OOoo = re . compile ( 'repo_url="(.+?)"' ) . findall ( OOOoOO )
    iIIiiiI = re . compile ( 'data_url="(.+?)"' ) . findall ( OOOoOO )
    oo0 = re . compile ( 'zip_url="(.+?)"' ) . findall ( OOOoOO )
    IiIII1 = re . compile ( 'repo_id="(.+?)"' ) . findall ( OOOoOO )
    ooo0oOooo0o0 = OOo0o0O0O [ 0 ] if ( len ( OOo0o0O0O ) > 0 ) else ''
    iII1iii = OooIiIIII1i11I [ 0 ] if ( len ( OooIiIIII1i11I ) > 0 ) else ''
    IIii1Ii1i1ii1 = OOoo [ 0 ] if ( len ( OOoo ) > 0 ) else ''
    oOOoOOooO0 = iIIiiiI [ 0 ] if ( len ( iIIiiiI ) > 0 ) else ''
    Iii1IIII1Iii = oo0 [ 0 ] if ( len ( oo0 ) > 0 ) else ''
    OO = IiIII1 [ 0 ] if ( len ( IiIII1 ) > 0 ) else ''
    OOOOo0o0O0o = xbmc . translatePath ( os . path . join ( O00O0oOO00O00 , ooo0oOooo0o0 + '.zip' ) )
    if 8 - 8: oOO00Oo / oOO00Oo - o00O0OoO + oOO00Oo * O00OOOoOoo0O . oOO00Oo
    OOooO0OOoo . create ( 'Downloading Dependencies' , 'Installing [COLOR=yellow]' + ooo0oOooo0o0 , '' , '' )
    if 45 - 45: oO0OooOoO * i1IIi
    try :
     downloader . download ( IIii1Ii1i1ii1 , OOOOo0o0O0o , OOooO0OOoo )
     extract . all ( OOOOo0o0O0o , II11iiii1Ii , OOooO0OOoo )
     if 25 - 25: O00OOOoOoo0O + iIii1I11I1II1 % o00O0OoO / II11iIiIIIiI * II11iIiIIIiI
    except :
     if 51 - 51: III1IiiI - ii1ii11IIIiiI + i1Iii1i1I - oOO00Oo . ii1ii11IIIiiI % OoooO0Oo0O0
     try :
      downloader . download ( Iii1IIII1Iii , OOOOo0o0O0o , OOooO0OOoo )
      extract . all ( OOOOo0o0O0o , II11iiii1Ii , OOooO0OOoo )
      if 14 - 14: o0Oo / O0
     except :
      if 43 - 43: III1IiiI - i11111IIIII % i11iIiiIii * oO0OooOoO . Iiii1i1 - o00O0OoO
      try :
       if 13 - 13: ii1ii11IIIiiI
       if not os . path . exists ( OoOiII11IiIi ) :
        os . makedirs ( OoOiII11IiIi )
        if 70 - 70: i11111IIIII . Iiii1i1 * ii1ii11IIIiiI + o00O0OoO - i11111IIIII . i11111IIIII
       OOOoOO = I11IIIi ( oOOoOOooO0 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
       oooo0OOo = re . compile ( 'href="(.+?)"' , re . DOTALL ) . findall ( OOOoOO )
       if 60 - 60: i11iIiiIii * II11iIiIIIiI % ii1ii11IIIiiI + ii1ii11IIIiiI
       for OoOo0OOOoOo in oooo0OOo :
        IIiiIIi1 = xbmc . translatePath ( os . path . join ( OoOiII11IiIi , OoOo0OOOoOo ) )
        if 84 - 84: iIii1I11I1II1 + OoooooooOO
        if addon_id not in OoOo0OOOoOo and '/' not in OoOo0OOOoOo :
         if 77 - 77: O0 * OoooO0Oo0O0 * III1IiiI + ii1ii11IIIiiI + OoooO0Oo0O0 - Iiii1i1
         try :
          OOooO0OOoo . update ( 0 , '' , 'Downloading [COLOR=yellow]' + OoOo0OOOoOo + '[/COLOR]' , 'Please wait...' )
          downloader . download ( oOOoOOooO0 + OoOo0OOOoOo , IIiiIIi1 , OOooO0OOoo )
          if 10 - 10: OoooO0Oo0O0 + i11111IIIII
         except :
          print "failed to install" + OoOo0OOOoOo
          if 58 - 58: o0Oo + OoooooooOO / i1Iii1i1I . o0oOo0 % oOO00Oo / OoooO0Oo0O0
        if '/' in OoOo0OOOoOo and '..' not in OoOo0OOOoOo and 'http' not in OoOo0OOOoOo :
         i1IiiI1iIi = oOOoOOooO0 + OoOo0OOOoOo
         oOOo00O0OOOo ( IIiiIIi1 , i1IiiI1iIi )
         if 62 - 62: oO0OooOoO
      except :
       iI111I11I1I1 . ok ( "Error downloading dependency" , 'There was an error downloading [COLOR=dodgerblue]' + ooo0oOooo0o0 + '[/COLOR]. Please consider updating the add-on portal with details or report the error on the forum at [COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR]' )
       oOOoo0 = 0
       iIi = 0
       if 12 - 12: i11111IIIII + oO0OooOoO
    if oOOoo0 == 1 :
     time . sleep ( 1 )
     OOooO0OOoo . update ( 0 , "[COLOR=yellow]" + ooo0oOooo0o0 + '[/COLOR]  [COLOR=lime]Successfully Installed[/COLOR]' , '' , 'Please wait...' )
     time . sleep ( 1 )
     oo0OoOooo = 'http://noobsandnerds.com/TI/AddonPortal/downloadcount.php?id=%s' % ( OOoO00 )
     try :
      I11IIIi ( oo0OoOooo , 5 )
     except :
      pass
 OOooO0OOoo . close ( )
 time . sleep ( 1 )
 if 92 - 92: Iiii1i1 % iIii1I11I1II1 - i1Iii1i1I / i11iIiiIii % o0oOo0 * oOO00Oo
 if 80 - 80: i1Iii1i1I
def iI1I1ii11IIi1 ( name , url , buildname , author , version , description , updated , skins , videoaddons , audioaddons , programaddons , pictureaddons , sources , adult ) :
 oO0o ( buildname + '     v.' + version , '[COLOR=yellow][B]Author:   [/B][/COLOR]' + author + '[COLOR=yellow][B]               Last Updated:   [/B][/COLOR]' + updated + '[COLOR=yellow][B]               Adult Content:   [/B][/COLOR]' + adult + '[CR][CR][COLOR=yellow][B]Description:[CR][/B][/COLOR]' + description +
 '[CR][CR][COLOR=blue][B]Skins:   [/B][/COLOR]' + skins + '[CR][CR][COLOR=blue][B]Video Addons:   [/B][/COLOR]' + videoaddons + '[CR][CR][COLOR=blue][B]Audio Addons:   [/B][/COLOR]' + audioaddons +
 '[CR][CR][COLOR=blue][B]Program Addons:   [/B][/COLOR]' + programaddons + '[CR][CR][COLOR=blue][B]Picture Addons:   [/B][/COLOR]' + pictureaddons + '[CR][CR][COLOR=blue][B]Sources:   [/B][/COLOR]' + sources +
 '[CR][CR][COLOR=orange]Disclaimer: [/COLOR]These are community builds and they may overwrite some of your existing settings, '
 'It\'s purely the responsibility of the user to choose whether or not they wish to install these builds, the individual who uploads the build should state what\'s included and then it\'s the users decision to decide whether or not that content is suitable for them.' )
 if 100 - 100: II11iIiIIIiI . iI1IiiIIIiIi . o0Oo % oO0OooOoO - III1IiiI
 if 52 - 52: o0Oo % ii1ii11IIIiiI * iI1IiiIIIiIi * i1Iii1i1I / iiIi1i11
def oooO00oo0 ( path ) :
 OOooO0OOoo . create ( "[COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR]" , "Wiping..." , '' , 'Please Wait' )
 shutil . rmtree ( path , ignore_errors = True )
 if 74 - 74: i11111IIIII / o0oOo0
def iIiIi1iIIi11i ( ) :
 os . remove ( I1IIiiIiii )
 os . rename ( i1I1iI , I1IIiiIiii )
 xbmc . executebuiltin ( 'UnloadSkin' )
 xbmc . executebuiltin ( "ReloadSkin" )
 iI111I11I1I1 . ok ( "Local Restore Complete" , 'XBMC/Kodi will now close.' , '' , '' )
 xbmc . executebuiltin ( "Quit" )
 if 86 - 86: O0 . i1IIi - ii1ii11IIIiiI / II11iIiIIIiI / OoooO0Oo0O0
 if 64 - 64: OoooooooOO - i1IIi / oO0OooOoO
def ii1OO0 ( url ) :
 OOooO0OOoo . create ( "Changing Physical Paths To Special" , "Renaming paths..." , '' , 'Please Wait' )
 if 49 - 49: II11iIiIIIiI + O0 + i11111IIIII . oO0OooOoO % o0oOo0
 for IiiI111 , ooooOoO0O , IIII in os . walk ( url ) :
  if 33 - 33: O00OOOoOoo0O . iIii1I11I1II1 / o00O0OoO % iI1IiiIIIiIi
  for file in IIII :
   if 49 - 49: ii1ii11IIIiiI + oO0OooOoO / i11111IIIII - O0 % iI1IiiIIIiIi
   if file . endswith ( ".xml" ) or file . endswith ( ".hash" ) or file . endswith ( "properies" ) :
    OOooO0OOoo . update ( 0 , "Fixing" , file , 'Please Wait' )
    i11IiI1iiI11 = open ( ( os . path . join ( IiiI111 , file ) ) ) . read ( )
    iII1i1 = iIii1 . replace ( ':' , '%3a' ) . replace ( '\\' , '%5c' )
    IIIii = iIii1 . replace ( '\\' , '\\\\' )
    OoOo00o00 = i11IiI1iiI11 . replace ( iIii1 , 'special://home/' ) . replace ( iII1i1 , 'special://home/' ) . replace ( IIIii , 'special://home/' )
    Oo0O0O000 = open ( ( os . path . join ( IiiI111 , file ) ) , mode = 'w' )
    Oo0O0O000 . write ( str ( OoOo00o00 ) )
    Oo0O0O000 . close ( )
    if 77 - 77: oOO00Oo - OoooooooOO + oOO00Oo . i11111IIIII
    if 23 - 23: o0Oo * o00O0OoO / i11iIiiIii * Iiii1i1 . iIii1I11I1II1
def iiioo0Oo ( ) :
 if os . path . exists ( i1Oo00 ) :
  shutil . rmtree ( i1Oo00 )
 o00oo = [ ]
 O0oO0oo0O = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' ]
 Oo00O0OO = "Creating full backup of existing build"
 OOOoOooO000oO = "Creating Community Build"
 oOOOoo0o = "Archiving..."
 iiiI1IiIIii = ""
 IIIIiii = "Please Wait"
 if 75 - 75: O0 . o00O0OoO
 oOoOo ( iIii1 , myfullbackup , Oo00O0OO , oOOOoo0o , iiiI1IiIIii , IIIIiii , o00oo , O0oO0oo0O )
 if 77 - 77: i1Iii1i1I . OoooooooOO - o00O0OoO
def oooOooooO ( ) :
 i1IIiiIIIIi = 0
 IiIIIi = os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'Other' )
 Oo0iII = os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'LocalAndRental' )
 O0ooiIIi1 = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/script.module.simple.downloader' ) , '' )
 OoOo0O00 = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/script.image.music.slideshow/cache' ) , '' )
 iI1i1iI1iI = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.iplayer/iplayer_http_cache' ) , '' )
 I1IIiIi = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.itv/Images' ) , '' )
 OOOOoOoO = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/script.navi-x/cache' ) , '' )
 OO000 = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.phstreams/Cache' ) , '' )
 o0oOoo0o = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.audio.ramfm/cache' ) , '' )
 IiiIiIIi = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.whatthefurk/cache' ) , '' )
 O00OooOOoo = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.genesis' ) , 'cache.db' )
 oo0O0 = os . path . join ( iIii1 , 'temp' )
 OOooO0OOoo . create ( 'Calculating Used Space' , '' , 'Please wait' , '' )
 if 34 - 34: oO0OooOoO - i11111IIIII % O00OOOoOoo0O % iI1IiiIIIiIi / o0oOo0
 if 10 - 10: OoooooooOO . o0Oo * O0 * ii1ii11IIIiiI - iiIi1i11
 if os . path . exists ( IiIIIi ) :
  i1IIiiIIIIi = III ( IiIIIi , i1IIiiIIIIi )
 if os . path . exists ( Oo0iII ) :
  i1IIiiIIIIi = III ( Oo0iII , i1IIiiIIIIi )
 if os . path . exists ( O0ooiIIi1 ) :
  i1IIiiIIIIi = III ( O0ooiIIi1 , i1IIiiIIIIi )
 if os . path . exists ( OoOo0O00 ) :
  i1IIiiIIIIi = III ( OoOo0O00 , i1IIiiIIIIi )
 if os . path . exists ( iI1i1iI1iI ) :
  i1IIiiIIIIi = III ( iI1i1iI1iI , i1IIiiIIIIi )
 if os . path . exists ( I1IIiIi ) :
  i1IIiiIIIIi = III ( I1IIiIi , i1IIiiIIIIi )
 if os . path . exists ( OOOOoOoO ) :
  i1IIiiIIIIi = III ( OOOOoOoO , i1IIiiIIIIi )
 if os . path . exists ( OO000 ) :
  i1IIiiIIIIi = III ( OO000 , i1IIiiIIIIi )
 if os . path . exists ( o0oOoo0o ) :
  i1IIiiIIIIi = III ( o0oOoo0o , i1IIiiIIIIi )
 if os . path . exists ( IiiIiIIi ) :
  i1IIiiIIIIi = III ( IiiIiIIi , i1IIiiIIIIi )
 if os . path . exists ( O00OooOOoo ) :
  i1IIiiIIIIi = III ( O00OooOOoo , i1IIiiIIIIi )
 if os . path . exists ( oo0O0 ) :
  i1IIiiIIIIi = III ( oo0O0 , i1IIiiIIIIi )
 i1IIiiIIIIi = III ( OooO0 , i1IIiiIIIIi )
 i1IIiiIIIIi = III ( O00O0oOO00O00 , i1IIiiIIIIi ) / 1000000
 iI1iii = iI111I11I1I1 . yesno ( 'Results' , 'You can free up [COLOR=dodgerblue]' + str ( i1IIiiIIIIi ) + 'MB[/COLOR] of space if you run this cleanup program. Would you like to run the cleanup procedure?' )
 if iI1iii == 1 :
  ooO0 ( )
  try :
   shutil . rmtree ( O00O0oOO00O00 )
  except :
   pass
  iI1iii = iI111I11I1I1 . yesno ( 'Thumbnail Cleanup' , 'We highly recommend only wiping your OLD unused thumbnails. Do you want to clear just the old ones or all thumbnails?' , yeslabel = 'ALL' , nolabel = 'OLD ONLY' )
  if iI1iii == 1 :
   iII11 ( )
   oooO00oo0 ( OooO0 )
   O00OO00OOOoO ( )
  else :
   IiI1Ii1ii ( )
   if 47 - 47: i1IIi % o0oOo0 - II11iIiIIIiI * o00O0OoO / i11iIiiIii
   if 45 - 45: o0Oo . II11iIiIIIiI . Iiii1i1 / III1IiiI
def ii1iI11 ( url ) :
 oO00oOOoooO ( 'folder' , 'Anime' , str ( url ) + '&genre=anime' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Audiobooks' , str ( url ) + '&genre=audiobooks' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Comedy' , str ( url ) + '&genre=comedy' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Comics' , str ( url ) + '&genre=comics' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Documentary' , str ( url ) + '&genre=documentary' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Downloads' , str ( url ) + '&genre=downloads' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Food' , str ( url ) + '&genre=food' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Gaming' , str ( url ) + '&genre=gaming' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Health' , str ( url ) + '&genre=health' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'How To...' , str ( url ) + '&genre=howto' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Kids' , str ( url ) + '&genre=kids' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Live TV' , str ( url ) + '&genre=livetv' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Movies' , str ( url ) + '&genre=movies' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Music' , str ( url ) + '&genre=music' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'News' , str ( url ) + '&genre=news' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Photos' , str ( url ) + '&genre=photos' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Podcasts' , str ( url ) + '&genre=podcasts' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Radio' , str ( url ) + '&genre=radio' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Religion' , str ( url ) + '&genre=religion' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Space' , str ( url ) + '&genre=space' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Sports' , str ( url ) + '&genre=sports' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Technology' , str ( url ) + '&genre=tech' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Trailers' , str ( url ) + '&genre=trailers' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'TV Shows' , str ( url ) + '&genre=tv' , 'grab_builds' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Misc.' , str ( url ) + '&genre=other' , 'grab_builds' , '' , '' , '' , '' )
 if 87 - 87: III1IiiI * O00OOOoOoo0O + iI1IiiIIIiIi * i11iIiiIii % i11111IIIII . OoooooooOO
 if i1IiI1I11 . getSetting ( 'adult' ) == 'true' :
  oO00oOOoooO ( 'folder' , 'XXX' , str ( url ) + '&genre=adult' , 'grab_builds' , '' , '' , '' , '' )
  if 74 - 74: ii1ii11IIIiiI . O0 * O0 - oOO00Oo . OoooooooOO * III1IiiI
  if 2 - 2: o0Oo * Iiii1i1 % Iiii1i1 - Iiii1i1 - i1Iii1i1I + iiIi1i11
def III ( path , size ) :
 for I1iIiiIi , Ooi1IIii1i , O0oOo0o0O0o in os . walk ( path ) :
  for Oo0O0O000 in O0oOo0o0O0o :
   OOooO0OOoo . update ( 0 , "Calulating..." , '[COLOR=dodgerblue]' + Oo0O0O000 + '[/COLOR]' , 'Please Wait' )
   o0iii1i = os . path . join ( I1iIiiIi , Oo0O0O000 )
   size += os . path . getsize ( o0iii1i )
 return size
 if 30 - 30: O00OOOoOoo0O / o0Oo - ii1ii11IIIiiI - i1Iii1i1I - i11iIiiIii
def i1II11I11ii1 ( default = "" , heading = "" , hidden = False ) :
 oo0O00o0 = xbmc . Keyboard ( default , heading , hidden )
 if 51 - 51: O0 % oO0OooOoO % i11iIiiIii + iiIi1i11 . OoooooooOO
 oo0O00o0 . doModal ( )
 if ( oo0O00o0 . isConfirmed ( ) ) :
  return unicode ( oo0O00o0 . getText ( ) , "utf-8" )
 return default
 if 14 - 14: II11iIiIIIiI + i11iIiiIii - III1IiiI % i11111IIIII
 if 1 - 1: III1IiiI + Iiii1i1 . o0Oo
def i1II1iII1 ( ) :
 I11II11IiI11 = [ ]
 O00o = sys . argv [ 2 ]
 if len ( O00o ) >= 2 :
  Ii11Iiii1iiii = sys . argv [ 2 ]
  i1IIII1111 = Ii11Iiii1iiii . replace ( '?' , '' )
  if ( Ii11Iiii1iiii [ len ( Ii11Iiii1iiii ) - 1 ] == '/' ) :
   Ii11Iiii1iiii = Ii11Iiii1iiii [ 0 : len ( Ii11Iiii1iiii ) - 2 ]
  Ooo0o0000OO = i1IIII1111 . split ( '&' )
  I11II11IiI11 = { }
  for iIiI1II1I1 in range ( len ( Ooo0o0000OO ) ) :
   OooiIiI1i1Ii = { }
   OooiIiI1i1Ii = Ooo0o0000OO [ iIiI1II1I1 ] . split ( '=' )
   if ( len ( OooiIiI1i1Ii ) ) == 2 :
    I11II11IiI11 [ OooiIiI1i1Ii [ 0 ] ] = OooiIiI1i1Ii [ 1 ]
    if 69 - 69: O0 + iIii1I11I1II1 % i1Iii1i1I * o0Oo . II11iIiIIIiI - O00OOOoOoo0O
 return I11II11IiI11
 if 49 - 49: iI1IiiIIIiIi + oO0OooOoO / III1IiiI - O00OOOoOoo0O % O00OOOoOoo0O + o0Oo
def o0OO0oO0Oo0 ( ) :
 iiI = xbmc . translatePath ( os . path . join ( 'special://home' , 'addons' ) )
 OOooO0OOoo = xbmcgui . DialogProgress ( )
 OOooO0OOoo . create ( "Gotham Addon Fix" , "Please wait whilst your addons" , '' , 'are being made Gotham compatible.' )
 if 73 - 73: oO0OooOoO . O00OOOoOoo0O . II11iIiIIIiI
 for o000o0o00Oo in glob . glob ( os . path . join ( iiI , '*.*' ) ) :
  if 89 - 89: o0Oo / i1Iii1i1I / OoooooooOO - i11iIiiIii + o0Oo
  for file in glob . glob ( os . path . join ( o000o0o00Oo , '*.*' ) ) :
   if 64 - 64: i11iIiiIii + i1IIi % O0 . o00O0OoO
   if 'addon.xml' in file :
    OOooO0OOoo . update ( 0 , "Fixing" , file , 'Please Wait' )
    i11IiI1iiI11 = open ( file ) . read ( )
    OoOo00o00 = i11IiI1iiI11 . replace ( 'addon="xbmc.python" version="1.0"' , 'addon="xbmc.python" version="2.1.0"' ) . replace ( 'addon="xbmc.python" version="2.0"' , 'addon="xbmc.python" version="2.1.0"' )
    Oo0O0O000 = open ( file , mode = 'w' )
    Oo0O0O000 . write ( str ( OoOo00o00 ) )
    Oo0O0O000 . close ( )
    if 64 - 64: o0oOo0 / i1IIi % i1Iii1i1I
 iI111I11I1I1 = xbmcgui . Dialog ( )
 iI111I11I1I1 . ok ( "Your addons have now been made compatible" , "If you still find you have addons that aren't working please run the addon so it throws up a script error, upload a log and post details on the relevant support forum." )
 if 84 - 84: O00OOOoOoo0O - II11iIiIIIiI . o0oOo0 . i11111IIIII - II11iIiIIIiI
 if 99 - 99: Iiii1i1
def o0I1IiiiiI1i1I ( ) :
 iI111I11I1I1 = xbmcgui . Dialog ( )
 I11i1I1 = xbmcgui . Dialog ( ) . yesno ( 'Convert Addons To Gotham' , 'This will edit your addon.xml files so they show as Gotham compatible. It\'s doubtful this will have any effect on whether or not they work but it will get rid of the annoying incompatible pop-up message. Do you wish to continue?' )
 if 68 - 68: i11iIiiIii + ii1ii11IIIiiI
 if I11i1I1 == 1 :
  o0OO0oO0Oo0 ( )
  if 13 - 13: o0oOo0 - o0Oo
  if 23 - 23: o0Oo
def i1IIiI1iII ( url ) :
 if i1IiI1I11 . getSetting ( 'adult' ) == 'true' :
  iIiII1 = 'yes'
  if 45 - 45: i1IIi % iiIi1i11 % oO0OooOoO
 else :
  iIiII1 = 'no'
  if 4 - 4: III1IiiI * o0Oo - o0oOo0 / oO0OooOoO + iiIi1i11 / i11iIiiIii
 if url == 'popular' :
  oO0o0O = 'http://noobsandnerds.com/TI/AddonPortal/popular.php?adult=%s' % ( iIiII1 )
 elif url == 'latest' :
  oO0o0O = 'http://noobsandnerds.com/TI/AddonPortal/latest.php?adult=%s' % ( iIiII1 )
 elif url != 'popular' and url != 'latest' :
  oO0o0O = 'http://noobsandnerds.com/TI/AddonPortal/sortby_bak.php?sortx=name&user=%s&adult=%s&%s' % ( i1i1II , iIiII1 , url )
  if not "desc" in url :
   url = url + '&desc='
  if not "genre" in url :
   url = url + '&genre='
 print "URL: " + oO0o0O
 if 50 - 50: iIii1I11I1II1 * III1IiiI
 OOOoOO = I11IIIi ( oO0o0O , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 85 - 85: i1IIi
 if 100 - 100: OoooooooOO / o00O0OoO % ii1ii11IIIiiI + iI1IiiIIIiIi
 oooo0OOo = re . compile ( 'name="(.+?)"  <br> downloads="(.+?)"  <br> icon="(.+?)"  <br> broken="(.+?)"  <br> UID="(.+?)"  <br>' , re . DOTALL ) . findall ( OOOoOO )
 if oooo0OOo == [ ] :
  if 42 - 42: II11iIiIIIiI / i11111IIIII . iI1IiiIIIiIi * o0Oo
  oooo0OOo = re . compile ( 'name="(.+?)" <br> downloads="(.+?)" <br> icon="(.+?)" <br> broken="(.+?)" <br> UID="(.+?)" <br>' , re . DOTALL ) . findall ( OOOoOO )
  if 54 - 54: O00OOOoOoo0O * i1Iii1i1I + ii1ii11IIIiiI
 if oooo0OOo != [ ] and url != 'popular' and url != 'latest' :
  oOOOo ( oO0o0O , 'addons' )
  if 91 - 91: o0oOo0 - III1IiiI + III1IiiI
  for i1iIIIi1i , IiiIiI1Ii1i , iI1IIIii , ii11i , II11iiIIiI11I in oooo0OOo :
   if 56 - 56: OoooooooOO * i11111IIIII + Iiii1i1 / o0Oo * i11111IIIII / i1IIi
   if ii11i == '0' :
    oO00oOOoooO ( 'addonfolder' , i1iIIIi1i + '[COLOR=lime] [' + IiiIiI1Ii1i + ' downloads][/COLOR]' , II11iiIIiI11I , 'addon_final_menu' , iI1IIIii , '' , '' )
    if 47 - 47: o0oOo0 - iI1IiiIIIiIi
   if ii11i == '1' :
    oO00oOOoooO ( 'addonfolder' , '[COLOR=red]' + i1iIIIi1i + ' [REPORTED AS BROKEN][/COLOR]' , II11iiIIiI11I , 'addon_final_menu' , iI1IIIii , '' , '' )
    if 98 - 98: III1IiiI . Iiii1i1 / O00OOOoOoo0O . o0oOo0
 elif oooo0OOo != [ ] and ( url == 'popular' or url == 'latest' ) :
  for i1iIIIi1i , IiiIiI1Ii1i , iI1IIIii , ii11i , II11iiIIiI11I in oooo0OOo :
   if 1 - 1: iiIi1i11
   if ii11i == '0' :
    oO00oOOoooO ( 'addonfolder' , i1iIIIi1i + '[COLOR=lime] [' + IiiIiI1Ii1i + ' downloads][/COLOR]' , II11iiIIiI11I , 'addon_final_menu' , iI1IIIii , '' , '' )
    if 87 - 87: O0 * oO0OooOoO + iIii1I11I1II1 % III1IiiI % i11iIiiIii - O00OOOoOoo0O
   if ii11i == '1' :
    oO00oOOoooO ( 'addonfolder' , '[COLOR=red]' + i1iIIIi1i + ' [REPORTED AS BROKEN][/COLOR]' , II11iiIIiI11I , 'addon_final_menu' , iI1IIIii , '' , '' )
    if 73 - 73: i1Iii1i1I + iI1IiiIIIiIi
 elif '&redirect' in url :
  iI1iii = iI111I11I1I1 . yesno ( 'No Content Found' , 'This add-on cannot be found on the Add-on Portal.' , '' , 'Would you like to remove this item from your setup?' )
  if 37 - 37: III1IiiI - iIii1I11I1II1 + oO0OooOoO . iI1IiiIIIiIi % iIii1I11I1II1
  if iI1iii == 1 :
   print "### Need to add remove function to code still"
   if 17 - 17: Iiii1i1 + i1IIi % O0
 else :
  iI111I11I1I1 . ok ( 'No Content Found' , 'Sorry no content can be found that matches' , 'your search criteria.' , '' )
  if 65 - 65: i11111IIIII
  if 50 - 50: oO0OooOoO / ii1ii11IIIiiI
def OO0oooOO ( url ) :
 if zip == '' :
  iI111I11I1I1 . ok ( 'Storage/Download Folder Not Set' , 'You have not set your backup storage folder.\nPlease update the addon settings and try again.' , '' , '' )
  i1IiI1I11 . openSettings ( sys . argv [ 0 ] )
  if 30 - 30: III1IiiI . ii1ii11IIIiiI + o00O0OoO / iIii1I11I1II1 % II11iIiIIIiI / III1IiiI
 if i1IiI1I11 . getSetting ( 'adult' ) == 'true' :
  iIiII1 = ''
  if 3 - 3: OoooO0Oo0O0 / oO0OooOoO
 else :
  iIiII1 = 'no'
  if 73 - 73: ii1ii11IIIiiI * OoooooooOO - OoooooooOO + o0Oo * II11iIiIIIiI
 if 'genre' in url :
  oO0o0O = 'http://noobsandnerds.com/TI/Community_Builds/sort_by_test.php?sortx=name&orderx=ASC&adult=%s&%s' % ( iIiII1 , url )
 else :
  oO0o0O = 'http://noobsandnerds.com/TI/Community_Builds/sort_by_test.php?sortx=name&orderx=ASC&genre=&adult=%s&%s' % ( iIiII1 , url )
 print "BUILD URL: " + oO0o0O
 OOOoOO = I11IIIi ( oO0o0O , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 87 - 87: oOO00Oo / i11111IIIII / i11iIiiIii
 oooo0OOo = re . compile ( 'name="(.+?)"  <br> id="(.+?)"  <br> Thumbnail="(.+?)"  <br> Fanart="(.+?)"  <br> downloads="(.+?)"  <br> <br>' , re . DOTALL ) . findall ( OOOoOO )
 if oooo0OOo == [ ] :
  if 95 - 95: i1IIi / iI1IiiIIIiIi / iI1IiiIIIiIi
  oooo0OOo = re . compile ( 'name="(.+?)" <br> id="(.+?)" <br> Thumbnail="(.+?)" <br> Fanart="(.+?)" <br> downloads="(.+?)" <br> <br>' , re . DOTALL ) . findall ( OOOoOO )
 oOOOo ( url , 'communitybuilds' )
 if 65 - 65: Iiii1i1 + i1Iii1i1I * i1Iii1i1I
 for i1iIIIi1i , id , OoOOiI , O0oOoo00Oo0O , IiiIiI1Ii1i in oooo0OOo :
  o0OIiII ( i1iIIIi1i + '[COLOR=lime] (' + IiiIiI1Ii1i + ' downloads)[/COLOR]' , id + url , 'community_menu' , OoOOiI , O0oOoo00Oo0O , id , '' , '' , '' , '' )
  if 5 - 5: O0 - i1Iii1i1I / Iiii1i1 . oOO00Oo
 if 'id=1' in url : oO0o0O = Oo0o0000o0o0
 if 'id=2' in url : oO0o0O = oO0o0o0ooO0oO
 if 'id=3' in url : oO0o0O = oO
 if 'id=4' in url : oO0o0O = oooOOOOO
 if 'id=5' in url : oO0o0O = i1iIIi1
 if 7 - 7: OoooO0Oo0O0 - O00OOOoOoo0O
 OOOoOO = I11IIIi ( oO0o0O , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 oooo0OOo = re . compile ( 'name="(.+?)".+?rl="(.+?)".+?mg="(.+?)".+?anart="(.+?)".+?escription="(.+?)"' ) . findall ( OOOoOO )
 if 54 - 54: III1IiiI / iIii1I11I1II1 / OoooooooOO . i1IIi - O00OOOoOoo0O
 for i1iIIIi1i , url , iii1I1Iii , o00oo0 , OOo00 in oooo0OOo :
  if not 'viewport' in i1iIIIi1i :
   oO00oOOoooO ( 'addon' , i1iIIIi1i , url , 'restore_local_CB' , iii1I1Iii , o00oo0 , OOo00 , '' )
   if 57 - 57: iIii1I11I1II1 * iI1IiiIIIiIi * i1Iii1i1I / III1IiiI
   if 46 - 46: iI1IiiIIIiIi
def oOO0 ( url ) :
 oO0o0O = 'http://noobsandnerds.com/TI/HardwarePortal/sortby.php?sortx=Added&orderx=DESC&%s' % ( url )
 OOOoOO = I11IIIi ( oO0o0O , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 30 - 30: oO0OooOoO / o0Oo - o0oOo0 + O00OOOoOoo0O * o0oOo0 / O00OOOoOoo0O
 oooo0OOo = re . compile ( 'name="(.+?)"  <br> id="(.+?)"  <br> thumb="(.+?)"  <br><br>' , re . DOTALL ) . findall ( OOOoOO )
 if oooo0OOo == [ ] :
  if 17 - 17: ii1ii11IIIiiI
  oooo0OOo = re . compile ( 'name="(.+?)" <br> id="(.+?)" <br> thumb="(.+?)" <br><br>' , re . DOTALL ) . findall ( OOOoOO )
 oOOOo ( oO0o0O , 'hardware' )
 if 31 - 31: III1IiiI + OoooooooOO - iI1IiiIIIiIi % oOO00Oo / oOO00Oo / iIii1I11I1II1
 for i1iIIIi1i , id , Iii111Ii in oooo0OOo :
  oO00oOOoooO ( 'folder2' , i1iIIIi1i , id , 'hardware_final_menu' , Iii111Ii , '' , '' )
  if 96 - 96: iI1IiiIIIiIi - oO0OooOoO % O00OOOoOoo0O * o0Oo * o0Oo . II11iIiIIIiI
  if 75 - 75: II11iIiIIIiI + iI1IiiIIIiIi + ii1ii11IIIiiI
def o00o0o0oOo0 ( url ) :
 oO0o0O = 'http://noobsandnerds.com/TI/LatestNews/sortby.php?sortx=item_date&orderx=DESC&%s' % ( url )
 OOOoOO = I11IIIi ( oO0o0O , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 33 - 33: i1IIi / i11111IIIII - i1IIi . o0Oo
 oooo0OOo = re . compile ( 'name="(.+?)"  <br> date="(.+?)"  <br> source="(.+?)"  <br> id="(.+?)"  <br><br>' , re . DOTALL ) . findall ( OOOoOO )
 if oooo0OOo == [ ] :
  if 48 - 48: o0oOo0 + iiIi1i11 . Iiii1i1 % oO0OooOoO + III1IiiI
  oooo0OOo = re . compile ( 'name="(.+?)" <br> date="(.+?)" <br> source="(.+?)" <br> id="(.+?)" <br><br>' , re . DOTALL ) . findall ( OOOoOO )
 for i1iIIIi1i , iiI1ii1i1 , iiii1iIii1i , id in oooo0OOo :
  if 79 - 79: i11111IIIII / ii1ii11IIIiiI * OoooooooOO * O00OOOoOoo0O + o0Oo
  if "OpenELEC" in iiii1iIii1i :
   oO00oOOoooO ( '' , i1iIIIi1i + '  (' + iiI1ii1i1 + ')' , id , 'news_menu' , '' , '' , '' )
   if 68 - 68: o00O0OoO / iIii1I11I1II1 . II11iIiIIIiI + i11iIiiIii + oOO00Oo
  if "Official" in iiii1iIii1i :
   oO00oOOoooO ( '' , i1iIIIi1i + '  (' + iiI1ii1i1 + ')' , id , 'news_menu' , '' , '' , '' )
   if 92 - 92: ii1ii11IIIiiI . oOO00Oo . iI1IiiIIIiIi % O00OOOoOoo0O
  if "Raspbmc" in iiii1iIii1i :
   oO00oOOoooO ( '' , i1iIIIi1i + '  (' + iiI1ii1i1 + ')' , id , 'news_menu' , '' , '' , '' )
   if 58 - 58: OoooO0Oo0O0 % iI1IiiIIIiIi * iI1IiiIIIiIi - i1Iii1i1I
  if "XBMC4Xbox" in iiii1iIii1i :
   oO00oOOoooO ( '' , i1iIIIi1i + '  (' + iiI1ii1i1 + ')' , id , 'news_menu' , '' , '' , '' )
   if 9 - 9: o0oOo0 - iI1IiiIIIiIi % oO0OooOoO + i11111IIIII + iiIi1i11 % O0
  if "noobsandnerds" in iiii1iIii1i :
   oO00oOOoooO ( '' , i1iIIIi1i + '  (' + iiI1ii1i1 + ')' , id , 'news_menu' , '' , '' , '' )
   if 65 - 65: iiIi1i11 - ii1ii11IIIiiI % i11iIiiIii
   if 58 - 58: i1Iii1i1I
def iii1iII ( url ) :
 if not "name" in url :
  url = url + '&name='
 if not "desc" in url :
  url = url + '&desc='
 if not "hardware" in url :
  url = url + '&hardware='
 if not "platform" in url :
  url = url + '&platform='
 if not "thirdparty" in url :
  url = url + '&thirdparty='
 if not "type" in url :
  url = url + '&type='
 oO0o0O = 'http://noobsandnerds.com/TI/TutorialPortal/sortby.php?sortx=Name&orderx=ASC&%s' % ( url )
 OOOoOO = I11IIIi ( oO0o0O , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 if 77 - 77: i11111IIIII + OoooooooOO * i1IIi % OoooooooOO
 oooo0OOo = re . compile ( 'name="(.+?)"  <br> about="(.+?)"  <br> id="(.+?)"  <br><br>' , re . DOTALL ) . findall ( OOOoOO )
 if oooo0OOo == [ ] :
  if 3 - 3: iI1IiiIIIiIi * o0oOo0 - o0Oo / i1IIi
  oooo0OOo = re . compile ( 'name="(.+?)" <br> about="(.+?)" <br> id="(.+?)" <br><br>' , re . DOTALL ) . findall ( OOOoOO )
 oOOOo ( oO0o0O , 'tutorials' )
 if 21 - 21: oO0OooOoO + Iiii1i1
 for i1iIIIi1i , i1Io00OOOo , id in oooo0OOo :
  oO00oOOoooO ( 'folder' , i1iIIIi1i , id , 'tutorial_final_menu' , '' , '' , i1Io00OOOo )
  if 39 - 39: OoooooooOO . o00O0OoO * iI1IiiIIIiIi . O00OOOoOoo0O . III1IiiI
  if 75 - 75: o0oOo0 / iI1IiiIIIiIi
def iIioO00O0o0oOOO ( url , local ) :
 i1iI1i ( )
 iI1iii = xbmcgui . Dialog ( ) . yesno ( i1iIIIi1i , 'This will over-write your existing guisettings.xml.' , 'Are you sure this is the build you have installed?' , '' , nolabel = 'No, Cancel' , yeslabel = 'Yes, Fix' )
 if 96 - 96: o0Oo - iIii1I11I1II1
 if iI1iii == 1 :
  Ii1o0OOOoo0000 ( url , local )
  if 19 - 19: OoooooooOO . o0Oo + Iiii1i1 - o0Oo / o0Oo % i11111IIIII
def IiIIIii1i1iI ( path ) :
 if 99 - 99: iIii1I11I1II1 - III1IiiI - O00OOOoOoo0O / iIii1I11I1II1 * II11iIiIIIiI - III1IiiI
 IiIiiI11i1Ii = open ( I11i1 , mode = 'r' )
 i11ii1iI = IiIiiI11i1Ii . read ( )
 IiIiiI11i1Ii . close ( )
 if 72 - 72: i11111IIIII % i1IIi / iIii1I11I1II1
 ooIii = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( i11ii1iI )
 o0OO00oOOO0o0 = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( i11ii1iI )
 iiii = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( i11ii1iI )
 oOOOOOoOOoo0 = ooIii [ 0 ] if ( len ( ooIii ) > 0 ) else ''
 oo0OOO0OOoOO = o0OO00oOOO0o0 [ 0 ] if ( len ( o0OO00oOOO0o0 ) > 0 ) else ''
 oOoO = iiii [ 0 ] if ( len ( iiii ) > 0 ) else ''
 if 30 - 30: ii1ii11IIIiiI / O0 * oOO00Oo * Iiii1i1 + OoooooooOO * i1Iii1i1I
 if 23 - 23: o00O0OoO
 oOOoO0oO0oo0O = open ( path , mode = 'r' )
 oO00Oo = oOOoO0oO0oo0O . read ( )
 oOOoO0oO0oo0O . close ( )
 if 36 - 36: i11111IIIII . i1Iii1i1I - i1IIi + Iiii1i1
 ooOOo0O0o00o00 = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( oO00Oo )
 o0o = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( oO00Oo )
 I1I1ii111i1IIi1i = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( oO00Oo )
 oo00oO00oooo = ooOOo0O0o00o00 [ 0 ] if ( len ( ooOOo0O0o00o00 ) > 0 ) else ''
 ooo0Oo00O = o0o [ 0 ] if ( len ( o0o ) > 0 ) else ''
 I1iII1 = I1I1ii111i1IIi1i [ 0 ] if ( len ( I1I1ii111i1IIi1i ) > 0 ) else ''
 IIiIi11i1i = i11ii1iI . replace ( oOOOOOoOOoo0 , oo00oO00oooo ) . replace ( oOoO , I1iII1 ) . replace ( oo0OOO0OOoOO , ooo0Oo00O )
 if 70 - 70: i1IIi % o0oOo0 . OoooO0Oo0O0 - i11111IIIII + iiIi1i11
 print "### Attempting to create new guisettings at: " + path
 i1I = open ( path , mode = 'w+' )
 i1I . write ( str ( IIiIi11i1i ) )
 i1I . close ( )
 if 84 - 84: III1IiiI + oO0OooOoO * oO0OooOoO % oOO00Oo / i1Iii1i1I + o0oOo0
 if 9 - 9: i1Iii1i1I
def iIi11I1II ( src , dst , clean ) :
 for oO00Oo0O0 , ooooOoO0O , IIII in os . walk ( src ) :
  o0O00O = oO00Oo0O0 . replace ( src , dst , 1 )
  if not os . path . exists ( o0O00O ) :
   os . makedirs ( o0O00O )
  for OO00oOo0o00 in IIII :
   O0O0o = os . path . join ( oO00Oo0O0 , OO00oOo0o00 )
   i1i1i1Ii111II = os . path . join ( o0O00O , OO00oOo0o00 )
   if os . path . exists ( i1i1i1Ii111II ) :
    os . remove ( i1i1i1Ii111II )
   shutil . move ( O0O0o , o0O00O )
 if clean == 1 :
  try :
   shutil . rmtree ( src )
  except :
   pass
   if 74 - 74: i1Iii1i1I / o00O0OoO . o0Oo - OoooooooOO + oO0OooOoO + o00O0OoO
   if 36 - 36: iI1IiiIIIiIi * o0Oo * OoooO0Oo0O0 . o00O0OoO * OoooO0Oo0O0
def Ii1o0OOOoo0000 ( url , local ) :
 O0ooO0 = False
 iII1i111iI = 0
 IiI1iI1 = 1
 if 99 - 99: III1IiiI / i1IIi
 if os . path . exists ( Oo0OoO00oOO0o ) :
  os . remove ( Oo0OoO00oOO0o )
  if 2 - 2: III1IiiI . i1Iii1i1I
 if os . path . exists ( iIi1ii1I1 ) :
  os . remove ( iIi1ii1I1 )
  if 42 - 42: ii1ii11IIIiiI - OoooO0Oo0O0 * i11111IIIII - o0oOo0
 if os . path . exists ( I1IIIii ) :
  os . remove ( I1IIIii )
  if 75 - 75: i1Iii1i1I * II11iIiIIIiI / Iiii1i1 * II11iIiIIIiI / o0oOo0
 if not os . path . exists ( OOO00O ) :
  os . makedirs ( OOO00O )
  if 14 - 14: i1IIi * iIii1I11I1II1 - iI1IiiIIIiIi * O00OOOoOoo0O - i1Iii1i1I / III1IiiI
  if 73 - 73: OoooO0Oo0O0 - O00OOOoOoo0O * O0 - O00OOOoOoo0O - ii1ii11IIIiiI
 try :
  shutil . copyfile ( I11i1 , Oo0OoO00oOO0o )
  if 96 - 96: OoooO0Oo0O0 - O0
 except :
  print "No guisettings found, most likely due to a previously failed attempt at install"
  if 35 - 35: iiIi1i11 . o00O0OoO . Iiii1i1 - o00O0OoO % o00O0OoO + Iiii1i1
 if local != 1 :
  oO0oO00 = os . path . join ( OOO00 , 'guifix.zip' )
  if 15 - 15: o0Oo % III1IiiI . II11iIiIIIiI % iIii1I11I1II1
  try :
   OOooO0OOoo . create ( 'Downloading Skin Fix' , '' , '' , '' )
   downloader . download ( url , oO0oO00 )
  except :
   print "Failed to download guisettings"
 else :
  oO0oO00 = xbmc . translatePath ( url )
 if iiIIIII1i1iI == 'true' :
  print "### lib=" + oO0oO00
  if 98 - 98: o00O0OoO - i1IIi % iI1IiiIIIiIi - OoooooooOO
 Iii1I1I = str ( os . path . getsize ( oO0oO00 ) )
 OOooO0OOoo . create ( "Installing Skin Fix" , "Checking " , '' , 'Please Wait' )
 if 41 - 41: o0Oo . II11iIiIIIiI . i11111IIIII % OoooooooOO + ii1ii11IIIiiI
 extract . all ( oO0oO00 , OOO00O )
 if 23 - 23: o0Oo - oOO00Oo % III1IiiI . O0 * OoooooooOO + o0oOo0
 if os . path . exists ( os . path . join ( OOO00O , 'script.skinshortcuts' ) ) :
  try :
   shutil . rmtree ( os . path . join ( O0OoO000O0OO , 'script.skinshortcuts' ) )
  except :
   pass
  os . rename ( os . path . join ( OOO00O , 'script.skinshortcuts' ) , os . path . join ( O0OoO000O0OO , 'script.skinshortcuts' ) )
  if 53 - 53: II11iIiIIIiI
 if os . path . exists ( os . path . join ( OOO00O , 'addon_data' ) ) :
  iIi11I1II ( os . path . join ( OOO00O , 'addon_data' ) , oOOoO0 , 1 )
  if 3 - 3: i11111IIIII - OoooooooOO * OoooooooOO - o0Oo / Iiii1i1 * OoooO0Oo0O0
 if local != 'library' or local != 'updatelibrary' or local != 'fresh' :
  if 58 - 58: i11111IIIII % iIii1I11I1II1 / i11iIiiIii % oOO00Oo . Iiii1i1 * i1Iii1i1I
  try :
   OOOoO00 = open ( os . path . join ( OOO00O , 'profiles.xml' ) , mode = 'r' )
   iiI1II = OOOoO00 . read ( )
   OOOoO00 . close ( )
   if 100 - 100: Iiii1i1 * II11iIiIIIiI - iIii1I11I1II1 + o0Oo - i1IIi + i1Iii1i1I
   if os . path . exists ( os . path . join ( OOO00O , 'profiles.xml' ) ) :
    if 19 - 19: Iiii1i1 + i1Iii1i1I * Iiii1i1
    if local == None :
     iI1iii = xbmcgui . Dialog ( ) . yesno ( "KODI PROFILES DETECTED" , 'This build has profiles included (standard Kodi profiles, not CP Profiles), would you like to overwrite your existing profiles or keep the ones you have?' , '' , '' , nolabel = 'Keep my profiles' , yeslabel = 'Use new profiles' )
     if 71 - 71: oOO00Oo . o0Oo - OoooO0Oo0O0 - II11iIiIIIiI - i1IIi - o0Oo
    if local != None :
     iI1iii = 1
     if 45 - 45: ii1ii11IIIiiI * ii1ii11IIIiiI
    if iI1iii == 1 :
     i1I = open ( I1IIIii , mode = 'w' )
     time . sleep ( 1 )
     i1I . write ( iiI1II )
     time . sleep ( 1 )
     i1I . close ( )
     IiI1iI1 = 0
     if 9 - 9: iIii1I11I1II1
  except :
   print "no profiles.xml file"
   if 57 - 57: o0oOo0 / iI1IiiIIIiIi % oOO00Oo % i11iIiiIii
   if 95 - 95: Iiii1i1 - oOO00Oo
 try :
  os . rename ( os . path . join ( OOO00O , 'guisettings.xml' ) , iIi1ii1I1 )
 except :
  iI111I11I1I1 . ok ( 'FILE MISSING' , 'No guisettings.xml could be found in your zip file. Please double check this file is a valid zip and hasn\'t become corrupt.' )
 if local != 'fresh' :
  Oooo0o00 = iI111I11I1I1 . yesno ( "Keep Kodi Settings?" , 'Do you want to keep your existing KODI settings (weather, screen calibration, PVR etc.) or wipe and install the ones in this build?' , nolabel = 'Keep my settings' , yeslabel = 'Replace my settings' )
  if 74 - 74: II11iIiIIIiI / Iiii1i1 % Iiii1i1 . i11111IIIII
 if local == 'fresh' :
  Oooo0o00 = 1
  if 72 - 72: i1IIi
 if Oooo0o00 == 1 :
  if 21 - 21: Iiii1i1 . iiIi1i11 / i11iIiiIii * i1IIi
  if os . path . exists ( I11i1 ) :
   if 82 - 82: o0oOo0 * II11iIiIIIiI % i11iIiiIii * i1IIi . iiIi1i11
   try :
    print "### Attempting to remove guisettings"
    os . remove ( I11i1 )
    O0ooO0 = True
    if 89 - 89: i11111IIIII - i1IIi - i11111IIIII
   except :
    print "### Problem removing guisettings"
    O0ooO0 = False
    if 74 - 74: ii1ii11IIIiiI % ii1ii11IIIiiI
   try :
    print "### Attempting to replace guisettings with new"
    os . rename ( iIi1ii1I1 , I11i1 )
    O0ooO0 = True
    if 28 - 28: O00OOOoOoo0O % III1IiiI - iiIi1i11 + iiIi1i11 + III1IiiI / iIii1I11I1II1
   except :
    print "### Failed to replace guisettings with new"
    O0ooO0 = False
    if 91 - 91: o0Oo / oO0OooOoO * iiIi1i11
    if 94 - 94: oO0OooOoO - iIii1I11I1II1 - iIii1I11I1II1
 if Oooo0o00 == 0 :
  IiIiiI11i1Ii = open ( Oo0OoO00oOO0o , mode = 'r' )
  i11ii1iI = IiIiiI11i1Ii . read ( )
  IiIiiI11i1Ii . close ( )
  if 83 - 83: OoooO0Oo0O0 * iIii1I11I1II1 + O00OOOoOoo0O * i1IIi . OoooooooOO % iI1IiiIIIiIi
  ooIii = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( i11ii1iI )
  o0OO00oOOO0o0 = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( i11ii1iI )
  iiii = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( i11ii1iI )
  oOOOOOoOOoo0 = ooIii [ 0 ] if ( len ( ooIii ) > 0 ) else ''
  oo0OOO0OOoOO = o0OO00oOOO0o0 [ 0 ] if ( len ( o0OO00oOOO0o0 ) > 0 ) else ''
  oOoO = iiii [ 0 ] if ( len ( iiii ) > 0 ) else ''
  if 81 - 81: ii1ii11IIIiiI - iIii1I11I1II1
  if 60 - 60: Iiii1i1
  oOOoO0oO0oo0O = open ( iIi1ii1I1 , mode = 'r' )
  oO00Oo = oOOoO0oO0oo0O . read ( )
  oOOoO0oO0oo0O . close ( )
  if 77 - 77: o0Oo / OoooO0Oo0O0
  ooOOo0O0o00o00 = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( oO00Oo )
  o0o = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( oO00Oo )
  I1I1ii111i1IIi1i = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( oO00Oo )
  oo00oO00oooo = ooOOo0O0o00o00 [ 0 ] if ( len ( ooOOo0O0o00o00 ) > 0 ) else ''
  ooo0Oo00O = o0o [ 0 ] if ( len ( o0o ) > 0 ) else ''
  I1iII1 = I1I1ii111i1IIi1i [ 0 ] if ( len ( I1I1ii111i1IIi1i ) > 0 ) else ''
  IIiIi11i1i = i11ii1iI . replace ( oOOOOOoOOoo0 , oo00oO00oooo ) . replace ( oOoO , I1iII1 ) . replace ( oo0OOO0OOoOO , ooo0Oo00O )
  if 95 - 95: Iiii1i1 * i1IIi + III1IiiI
  i1I = open ( Oo0OoO00oOO0o , mode = 'w+' )
  i1I . write ( str ( IIiIi11i1i ) )
  i1I . close ( )
  if 40 - 40: oO0OooOoO
  if 7 - 7: iiIi1i11 / ii1ii11IIIiiI
  if os . path . exists ( I11i1 ) :
   if 88 - 88: i1IIi
   try :
    os . remove ( I11i1 )
    O0ooO0 = True
    if 53 - 53: o0oOo0 . iiIi1i11 . oOO00Oo + III1IiiI
   except :
    O0ooO0 = False
    if 17 - 17: iIii1I11I1II1 + i1IIi . OoooO0Oo0O0 + iI1IiiIIIiIi % i1IIi . III1IiiI
  try :
   os . rename ( Oo0OoO00oOO0o , I11i1 )
   os . remove ( iIi1ii1I1 )
   O0ooO0 = True
   if 57 - 57: III1IiiI
  except :
   O0ooO0 = False
   if 92 - 92: oO0OooOoO - ii1ii11IIIiiI - iiIi1i11 % o0Oo - O00OOOoOoo0O * Iiii1i1
   if 16 - 16: iIii1I11I1II1 + OoooooooOO - o0oOo0 * i11111IIIII
 if O0ooO0 == True or local == None :
  if 37 - 37: i1Iii1i1I
  try :
   IiIiiI11i1Ii = open ( I11iii1Ii , mode = 'r' )
   i11ii1iI = IiIiiI11i1Ii . read ( )
   IiIiiI11i1Ii . close ( )
   if 15 - 15: oOO00Oo % ii1ii11IIIiiI / i1Iii1i1I
   II1IIIi = re . compile ( 'id="(.+?)"' ) . findall ( i11ii1iI )
   Iiii = re . compile ( 'name="(.+?)"' ) . findall ( i11ii1iI )
   O0O0OOooo = re . compile ( 'version="(.+?)"' ) . findall ( i11ii1iI )
   o0OooOoOOoO = II1IIIi [ 0 ] if ( len ( II1IIIi ) > 0 ) else ''
   oo0OoO0oOO = Iiii [ 0 ] if ( len ( Iiii ) > 0 ) else ''
   i1ii1I = O0O0OOooo [ 0 ] if ( len ( O0O0OOooo ) > 0 ) else ''
   if 87 - 87: Iiii1i1
   i1I = open ( I1IIiiIiii , mode = 'w+' )
   i1I . write ( 'id="' + str ( o0OooOoOOoO ) + '"\nname="' + oo0OoO0oOO + '"\nversion="' + i1ii1I + '"\ngui="' + Iii1I1I + '"' )
   i1I . close ( )
   if 32 - 32: o00O0OoO - iiIi1i11 * O0 % i11111IIIII . i11111IIIII . o0Oo
   IiIiiI11i1Ii = open ( O000OO0 , mode = 'r' )
   i11ii1iI = IiIiiI11i1Ii . read ( )
   IiIiiI11i1Ii . close ( )
   if 91 - 91: i1IIi . i1Iii1i1I
   i1Ii1 = re . compile ( 'version="(.+?)"' ) . findall ( i11ii1iI )
   I1I1IiI1 = i1Ii1 [ 0 ] if ( len ( i1Ii1 ) > 0 ) else ''
   IIiIi11i1i = i11ii1iI . replace ( I1I1IiI1 , i1ii1I )
   if 37 - 37: i1Iii1i1I - o00O0OoO + iIii1I11I1II1 / Iiii1i1 - ii1ii11IIIiiI . oOO00Oo
   i1I = open ( O000OO0 , mode = 'w' )
   i1I . write ( str ( IIiIi11i1i ) )
   i1I . close ( )
   os . remove ( I11iii1Ii )
   if 62 - 62: OoooO0Oo0O0
  except :
   i1I = open ( I1IIiiIiii , mode = 'w+' )
   i1I . write ( 'id="None"\nname="Unknown"\nversion="Unknown"\ngui="' + Iii1I1I + '"' )
   i1I . close ( )
   if 47 - 47: Iiii1i1 % iiIi1i11 * ii1ii11IIIiiI . iIii1I11I1II1 % II11iIiIIIiI + OoooooooOO
   if 2 - 2: Iiii1i1 % OoooooooOO - o0oOo0 * OoooO0Oo0O0 * i11111IIIII
 if os . path . exists ( os . path . join ( OOO00O , 'profiles.xml' ) ) :
  os . remove ( os . path . join ( OOO00O , 'profiles.xml' ) )
  time . sleep ( 1 )
  if 99 - 99: iIii1I11I1II1 . II11iIiIIIiI / o0oOo0 . iiIi1i11 % o0Oo * o00O0OoO
 if os . path . exists ( OOO00O ) :
  os . removedirs ( OOO00O )
  if 95 - 95: III1IiiI
 oOo0ooO0O0oo = xbmc . translatePath ( os . path . join ( O0OoO000O0OO , o0OO00 , 'notification.txt' ) )
 if 31 - 31: i11iIiiIii + iI1IiiIIIiIi % O00OOOoOoo0O
 if os . path . exists ( oOo0ooO0O0oo ) :
  os . remove ( oOo0ooO0O0oo )
  if 9 - 9: o0oOo0 . o00O0OoO - II11iIiIIIiI . Iiii1i1
 if O0ooO0 == True :
  iII11 ( )
  O00OO00OOOoO ( )
  if 39 - 39: iiIi1i11
  if 70 - 70: i11111IIIII % ii1ii11IIIiiI % o0Oo
def OOo00oOo ( url ) :
 oOo0 = 'http://noobsandnerds.com/TI/HardwarePortal/hardwaredetails.php?id=%s' % ( url )
 OOOoOO = I11IIIi ( oOo0 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 OOo0o0O0O = re . compile ( 'name="(.+?)"' ) . findall ( OOOoOO )
 o0ooOo000oo = re . compile ( 'manufacturer="(.+?)"' ) . findall ( OOOoOO )
 oO0Ooooo000 = re . compile ( 'video_guide1="(.+?)"' ) . findall ( OOOoOO )
 Iii1Iiii = re . compile ( 'video_guide2="(.+?)"' ) . findall ( OOOoOO )
 i1i1Ii1IiIII = re . compile ( 'video_guide3="(.+?)"' ) . findall ( OOOoOO )
 I1IIii11 = re . compile ( 'video_guide4="(.+?)"' ) . findall ( OOOoOO )
 I1I1 = re . compile ( 'video_guide5="(.+?)"' ) . findall ( OOOoOO )
 O0OOO0ooO00o = re . compile ( 'video_label1="(.+?)"' ) . findall ( OOOoOO )
 I1iii1 = re . compile ( 'video_label2="(.+?)"' ) . findall ( OOOoOO )
 iIiiiIIiii = re . compile ( 'video_label3="(.+?)"' ) . findall ( OOOoOO )
 OO0 = re . compile ( 'video_label4="(.+?)"' ) . findall ( OOOoOO )
 Oo00Oo = re . compile ( 'video_label5="(.+?)"' ) . findall ( OOOoOO )
 OoO0O00oo = re . compile ( 'shops="(.+?)"' ) . findall ( OOOoOO )
 iI1iI1IiIIiI = re . compile ( 'description="(.+?)"' ) . findall ( OOOoOO )
 ooo0o0oooo = re . compile ( 'screenshot1="(.+?)"' ) . findall ( OOOoOO )
 o0OoIiiiiiiI111i = re . compile ( 'screenshot2="(.+?)"' ) . findall ( OOOoOO )
 iiIIIIiI11II1 = re . compile ( 'screenshot3="(.+?)"' ) . findall ( OOOoOO )
 IiI1i11i1iI = re . compile ( 'screenshot4="(.+?)"' ) . findall ( OOOoOO )
 o0oo0O0OO0 = re . compile ( 'screenshot5="(.+?)"' ) . findall ( OOOoOO )
 IIiI = re . compile ( 'screenshot6="(.+?)"' ) . findall ( OOOoOO )
 i11I1Ii1Iiii1 = re . compile ( 'screenshot7="(.+?)"' ) . findall ( OOOoOO )
 o0oooOoOoOo = re . compile ( 'screenshot8="(.+?)"' ) . findall ( OOOoOO )
 OO0O = re . compile ( 'screenshot9="(.+?)"' ) . findall ( OOOoOO )
 oo0ooOoo00Ooo = re . compile ( 'screenshot10="(.+?)"' ) . findall ( OOOoOO )
 IIiii111I1 = re . compile ( 'screenshot11="(.+?)"' ) . findall ( OOOoOO )
 iiii1i1 = re . compile ( 'screenshot12="(.+?)"' ) . findall ( OOOoOO )
 OOooooO0 = re . compile ( 'screenshot13="(.+?)"' ) . findall ( OOOoOO )
 I1II = re . compile ( 'screenshot14="(.+?)"' ) . findall ( OOOoOO )
 I1Ii11iI11ii = re . compile ( 'added="(.+?)"' ) . findall ( OOOoOO )
 iiI11i1II = re . compile ( 'platform="(.+?)"' ) . findall ( OOOoOO )
 oOo0ii1II = re . compile ( 'chipset="(.+?)"' ) . findall ( OOOoOO )
 OOo00o0o0O0oo = re . compile ( 'official_guide="(.+?)"' ) . findall ( OOOoOO )
 i1iI1iIII = re . compile ( 'official_preview="(.+?)"' ) . findall ( OOOoOO )
 i1ii1i1Ii11 = re . compile ( 'thumbnail="(.+?)"' ) . findall ( OOOoOO )
 oo0Oo = re . compile ( 'stock_rom="(.+?)"' ) . findall ( OOOoOO )
 I1IiIIIIi1iiI = re . compile ( 'CPU="(.+?)"' ) . findall ( OOOoOO )
 O0ii = re . compile ( 'GPU="(.+?)"' ) . findall ( OOOoOO )
 O00O = re . compile ( 'RAM="(.+?)"' ) . findall ( OOOoOO )
 IIIIIi1 = re . compile ( 'flash="(.+?)"' ) . findall ( OOOoOO )
 o0oIi1iiiii = re . compile ( 'wifi="(.+?)"' ) . findall ( OOOoOO )
 O00o0 = re . compile ( 'bluetooth="(.+?)"' ) . findall ( OOOoOO )
 IIiIiIi1II = re . compile ( 'LAN="(.+?)"' ) . findall ( OOOoOO )
 oO00 = re . compile ( 'xbmc_version="(.+?)"' ) . findall ( OOOoOO )
 IiiIIiii = re . compile ( 'pros="(.+?)"' ) . findall ( OOOoOO )
 iIIIii111 = re . compile ( 'cons="(.+?)"' ) . findall ( OOOoOO )
 I1111IiII1 = re . compile ( 'library_scan="(.+?)"' ) . findall ( OOOoOO )
 IiiII = re . compile ( '4k="(.+?)"' ) . findall ( OOOoOO )
 OO00OO0 = re . compile ( '1080="(.+?)"' ) . findall ( OOOoOO )
 Ooii = re . compile ( '720="(.+?)"' ) . findall ( OOOoOO )
 i11iII1 = re . compile ( '3D="(.+?)"' ) . findall ( OOOoOO )
 oOooo = re . compile ( 'DTS="(.+?)"' ) . findall ( OOOoOO )
 i11iI1111ii1I = re . compile ( 'BootTime="(.+?)"' ) . findall ( OOOoOO )
 OoOo0 = re . compile ( 'CopyFiles="(.+?)"' ) . findall ( OOOoOO )
 iiIIii = re . compile ( 'CopyVideo="(.+?)"' ) . findall ( OOOoOO )
 O000oo00o000o = re . compile ( 'EthernetTest="(.+?)"' ) . findall ( OOOoOO )
 O0000ooO = re . compile ( 'Slideshow="(.+?)"' ) . findall ( OOOoOO )
 O00OoO = re . compile ( 'total_review="(.+?)"' ) . findall ( OOOoOO )
 I11i11 = re . compile ( 'whufclee_review="(.+?)"' ) . findall ( OOOoOO )
 oooo0OOO00O00 = re . compile ( 'CB_Premium="(.+?)"' ) . findall ( OOOoOO )
 if 15 - 15: o00O0OoO - OoooO0Oo0O0 * o0oOo0
 i1iIIIi1i = OOo0o0O0O [ 0 ] if ( len ( OOo0o0O0O ) > 0 ) else ''
 O000OO = o0ooOo000oo [ 0 ] if ( len ( o0ooOo000oo ) > 0 ) else ''
 Ii1iI111 = oO0Ooooo000 [ 0 ] if ( len ( oO0Ooooo000 ) > 0 ) else 'None'
 O0oooo00o0Oo = Iii1Iiii [ 0 ] if ( len ( Iii1Iiii ) > 0 ) else 'None'
 I1iii = i1i1Ii1IiIII [ 0 ] if ( len ( i1i1Ii1IiIII ) > 0 ) else 'None'
 oO0o0O0Ooo0o = I1IIii11 [ 0 ] if ( len ( I1IIii11 ) > 0 ) else 'None'
 i1Ii11II = I1I1 [ 0 ] if ( len ( I1I1 ) > 0 ) else 'None'
 oOo0oO = O0OOO0ooO00o [ 0 ] if ( len ( O0OOO0ooO00o ) > 0 ) else 'None'
 IIi1IIIIi = I1iii1 [ 0 ] if ( len ( I1iii1 ) > 0 ) else 'None'
 OOOoO = iIiiiIIiii [ 0 ] if ( len ( iIiiiIIiii ) > 0 ) else 'None'
 I1i = OO0 [ 0 ] if ( len ( OO0 ) > 0 ) else 'None'
 iiiI = Oo00Oo [ 0 ] if ( len ( Oo00Oo ) > 0 ) else 'None'
 o0000Oo0 = OoO0O00oo [ 0 ] if ( len ( OoO0O00oo ) > 0 ) else ''
 OOo00 = iI1iI1IiIIiI [ 0 ] if ( len ( iI1iI1IiIIiI ) > 0 ) else ''
 I1iII1iI = ooo0o0oooo [ 0 ] if ( len ( ooo0o0oooo ) > 0 ) else ''
 Iii1Iiii1iI1 = o0OoIiiiiiiI111i [ 0 ] if ( len ( o0OoIiiiiiiI111i ) > 0 ) else ''
 ooooo0oo0OO = iiIIIIiI11II1 [ 0 ] if ( len ( iiIIIIiI11II1 ) > 0 ) else ''
 IIiII = IiI1i11i1iI [ 0 ] if ( len ( IiI1i11i1iI ) > 0 ) else ''
 IIi1 = o0oo0O0OO0 [ 0 ] if ( len ( o0oo0O0OO0 ) > 0 ) else ''
 oo0OO0Oo = IIiI [ 0 ] if ( len ( IIiI ) > 0 ) else ''
 iIIi111I1i1i = i11I1Ii1Iiii1 [ 0 ] if ( len ( i11I1Ii1Iiii1 ) > 0 ) else ''
 IiIii111III1 = o0oooOoOoOo [ 0 ] if ( len ( o0oooOoOoOo ) > 0 ) else ''
 IiI1I1iii = OO0O [ 0 ] if ( len ( OO0O ) > 0 ) else ''
 i1ii111iiI11iI = oo0ooOoo00Ooo [ 0 ] if ( len ( oo0ooOoo00Ooo ) > 0 ) else ''
 Oo0OO0oO0O = IIiii111I1 [ 0 ] if ( len ( IIiii111I1 ) > 0 ) else ''
 iIIii = iiii1i1 [ 0 ] if ( len ( iiii1i1 ) > 0 ) else ''
 o000oo = OOooooO0 [ 0 ] if ( len ( OOooooO0 ) > 0 ) else ''
 O0Ooo0o = I1II [ 0 ] if ( len ( I1II ) > 0 ) else ''
 Iii1 = I1Ii11iI11ii [ 0 ] if ( len ( I1Ii11iI11ii ) > 0 ) else ''
 o0iiiI1I1iIIIi1 = iiI11i1II [ 0 ] if ( len ( iiI11i1II ) > 0 ) else ''
 iiIIi1i111i = oOo0ii1II [ 0 ] if ( len ( oOo0ii1II ) > 0 ) else ''
 iIIOoO = OOo00o0o0O0oo [ 0 ] if ( len ( OOo00o0o0O0oo ) > 0 ) else 'None'
 o0Oo00Oo = i1iI1iIII [ 0 ] if ( len ( i1iI1iIII ) > 0 ) else 'None'
 Iii111Ii = i1ii1i1Ii11 [ 0 ] if ( len ( i1ii1i1Ii11 ) > 0 ) else ''
 i11i11I = oo0Oo [ 0 ] if ( len ( oo0Oo ) > 0 ) else ''
 OoO00O0oOo = I1IiIIIIi1iiI [ 0 ] if ( len ( I1IiIIIIi1iiI ) > 0 ) else ''
 ooIII = O0ii [ 0 ] if ( len ( O0ii ) > 0 ) else ''
 i1iIii1II11 = O00O [ 0 ] if ( len ( O00O ) > 0 ) else ''
 OOOOoOOOO = IIIIIi1 [ 0 ] if ( len ( IIIIIi1 ) > 0 ) else ''
 iiIi1 = o0oIi1iiiii [ 0 ] if ( len ( o0oIi1iiiii ) > 0 ) else ''
 Oo0OOo = O00o0 [ 0 ] if ( len ( O00o0 ) > 0 ) else ''
 I1i1i1IIi1I = IIiIiIi1II [ 0 ] if ( len ( IIiIiIi1II ) > 0 ) else ''
 iII = oO00 [ 0 ] if ( len ( oO00 ) > 0 ) else ''
 IIi11iIIiIiI = IiiIIiii [ 0 ] if ( len ( IiiIIiii ) > 0 ) else ''
 oo000oo00 = iIIIii111 [ 0 ] if ( len ( iIIIii111 ) > 0 ) else ''
 IiIiiI1II = I1111IiII1 [ 0 ] if ( len ( I1111IiII1 ) > 0 ) else ''
 iI1i = IiiII [ 0 ] if ( len ( IiiII ) > 0 ) else ''
 oo000o0O = OO00OO0 [ 0 ] if ( len ( OO00OO0 ) > 0 ) else ''
 iiIiIIiI1 = Ooii [ 0 ] if ( len ( Ooii ) > 0 ) else ''
 Ii11i = i11iII1 [ 0 ] if ( len ( i11iII1 ) > 0 ) else ''
 O00i1i = oOooo [ 0 ] if ( len ( oOooo ) > 0 ) else ''
 iiiiIIiii1I1I = i11iI1111ii1I [ 0 ] if ( len ( i11iI1111ii1I ) > 0 ) else ''
 oo0O0OoO = OoOo0 [ 0 ] if ( len ( OoOo0 ) > 0 ) else ''
 OO0O0O0oo = iiIIii [ 0 ] if ( len ( iiIIii ) > 0 ) else ''
 iiIIioO0OOOO00o = O000oo00o000o [ 0 ] if ( len ( O000oo00o000o ) > 0 ) else ''
 i1Ii1I = O0000ooO [ 0 ] if ( len ( O0000ooO ) > 0 ) else ''
 O0O0o0o0oo0O = O00OoO [ 0 ] if ( len ( O00OoO ) > 0 ) else ''
 I1iiI = I11i11 [ 0 ] if ( len ( I11i11 ) > 0 ) else 'None'
 iIOoO00o0o0oo0o = oooo0OOO00O00 [ 0 ] if ( len ( oooo0OOO00O00 ) > 0 ) else ''
 i1i1ii11IiI = str ( '[COLOR=dodgerblue]Added: [/COLOR]' + Iii1 + '[CR][COLOR=dodgerblue]Manufacturer: [/COLOR]' + O000OO + '[CR][COLOR=dodgerblue]Supported Roms: [/COLOR]' + o0iiiI1I1iIIIi1 + '[CR][COLOR=dodgerblue]Chipset: [/COLOR]' + iiIIi1i111i + '[CR][COLOR=dodgerblue]CPU: [/COLOR]' + OoO00O0oOo + '[CR][COLOR=dodgerblue]GPU: [/COLOR]' + ooIII + '[CR][COLOR=dodgerblue]RAM: [/COLOR]' + i1iIii1II11 + '[CR][COLOR=dodgerblue]Flash: [/COLOR]' + OOOOoOOOO + '[CR][COLOR=dodgerblue]Wi-Fi: [/COLOR]' + iiIi1 + '[CR][COLOR=dodgerblue]Bluetooth: [/COLOR]' + Oo0OOo + '[CR][COLOR=dodgerblue]LAN: [/COLOR]' + I1i1i1IIi1I + '[CR][CR][COLOR=yellow]About: [/COLOR]' + OOo00 + '[CR][CR][COLOR=yellow]Summary:[/COLOR][CR][CR][COLOR=dodgerblue]Pros:[/COLOR]    ' + IIi11iIIiIiI + '[CR][CR][COLOR=dodgerblue]Cons:[/COLOR]  ' + oo000oo00 + '[CR][CR][COLOR=yellow]Benchmark Results:[/COLOR][CR][CR][COLOR=dodgerblue]Boot Time:[/COLOR][CR]' + iiiiIIiii1I1I + '[CR][CR][COLOR=dodgerblue]Time taken to scan 1,000 movies (local NFO files):[/COLOR][CR]' + IiIiiI1II + '[CR][CR][COLOR=dodgerblue]Copy 4,000 files (660.8MB) locally:[/COLOR][CR]' + oo0O0OoO + '[CR][CR][COLOR=dodgerblue]Copy a MP4 file (339.4MB) locally:[/COLOR][CR]' + OO0O0O0oo + '[CR][CR][COLOR=dodgerblue]Ethernet Speed - Copy MP4 (339.4MB) from SMB share to device:[/COLOR][CR]' + iiIIioO0OOOO00o + '[CR][CR][COLOR=dodgerblue]4k Playback:[/COLOR][CR]' + iI1i + '[CR][CR][COLOR=dodgerblue]1080p Playback:[/COLOR][CR]' + oo000o0O + '[CR][CR][COLOR=dodgerblue]720p Playback:[/COLOR][CR]' + iiIiIIiI1 + '[CR][CR][COLOR=dodgerblue]Audio Playback:[/COLOR][CR]' + O00i1i + '[CR][CR][COLOR=dodgerblue]Image Slideshow:[/COLOR][CR]' + i1Ii1I )
 iiIIiiiiiI1iIi = str ( '[COLOR=dodgerblue]Added: [/COLOR]' + Iii1 + '[CR][COLOR=dodgerblue]Manufacturer: [/COLOR]' + O000OO + '[CR][COLOR=dodgerblue]Supported Roms: [/COLOR]' + o0iiiI1I1iIIIi1 + '[CR][COLOR=dodgerblue]Chipset: [/COLOR]' + iiIIi1i111i + '[CR][COLOR=dodgerblue]CPU: [/COLOR]' + OoO00O0oOo + '[CR][COLOR=dodgerblue]GPU: [/COLOR]' + ooIII + '[CR][COLOR=dodgerblue]RAM: [/COLOR]' + i1iIii1II11 + '[CR][COLOR=dodgerblue]Flash: [/COLOR]' + OOOOoOOOO + '[CR][COLOR=dodgerblue]Wi-Fi: [/COLOR]' + iiIi1 + '[CR][COLOR=dodgerblue]Bluetooth: [/COLOR]' + Oo0OOo + '[CR][COLOR=dodgerblue]LAN: [/COLOR]' + I1i1i1IIi1I + '[CR][CR][COLOR=yellow]About: [/COLOR]' + OOo00 + '[CR][CR][COLOR=yellow]Summary:[/COLOR][CR][CR][COLOR=dodgerblue]Pros:[/COLOR]    ' + IIi11iIIiIiI + '[CR][CR][COLOR=dodgerblue]Cons:[/COLOR]  ' + oo000oo00 + '[CR][CR][COLOR=orange]4k Playback:[/COLOR]  ' + iI1i + '[CR][CR][COLOR=orange]1080p Playback:[/COLOR]  ' + oo000o0O + '[CR][CR][COLOR=orange]720p Playback:[/COLOR]  ' + iiIiIIiI1 + '[CR][CR][COLOR=orange]DTS Compatibility:[/COLOR]  ' + O00i1i + '[CR][CR][COLOR=orange]Time taken to scan 100 movies:[/COLOR]  ' + IiIiiI1II )
 if 47 - 47: II11iIiIIIiI % ii1ii11IIIiiI - o0oOo0 - II11iIiIIIiI * III1IiiI
 if OOo00 != '' and o0000Oo0 != '' :
  oO00oOOoooO ( '' , '[COLOR=yellow][Text Guide][/COLOR]  Official Description' , i1i1ii11IiI , 'text_guide' , '' , O0o0Oo , '' , '' )
 if OOo00 != '' and o0000Oo0 == '' :
  oO00oOOoooO ( '' , '[COLOR=yellow][Text Guide][/COLOR]  Official Description' , iiIIiiiiiI1iIi , 'text_guide' , '' , O0o0Oo , '' , '' )
 if I1iiI != 'None' :
  oO00oOOoooO ( '' , '[COLOR=lime][VIDEO][/COLOR]   Benchmark Review' , I1iiI , 'play_video' , '' , O0o0Oo , '' , '' )
 if o0Oo00Oo != 'None' :
  oO00oOOoooO ( '' , '[COLOR=lime][VIDEO][/COLOR]   Official Video Preview' , o0Oo00Oo , 'play_video' , '' , O0o0Oo , '' , '' )
 if iIIOoO != 'None' :
  oO00oOOoooO ( '' , '[COLOR=lime][VIDEO][/COLOR]   Official Video Guide' , iIIOoO , 'play_video' , '' , O0o0Oo , '' , '' )
 if Ii1iI111 != 'None' :
  oO00oOOoooO ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + oOo0oO , Ii1iI111 , 'play_video' , '' , O0o0Oo , '' , '' )
 if O0oooo00o0Oo != 'None' :
  oO00oOOoooO ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + IIi1IIIIi , O0oooo00o0Oo , 'play_video' , '' , O0o0Oo , '' , '' )
 if I1iii != 'None' :
  oO00oOOoooO ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + OOOoO , I1iii , 'play_video' , '' , O0o0Oo , '' , '' )
 if oO0o0O0Ooo0o != 'None' :
  oO00oOOoooO ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + I1i , oO0o0O0Ooo0o , 'play_video' , '' , O0o0Oo , '' , '' )
 if i1Ii11II != 'None' :
  oO00oOOoooO ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + iiiI , i1Ii11II , 'play_video' , '' , O0o0Oo , '' , '' )
  if 72 - 72: oOO00Oo % oOO00Oo + i1Iii1i1I + OoooO0Oo0O0 / II11iIiIIIiI
  if 30 - 30: II11iIiIIIiI + o0Oo + i11iIiiIii / ii1ii11IIIiiI
def o00OooooOOOO ( ) :
 oO00oOOoooO ( 'folder' , '[COLOR=yellow]Manual Search[/COLOR]' , 'hardware' , 'manual_search' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=lime]All Devices[/COLOR]' , '' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=orange][Hardware][/COLOR] Game Consoles' , 'device=Console' , '' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=orange][Hardware][/COLOR] HTPC' , 'device=HTPC' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=orange][Hardware][/COLOR] Phones' , 'device=Phone' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=orange][Hardware][/COLOR] Set Top Boxes' , 'device=STB' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=orange][Hardware][/COLOR] Tablets' , 'device=Tablet' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][Accessories][/COLOR] Remotes/Keyboards' , 'device=Remote' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][Accessories][/COLOR] Gaming Controllers' , 'device=Controller' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][Accessories][/COLOR] Dongles' , 'device=Dongle' , 'grab_hardware' , '' , '' , '' , '' )
 if 89 - 89: O0 + i11111IIIII * Iiii1i1
 if 30 - 30: O00OOOoOoo0O
def IIIII11 ( url ) :
 oO00oOOoooO ( 'folder' , '[COLOR=yellow][CPU][/COLOR] Allwinner Devices' , str ( url ) + '&chip=Allwinner' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=yellow][CPU][/COLOR] AMLogic Devices' , str ( url ) + '&chip=AMLogic' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=yellow][CPU][/COLOR] Intel Devices' , str ( url ) + '&chip=Intel' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=yellow][CPU][/COLOR] Rockchip Devices' , str ( url ) + '&chip=Rockchip' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=lime][Platform][/COLOR] Android' , str ( url ) + '&platform=Android' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=lime][Platform][/COLOR] iOS' , str ( url ) + '&platform=iOS' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=lime][Platform][/COLOR] Linux' , str ( url ) + '&platform=Linux' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=lime][Platform][/COLOR] OpenELEC' , str ( url ) + '&platform=OpenELEC' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=lime][Platform][/COLOR] OSX' , str ( url ) + '&platform=OSX' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=lime][Platform][/COLOR] Pure Linux' , str ( url ) + '&platform=Custom_Linux' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=lime][Platform][/COLOR] Windows' , str ( url ) + '&platform=Windows' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=orange][Flash Storage][/COLOR] 4GB' , str ( url ) + '&flash=4GB' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=orange][Flash Storage][/COLOR] 8GB' , str ( url ) + '&flash=8GB' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=orange][Flash Storage][/COLOR] 16GB' , str ( url ) + '&flash=16GB' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=orange][Flash Storage][/COLOR] 32GB' , str ( url ) + '&flash=32GB' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=orange][Flash Storage][/COLOR] 64GB' , str ( url ) + '&flash=64GB' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][RAM][/COLOR] 1GB' , str ( url ) + '&ram=1GB' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][RAM][/COLOR] 2GB' , str ( url ) + '&ram=2GB' , 'grab_hardware' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][RAM][/COLOR] 4GB' , str ( url ) + '&ram=4GB' , 'grab_hardware' , '' , '' , '' , '' )
 if 48 - 48: Iiii1i1 / o0oOo0 . iIii1I11I1II1
 if 72 - 72: i1IIi . oOO00Oo
 if 3 - 3: O00OOOoOoo0O % oO0OooOoO - O0
def oO0o00O ( ) :
 OOOO0OOoO0O0 = xbmc . getSkinDir ( )
 iiI = xbmc . translatePath ( os . path . join ( II11iiii1Ii , OOOO0OOoO0O0 ) )
 if 7 - 7: II11iIiIIIiI * ii1ii11IIIiiI - oO0OooOoO % Iiii1i1 . II11iIiIIIiI . II11iIiIIIiI
 for IiiI111 , ooooOoO0O , IIII in os . walk ( iiI ) :
  if 5 - 5: OoooooooOO * OoooO0Oo0O0
  for Oo0O0O000 in IIII :
   if 42 - 42: oOO00Oo . Iiii1i1 / O0 . oO0OooOoO * O00OOOoOoo0O
   if 'DialogKeyboard.xml' in Oo0O0O000 :
    OOOO0OOoO0O0 = os . path . join ( IiiI111 , Oo0O0O000 )
    i11IiI1iiI11 = open ( OOOO0OOoO0O0 ) . read ( )
    OOoOOOO00 = i11IiI1iiI11 . replace ( '<control type="label" id="310"' , '<control type="edit" id="312"' )
    Oo0O0O000 = open ( OOOO0OOoO0O0 , mode = 'w' )
    Oo0O0O000 . write ( OOoOOOO00 )
    Oo0O0O000 . close ( )
    I1IiiIiii1 ( OOOO0OOoO0O0 )
    if 7 - 7: Iiii1i1 * O0 + O00OOOoOoo0O
    for iIiI1II1I1 in range ( 48 , 58 ) :
     Iiii1I ( iIiI1II1I1 , OOOO0OOoO0O0 )
     if 90 - 90: i11111IIIII * oO0OooOoO * i11111IIIII - i1Iii1i1I
 iI111I11I1I1 = xbmcgui . Dialog ( )
 iI111I11I1I1 . ok ( "Skin Changes Successful" , 'A BIG thank you to Mikey1234 for this fix. The code used for this function was ported from the Xunity Maintenance add-on' )
 xbmc . executebuiltin ( 'ReloadSkin()' )
 if 34 - 34: iiIi1i11 - OoooO0Oo0O0 * i1Iii1i1I % iI1IiiIIIiIi
def Ii1i11i ( ) :
 iI111I11I1I1 = xbmcgui . Dialog ( )
 I11i1I1 = xbmcgui . Dialog ( ) . yesno ( 'Convert This Skin To Kodi (Helix)?' , 'This will fix the problem with a blank on-screen keyboard showing in skins designed for Gotham (being run on Kodi). This will only affect the currently running skin.' , nolabel = 'No, Cancel' , yeslabel = 'Yes, Fix' )
 if 60 - 60: i1Iii1i1I / i1Iii1i1I - o0oOo0 / OoooooooOO + O0
 if I11i1I1 == 1 :
  oO0o00O ( )
  if 55 - 55: ii1ii11IIIiiI % O0 / OoooooooOO
  if 49 - 49: o0Oo . ii1ii11IIIiiI * OoooooooOO % i11iIiiIii + iIii1I11I1II1 * i1IIi
def oOO0oOoooOoo0 ( ) :
 if iI111I11I1I1 . yesno ( "Hide Passwords" , "This will hide all your passwords in your" , "add-on settings, are you sure you wish to continue?" ) :
  for IiiI111 , ooooOoO0O , IIII in os . walk ( II11iiii1Ii ) :
   for Oo0O0O000 in IIII :
    if Oo0O0O000 == 'settings.xml' :
     Ii11I1i = open ( os . path . join ( IiiI111 , Oo0O0O000 ) ) . read ( )
     oooo0OOo = re . compile ( '<setting id=(.+?)>' ) . findall ( Ii11I1i )
     for iI11IIi1iiI1I in oooo0OOo :
      if 'pass' in iI11IIi1iiI1I :
       if not 'option="hidden"' in iI11IIi1iiI1I :
        try :
         oO0oO0ooOoO0 = iI11IIi1iiI1I . replace ( '/' , ' option="hidden"/' )
         Oo0O0O000 = open ( os . path . join ( IiiI111 , Oo0O0O000 ) , mode = 'w' )
         Oo0O0O000 . write ( str ( Ii11I1i ) . replace ( iI11IIi1iiI1I , oO0oO0ooOoO0 ) )
         Oo0O0O000 . close ( )
        except :
         pass
  iI111I11I1I1 . ok ( "Passwords Hidden" , "Your passwords will now show as stars (hidden), if you want to undo this please use the option to unhide passwords." )
  if 10 - 10: i11iIiiIii % iiIi1i11 * i1Iii1i1I % II11iIiIIIiI
  if 51 - 51: ii1ii11IIIiiI % i1Iii1i1I
def Iiiii ( url ) :
 oOo0 = 'http://noobsandnerds.com/TI/Community_Builds/guisettings.php?id=%s' % ( url )
 OOOoOO = I11IIIi ( oOo0 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 i1ii111i = re . compile ( 'guisettings="(.+?)"' ) . findall ( OOOoOO )
 i111iii1I1 = i1ii111i [ 0 ] if ( len ( i1ii111i ) > 0 ) else 'None'
 if 8 - 8: iIii1I11I1II1 . iIii1I11I1II1 + iI1IiiIIIiIi . iiIi1i11
 Ii1o0OOOoo0000 ( i111iii1I1 , OoO0OO0 )
 if 21 - 21: OoooooooOO . O0 / i11iIiiIii
 if 86 - 86: O00OOOoOoo0O / iiIi1i11
def Iii1I ( url ) :
 oO00oOOoooO ( 'folder' , '[COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR] Keywords' , '' , 'nan_menu' , '' , '' , '' , '' )
 if 32 - 32: iiIi1i11 - iI1IiiIIIiIi . ii1ii11IIIiiI * o0oOo0 + i11111IIIII . i1IIi
 if Iii1ii1II11i == 'true' and iI111iI != '' and IiII != '' :
  oO00oOOoooO ( '' , 'Install ' + IiII + ' keyword' , iI111iI , 'keywords' , '' , '' , '' , '' )
  if 61 - 61: o00O0OoO * iI1IiiIIIiIi + o00O0OoO - II11iIiIIIiI % O00OOOoOoo0O . i1Iii1i1I
 if oo00 == 'true' :
  oO00oOOoooO ( 'folder' , 'Install Add-ons' , oOOo0 , 'addonmenu' , '' , '' , '' , '' )
  if 51 - 51: iiIi1i11 / o00O0OoO
 if o00 == 'true' :
  oO00oOOoooO ( 'folder' , 'Community Builds' , url , 'community' , '' , '' , '' , '' )
  if 51 - 51: o0oOo0 * III1IiiI - Iiii1i1 + i1Iii1i1I
  if 46 - 46: oOO00Oo - i11iIiiIii % ii1ii11IIIiiI / iI1IiiIIIiIi - O00OOOoOoo0O
def OOooOOoOoo0o ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(10040,"addons://install/",return)' )
 if 27 - 27: o0oOo0 . II11iIiIIIiI + o0oOo0 + i1Iii1i1I
 if 28 - 28: ii1ii11IIIiiI - o0oOo0 - III1IiiI % III1IiiI / O0
def iIiiiiii1 ( repo_id ) :
 i1111IIiii1 = 1
 oOo0 = 'http://noobsandnerds.com/TI/AddonPortal/dependencyinstall.php?id=%s' % ( repo_id )
 OOOoOO = I11IIIi ( oOo0 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 OOo0o0O0O = re . compile ( 'name="(.+?)"' ) . findall ( OOOoOO )
 OooIiIIII1i11I = re . compile ( 'version="(.+?)"' ) . findall ( OOOoOO )
 OOoo = re . compile ( 'repo_url="(.+?)"' ) . findall ( OOOoOO )
 iIIiiiI = re . compile ( 'data_url="(.+?)"' ) . findall ( OOOoOO )
 oo0 = re . compile ( 'zip_url="(.+?)"' ) . findall ( OOOoOO )
 IiIII1 = re . compile ( 'repo_id="(.+?)"' ) . findall ( OOOoOO )
 oooo0OoOo = OOo0o0O0O [ 0 ] if ( len ( OOo0o0O0O ) > 0 ) else ''
 iII1iii = OooIiIIII1i11I [ 0 ] if ( len ( OooIiIIII1i11I ) > 0 ) else ''
 IIii1Ii1i1ii1 = OOoo [ 0 ] if ( len ( OOoo ) > 0 ) else ''
 oOOoOOooO0 = iIIiiiI [ 0 ] if ( len ( iIIiiiI ) > 0 ) else ''
 Iii1IIII1Iii = oo0 [ 0 ] if ( len ( oo0 ) > 0 ) else ''
 OO = IiIII1 [ 0 ] if ( len ( IiIII1 ) > 0 ) else ''
 o0oo0oO0O = xbmc . translatePath ( os . path . join ( O00O0oOO00O00 , OO + '.zip' ) )
 oo0Ii111ii1 = xbmc . translatePath ( os . path . join ( II11iiii1Ii , OO ) )
 if 80 - 80: iIii1I11I1II1 * iIii1I11I1II1 + iI1IiiIIIiIi % iIii1I11I1II1 + oO0OooOoO % O0
 OOooO0OOoo . create ( 'Installing Repository' , 'Please wait...' , '' )
 if 79 - 79: OoooooooOO + o00O0OoO * Iiii1i1
 try :
  downloader . download ( IIii1Ii1i1ii1 , o0oo0oO0O , OOooO0OOoo )
  extract . all ( o0oo0oO0O , II11iiii1Ii , OOooO0OOoo )
  xbmc . executebuiltin ( 'UpdateLocalAddons' )
  xbmc . executebuiltin ( 'UpdateAddonRepos' )
  if 63 - 63: o0oOo0 % o0Oo . iiIi1i11 - o0oOo0 / II11iIiIIIiI % o0Oo
 except :
  if 39 - 39: oOO00Oo . i1IIi % III1IiiI / o00O0OoO % O0
  try :
   downloader . download ( Iii1IIII1Iii , o0oo0oO0O , OOooO0OOoo )
   extract . all ( o0oo0oO0O , II11iiii1Ii , OOooO0OOoo )
   xbmc . executebuiltin ( 'UpdateLocalAddons' )
   xbmc . executebuiltin ( 'UpdateAddonRepos' )
   if 100 - 100: Iiii1i1 - O00OOOoOoo0O
  except :
   if 78 - 78: OoooooooOO - O00OOOoOoo0O . i11iIiiIii
   try :
    if 36 - 36: III1IiiI * i1Iii1i1I + i11111IIIII * i1Iii1i1I . OoooO0Oo0O0 - iIii1I11I1II1
    if not os . path . exists ( oo0Ii111ii1 ) :
     os . makedirs ( oo0Ii111ii1 )
     if 14 - 14: o00O0OoO * III1IiiI + i11iIiiIii
    OOOoOO = I11IIIi ( oOOoOOooO0 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
    oooo0OOo = re . compile ( 'href="(.+?)"' , re . DOTALL ) . findall ( OOOoOO )
    if 84 - 84: i1Iii1i1I / oO0OooOoO
    for OoOo0OOOoOo in oooo0OOo :
     IIiiIIi1 = xbmc . translatePath ( os . path . join ( oo0Ii111ii1 , OoOo0OOOoOo ) )
     if 86 - 86: o0Oo
     if I1iii11 not in OoOo0OOOoOo and '/' not in OoOo0OOOoOo :
      if 97 - 97: oO0OooOoO
      try :
       OOooO0OOoo . update ( 0 , "Downloading [COLOR=yellow]" + OoOo0OOOoOo + '[/COLOR]' , '' , 'Please wait...' )
       downloader . download ( oOOoOOooO0 + OoOo0OOOoOo , IIiiIIi1 , OOooO0OOoo )
       if 38 - 38: o0Oo
      except :
       print "failed to install" + OoOo0OOOoOo
       if 42 - 42: oOO00Oo
     if '/' in OoOo0OOOoOo and '..' not in OoOo0OOOoOo and 'http' not in OoOo0OOOoOo :
      i1IiiI1iIi = oOOoOOooO0 + OoOo0OOOoOo
      oOOo00O0OOOo ( IIiiIIi1 , i1IiiI1iIi )
      if 8 - 8: i11iIiiIii / o0oOo0
   except :
    iI111I11I1I1 . ok ( "Error downloading repository" , 'There was an error downloading[CR][COLOR=dodgerblue]' + oooo0OoOo + '[/COLOR]. Please consider updating the add-on portal with details or report the error on the forum at [COLOR=orange]www.noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds.com[/COLOR]' )
    i1111IIiii1 = 0
    if 33 - 33: Iiii1i1 * i11111IIIII - O0 + o0Oo / i11111IIIII
    if 19 - 19: i1IIi % oO0OooOoO
 if i1111IIiii1 == 1 :
  time . sleep ( 1 )
  OOooO0OOoo . update ( 0 , "[COLOR=yellow]" + oooo0OoOo + '[/COLOR]  [COLOR=lime]Successfully Installed[/COLOR]' , '' , 'Now installing dependencies' )
  time . sleep ( 1 )
  oo0OoOooo = 'http://noobsandnerds.com/TI/AddonPortal/downloadcount.php?id=%s' % ( repo_id )
  try :
   I11IIIi ( oo0OoOooo , 5 )
  except :
   pass
  return True
 else :
  return False
  if 85 - 85: i11111IIIII - oOO00Oo % iiIi1i11 - oO0OooOoO
  if 56 - 56: iI1IiiIIIiIi * i11iIiiIii
def oooo0OoOO ( ) :
 oO00oOOoooO ( '' , '[COLOR=dodgerblue][TEXT GUIDE][/COLOR]  What is Community Builds?' , 'url' , 'instructions_3' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=dodgerblue][TEXT GUIDE][/COLOR]  Creating a Community Build' , 'url' , 'instructions_1' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=dodgerblue][TEXT GUIDE][/COLOR]  Installing a Community Build' , 'url' , 'instructions_2' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=lime][VIDEO GUIDE][/COLOR]  Add Your Own Guides @ [COLOR=orange]www.noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds.com[/COLOR]' , 'K0XIxEodUhc' , 'play_video' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=lime][VIDEO GUIDE][/COLOR]  Community Builds FULL GUIDE' , "ewuxVfKZ3Fs" , 'play_video' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=lime][VIDEO GUIDE][/COLOR]  IMPORTANT initial settings' , "1vXniHsEMEg" , 'play_video' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=lime][VIDEO GUIDE][/COLOR]  Install a Community Build' , "kLsVOapuM1A" , 'play_video' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=lime][VIDEO GUIDE][/COLOR]  Fixing a half installed build (guisettings.xml fix)' , "X8QYLziFzQU" , 'play_video' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=lime][VIDEO GUIDE][/COLOR]  [COLOR=yellow](OLD METHOD)[/COLOR]Create a Community Build (part 1)' , "3rMScZF2h_U" , 'play_video' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=lime][VIDEO GUIDE][/COLOR]  [COLOR=yellow](OLD METHOD)[/COLOR]Create a Community Build (part 2)' , "C2IPhn0OSSw" , 'play_video' , '' , '' , '' , '' )
 if 37 - 37: OoooO0Oo0O0 / iI1IiiIIIiIi - OoooooooOO . III1IiiI
 if 57 - 57: i11iIiiIii - o00O0OoO / o0oOo0 / oOO00Oo * i11iIiiIii * oOO00Oo
def IiIii1iIIII ( ) :
 oO0o ( 'Creating A Backup To Share' ,
 '[COLOR=gold]THE OPTIONS:[/COLOR][CR]There are 3 options when choosing to create a backup, we shall explain here the differences between them:[CR][CR]'
 '[COLOR=dodgerblue]1. noobsandnerds Community Build[/COLOR] - This is by far the best way to create a build that you want to share with others, it will create a zip file for you to share that can only be used on with this add-on. The size of the zip will be incredibly small compared to other backup options out there and it will also do lots of other clever stuff too such as error checking against the Addon Portal and the addons will always be updated via the relevant developer repositories. Added to this when it comes to updating it\'s a breeze, only the new addons not already on the system will be installed and for the majority of builds Kodi won\'t even have to restart after installing![CR][CR]'
 '[COLOR=dodgerblue]2. Universal Build[/COLOR] - This was the original method created by TotalXBMC, we would really only recommend this if for some strange reason you want your build available on other inferior wizards. The zip size is much larger and every time someone wants to update their build they have to download and install the whole thing again which can be very frustrating and time consuming. The whole build is backed up in full with the exception of the packages and thumbnails folder. Just like the option above all physical paths (so long as they exist somewhere in the Kodi environment) will be changed to special paths so they work on all devices.[CR][CR]'
 '[COLOR=dodgerblue]3. Full Backup[/COLOR] - It\'s highly unlikely you will ever want to use this option and it\'s more for the geeks out there. It will create a complete backup of your setup and not do any extra clever stuff. Things like packages will remain intact as will temp cache files, be warned the size could be VERY large![CR][CR]'
 '[CR][COLOR=gold]CREATING A COMMUNITY BUILD:[/COLOR][CR][CR][COLOR=blue][B]Step 1:[/COLOR] Remove any sensitive data[/B][CR]Make sure you\'ve removed any sensitive data such as passwords and usernames in your addon_data folder.'
 '[CR][CR][COLOR=dodgerblue][B]Step 2:[/COLOR] Backup your system[/B][CR]Choose the backup option you want from the list on the previous page, if you\'re sharing this via the CP Addon then please use the noobsandnerds backup option, this will create two zip files that you need to upload to a server.'
 '[CR][CR][COLOR=dodgerblue][B]Step 3:[/COLOR] Upload the zips[/B][CR]Upload the two zip files to a server that Kodi can access, it has to be a direct link and not somewhere that asks for captcha - archive.org and copy.com are two good examples. Do not use Dropbox unless you have a paid account, they have a fair useage policy and the chances are you\'ll find within 24 hours your download has been blocked and nobody can download it. [COLOR=lime]Top Tip: [/COLOR]The vast majority of problems occur when the wrong download URL has been entered in the online form, a good download URL normally ends in "=1" or "zip=true". Please double check when you copy the URL into a web browser it immediately starts downloading without the need to press any other button.'
 '[CR][CR][COLOR=dodgerblue][B]Step 4:[/COLOR] Submit the build[/B]'
 '[CR]Create a thread on the Community Builds section of the forum at [COLOR=orange]www.noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds.com[/COLOR].[CR]Full details can be found on there of the template you should use when posting, once you\'ve created your support thread (NOT BEFORE) you can request to become a member of the Community Builder group and you\'ll then be able to add your build via the web form. As soon as you\'ve successfully added the details your build will be live, if you can\'t find it in the CP addon make sure you have XXX enabled (if you marked it as having adult content) and also make sure you\'re running the same version of Kodi that you said it was compatible with. If you\'re running another version then you can select the option to "show all community builds" in the addon settings and that will show even the builds that aren\'t marked as compatible with your version of Kodi.'
 '[CR][CR][COLOR=gold]PRIVATE BUILDS[/COLOR][CR]If you aren\'t interested in sharing your build with the community you can still use our system for private builds. Just follow the instructions above but you will not need to create a support thread and you WILL require a minimum of 5 useful (not spam) posts on the forum. The 5 post rule only applies to users that wish to use the private builds option. Once you have 5 posts you\'ll be able to access the web form and in there you can enter up to 3 IP addresses that you want to be able to view your build(s). Anybody caught disobeying the forum rules will be banned so please make sure you understand the forum rules before posting, we welcome everyone but there is strictly no spamming or nonsense posts just saying something like "Thanks" in order to bump up your post count. The site rules even have examples of how you can get to 5 posts without receiving a ban.' )
 if 92 - 92: i11111IIIII / iIii1I11I1II1
 if 43 - 43: o0oOo0 + OoooooooOO + iIii1I11I1II1 / OoooooooOO
def ooo0000oo0 ( ) :
 oO0o ( 'Installing a build' , '[COLOR=dodgerblue][B]Step 1 (Optional):[/COLOR] Backup your system[/B][CR]When selecting an install option you\'ll be asked if you want to create a backup - we strongly recommend creating a backup of your system in case you don\'t like the build and want to revert back. Remember your backup may be quite large so if you\'re using a device with a very small amount of storage we recommend using a USB stick or SD card as the storage location otherwise you may run out of space and the install may fail.'
 '[CR][CR][COLOR=dodgerblue][B]Step 2:[/COLOR] Choose an install method:[/B][CR][CR]-------------------------------------------------------[CR][CR][COLOR=gold]1. Overwrite my current setup & install new build:[/COLOR] This copy over the whole build[CR]As the title suggests this will overwrite your existing setup with the one created by the community builder. We recommend using the wipe option in the maintenance section before running this, that will completely wipe your existing settings and will ensure you don\'t have any conflicting data left on the device. Once you\'ve wiped please restart Kodi and install the build, you can of course use this install option 1 without wiping but you may encounter problems. If you choose to do this DO NOT bombard the community builder with questions on how to fix certain things, they will expect you to have installed over a clean setup and if you\'ve installed over another build the responsibility for bug tracking lies solely with you!'
 '[CR][CR]-------------------------------------------------------[CR][CR][COLOR=gold]2. Install:[/COLOR] Keep my library & profiles[CR]This will install a build over the top of your existing setup so you won\'t lose anything already installed in Kodi. Your library and any profiles you may have setup will also remain unchanged.'
 '[CR][CR]-------------------------------------------------------[CR][CR][COLOR=gold]3. Install:[/COLOR] Keep my library only[CR]This will do exactly the same as number 2 (above) but it will delete any profiles you may have and replace them with the ones the build author has created.'
 '[CR][CR]-------------------------------------------------------[CR][CR][COLOR=gold]4. Install:[/COLOR] Keep my profiles only[CR]Again, the same as number 2 but your library will be replaced with the one created by the build author. If you\'ve spent a long time setting up your library and have it just how you want it then use this with caution and make sure you do a backup!'
 '[CR][CR]-------------------------------------------------------[CR][CR][COLOR=dodgerblue][B]Step 3:[/COLOR] Replace or keep settings?[/B][CR]When completing the install process you\'ll be asked if you want to keep your existing Kodi settings or replace with the ones in the build. If you choose to keep your settings then only the important skin related settings are copied over from the build. All your other Kodi settings such as screen calibration, region, audio output, resolution etc. will remain intact. Choosing to replace your settings could possibly cause a few issues, unless the build author has specifically recommended you replace the settings with theirs we would always recommend keeping your own.'
 '[CR][CR][COLOR=dodgerblue][B]Step 4: [/COLOR][COLOR=red]VERY IMPORTANT[/COLOR][/B][CR]For the install to complete properly Kodi MUST force close, this means forcing it to close via your operating system rather than elegantly via the Kodi menu. By default this add-on will attempt to make your operating system force close Kodi but there are systems that will not allow this (devices that do not allow Kodi to have root permissions).'
 ' Once the final step of the install process has been completed you\'ll see a dialog explaining Kodi is attempting a force close, please be patient and give it a minute. If after a minute Kodi hasn\'t closed or restarted you will need to manually force close. The recommended solution for force closing is to go into your operating system menu and make it force close the Kodi app but if you dont\'t know how to do that you can just pull the power from the unit.'
 ' Pulling the power is fairly safe these days, on most set top boxes it\'s the only way to switch them off - they rarely have a power switch. Even though it\'s considered fairly safe nowadays you do this at your own risk and we would always recommend force closing via the operating system menu.' )
 if 58 - 58: i1Iii1i1I % iIii1I11I1II1 . iIii1I11I1II1 / o00O0OoO
 if 79 - 79: ii1ii11IIIiiI / iiIi1i11 - i1IIi + i1IIi - i11111IIIII + i11111IIIII
def oOoOo000Ooooo ( ) :
 oO0o ( 'What is a noobsandnerds keyword?' , '[COLOR=gold]WHAT IS A KEYWORD?[/COLOR][CR]The noobsandnerds keywords are based on the ingenious TLBB keyword system that was introduced years ago. It\'s nothing new and unlike certain other people out there we\'re not going to claim it as our idea. If you\'re already familiar with TLBB Keywords or even some of the copies out there like Cloudwords you will already know how this works but for those of you that don\'t have one of those devices we\'ll just go through the details...'
 '[CR][CR]Anyone in the community can make their own keywords and share them with others, it\'s a simple word you type in and then the content you uploaded to the web is downloaded and installed. Previously keywords have mostly been used for addon packs, this is a great way to get whole packs of addons in one go without the need to install a whole new build. We are taking this to the next level and will be introducing artwork packs and also addon fixes. More details will be available in the Community Portal section of the forum on www.noobsandnerds.com'
 '[CR][CR][CR][COLOR=gold]HOW DO I FIND A KEYWORD?[/COLOR][CR]The full list of noobsandnerds keywords can be found on the forum, in the Community Portal section you\'ll see a section for the keywords at the top of the page. Just find the pack you would like to install then using this addon type the keyword in when prompted (after clicking "Install a noobsandnerds keyword"). Your content will now be installed, if installing addon packs please be patient while each addon updates to the latest version directly from the developers repo.'
 '[CR][CR][CR][COLOR=gold]CAN I USE OTHER KEYWORDS?[/COLOR] (Cloudwords, TLBB etc.)[CR]Yes you can, just go to the addon settings and enter the url shortener that particular company use. Again you will find full details of supported keywords on the forum.' )
 if 18 - 18: iI1IiiIIIiIi + O00OOOoOoo0O . i1IIi / i11111IIIII / i1Iii1i1I
 if 97 - 97: ii1ii11IIIiiI + iIii1I11I1II1
def O0OOoo ( ) :
 oO0o ( 'How to create a keyword?' , '[COLOR=gold]NaN MAKE IT EASY![/COLOR][CR]The keywords can now be made very simply by anyone. We\'ve not locked this down to just our addon and others can use this on similar systems for creating keywords if they want...'
 '[CR][CR][COLOR=dodgerblue][B]Step 1:[/COLOR] Use a vanilla Kodi setup[/B][CR]You will require a complete fresh install of Kodi with absolutely nothing else installed and running the default skin. Decide what kind of pack you want to create, lets say we want to create a kids pack... Add all the kid related addons you want and make sure you also have the relevant repository installed too. In the unlikely event you\'ve found an addon that doesn\'t belong in a repository that\'s fine the system will create a full backup of that addon too (just means it won\'t auto update with future updates to the addon).'
 '[CR][CR][COLOR=dodgerblue][B]Step 2:[/COLOR] Create the backup[/B][CR]Using this addon create your backup, currently only addon packs are supported but soon more packs will be added. When you create the keyword you\'ll be asked for a location to store the zip file that will be created and a name, this can be anywhwere you like and can be called whatever you want - you do not need to add the zip extension, that will automatically be added for you so in our example here we would call it "kids".'
 '[CR][CR][COLOR=dodgerblue][B]Step 3:[/COLOR] Upload the zips[/B][CR]Upload the two zip file to a server that Kodi can access, it has to be a direct link and not somewhere that asks for captcha - archive.org and copy.com are two good examples. Do not use Dropbox unless you have a paid account, they have a fair useage policy and the chances are you\'ll find within 24 hours your download has been blocked and nobody can download it.[CR][CR][COLOR=lime]Top Tip: [/COLOR]The vast majority of problems occur when the wrong download URL has been entered in the online form, a good download URL normally ends in "=1" or "zip=true". Please double check when you copy the URL into a web browser it immediately starts downloading without the need to press any other button.'
 '[CR][CR][COLOR=dodgerblue][B]Step 4:[/COLOR] Create the keyword[/B][CR]Copy the download URL to your clipboard and then go to www.urlshortbot.com. In here you need to enter the URL in the "Long URL" field and then in the "Custom Keyword" field you need to enter "noobs" (without the quotation marks) followed by your keyword. We recommend always using a random test keyword for testing because once you have a keyword you can\'t change it, also when uploading make sure it\'s a link you can edit and still keep the same URL - that way it\'s easy to keep up to date and you can still use the same keyword. In our example of kids we would set the custom keyword as "noobskids". The noobs bit is ignored and is only for helping the addon know what to look for, the user would just type in "kids" for the kids pack to be installed.' )
 if 38 - 38: i11111IIIII . oOO00Oo
 if 32 - 32: o0oOo0 . i11111IIIII . oO0OooOoO
def I1I11I1i1i1II ( ) :
 oO0o ( 'Adding Third Party Wizards' , '[COLOR=gold]ONE WIZARD TO RULE THEM ALL![/COLOR][CR]Did you know the vast majority of wizards out there (every single one we\'ve tested) has just been a copy/paste of very old code created by the team here? We\'ve noticed a lot of the users installing builds via these third party wizards have run into many different problems so we thought we\'d take it upon ourselves to help out...'
 '[CR][CR][CR][COLOR=gold]WHAT BENEFITS DOES THIS HAVE?[/COLOR][CR]We\'ve added extra code that checks for common errors, unfortunately there are some people out there using inferior programs to create their backups and that is causing problems in their wizards. If such a problem exists when trying to use another wizard you can try adding the details to this addon and it automatically fixes any corrupt files it finds. Of course there are other benefits... installing code from an unknown source can give the author access to your system so make sure you always trust the author(s). Why take the risk of installing wizards created by anonymous usernames on social media sites when you can install from a trusted source like noobsandnerds and you\'ll also be safe in the knowledge that any new updates and improvements will be made here first - we do not copy/paste code, we are actively creating new exciting solutions!'
 '[CR][CR][CR][COLOR=gold]ADDING 3RD PARTY WIZARDS TO THIS ADDON[/COLOR][CR][CR][COLOR=dodgerblue][B]Step 1:[/COLOR] Enabling 3rd Party Wizards[/B][CR]In the addon settings under the Community Builds section you have the option to enable third party community builds, if you click on this you will be able to enter details of up to 5 different wizards.'
 '[CR][CR][COLOR=dodgerblue][B]Step 2:[/COLOR] Enter the URL[/B][CR]As virtually all wizards use exactly the same structure all you need to do is find out what URL they are looking up in the code, you can open the default.py file of the wizard in a text editor and search for "http" and you will more than likely find the URL straight away. Try entering it in a web address, it should show the details for all the builds in that wizard in a text based page. If the page is blank don\'t worry it may just be locked from web browsers and can only be opened in Kodi, try it out and see if it works.'
 '[CR][CR][COLOR=dodgerblue][B]Step 3:[/COLOR] Enter the name[/B][CR]Give the wizard a name, now when you go into the Community Builds section you\'ll have the official noobsandnerds builds as an option and also any new ones you\'ve added.' )
 if 1 - 1: o0Oo . iI1IiiIIIiIi
 if 26 - 26: III1IiiI - o0oOo0 % II11iIiIIIiI - III1IiiI + i11111IIIII
def I1IIII ( url = 'http://www.iplocation.net/' , inc = 1 ) :
 oooo0OOo = re . compile ( "<td width='80'>(.+?)</td><td>(.+?)</td><td>(.+?)</td><td>.+?</td><td>(.+?)</td>" ) . findall ( ooOooo000oOO . http_GET ( url ) . content )
 for oo0oO0o00Oo0 , i1I1I , O0Oi11iIii11 , o00oOoOo000Oo in oooo0OOo :
  if inc < 2 : iI111I11I1I1 = xbmcgui . Dialog ( ) ; iI111I11I1I1 . ok ( 'Check My IP' , "[B][COLOR gold]Your IP Address is: [/COLOR][/B] %s" % oo0oO0o00Oo0 , '[B][COLOR gold]Your IP is based in: [/COLOR][/B] %s' % O0Oi11iIii11 , '[B][COLOR gold]Your Service Provider is:[/COLOR][/B] %s' % o00oOoOo000Oo )
  inc = inc + 1
  if 74 - 74: iiIi1i11 - i1Iii1i1I / i11iIiiIii / i1Iii1i1I / oO0OooOoO / O0
  if 45 - 45: o00O0OoO . II11iIiIIIiI % iI1IiiIIIiIi % i1Iii1i1I
def IiIiii1IiiiI ( url ) :
 if not os . path . exists ( O00O0oOO00O00 ) :
  os . makedirs ( O00O0oOO00O00 )
  if 44 - 44: o00O0OoO . i11111IIIII % Iiii1i1 - o0oOo0 - OoooO0Oo0O0
 iIIiIi1IiI1 = ''
 I1II1IiI1 = 'Enter Keyword'
 Oo0O = Iii1I1III11 ( I1II1IiI1 )
 iIIiIi1IiI1 = url + Oo0O
 oO0oO00 = os . path . join ( O00O0oOO00O00 , Oo0O + '.zip' )
 if 6 - 6: iI1IiiIIIiIi * i1IIi
 if Oo0O != '' :
  IiIiIiiI = iI111I11I1I1 . yesno ( 'Backup existing setup' , 'Installing certain keywords can result in some existing settings or add-ons to be replaced. Would you like to create a backup before proceeding?' )
  if 83 - 83: O00OOOoOoo0O
  if IiIiIiiI == 1 :
   o0ooOOOo0O0 ( )
   if 100 - 100: i11iIiiIii . iiIi1i11 . i11iIiiIii
  try :
   if iiIIIII1i1iI == 'true' :
    print "### Attempting download " + iIIiIi1IiI1 + " to " + oO0oO00
   OOooO0OOoo . create ( "Web Installer" , "Downloading " , '' , 'Please Wait' )
   downloader . download ( iIIiIi1IiI1 , oO0oO00 )
   print "### Keyword " + Oo0O + " Successfully downloaded"
   OOooO0OOoo . update ( 0 , "" , "Extracting Zip Please Wait" )
   if 81 - 81: o0Oo
   if zipfile . is_zipfile ( oO0oO00 ) :
    if 76 - 76: O0 - o0oOo0 / iI1IiiIIIiIi . II11iIiIIIiI - iI1IiiIIIiIi
    try :
     extract . all ( oO0oO00 , iIii1 , OOooO0OOoo )
     xbmc . executebuiltin ( 'UpdateLocalAddons' )
     xbmc . executebuiltin ( 'UpdateAddonRepos' )
     iI111I11I1I1 . ok ( "[COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR]" , "" , "Content now installed" , "" )
     OOooO0OOoo . close ( )
     if 75 - 75: o0oOo0 % iiIi1i11 / oOO00Oo % oO0OooOoO
    except :
     iI111I11I1I1 . ok ( "Error with zip" , 'There was an error trying to install this file. It may possibly be corrupt, either try again or contact the author of this keyword.' )
     print "### Unable to install keyword (passed zip check): " + Oo0O
   else :
    iI111I11I1I1 . ok ( "Keyword Error" , 'The keyword you typed could not be installed. Please check the spelling and if you continue to receive this message it probably means that keyword is no longer available.' )
    if 30 - 30: oOO00Oo
  except :
   iI111I11I1I1 . ok ( "Keyword Error" , 'The keyword you typed could not be installed. Please check the spelling and if you continue to receive this message it probably means that keyword is no longer available.' )
   print "### Unable to install keyword (unknown error, most likely a typo in keyword entry): " + Oo0O
   if 15 - 15: oO0OooOoO - iI1IiiIIIiIi - i1Iii1i1I . III1IiiI / i11iIiiIii
 if os . path . exists ( oO0oO00 ) :
  os . remove ( oO0oO00 )
  if 38 - 38: ii1ii11IIIiiI
  if 3 - 3: oO0OooOoO . o0Oo / II11iIiIIIiI + oOO00Oo
def O00OO00OOOoO ( ) :
 if 54 - 54: i1IIi - oO0OooOoO . i1IIi
 if not os . path . exists ( OOoOO0oo0ooO ) :
  os . makedirs ( OOoOO0oo0ooO )
 iII = xbmc . getInfoLabel ( "System.BuildVersion" )
 iII1iii = float ( iII [ : 4 ] )
 if xbmc . getCondVisibility ( 'system.platform.windows' ) :
  if iII1iii < 14 :
   try :
    i1I = open ( os . path . join ( OOoOO0oo0ooO , 'win_xbmc.bat' ) , 'w+' )
    i1I . write ( '@ECHO off\nTASKKILL /im XBMC.exe /f\ntskill XBMC.exe\nXBMC.exe' )
    i1I . close ( )
    os . system ( os . path . join ( OOoOO0oo0ooO , 'win_xbmc.bat' ) )
   except :
    print "### Failed to run win_xbmc.bat"
  else :
   try :
    i1I = open ( os . path . join ( OOoOO0oo0ooO , 'win_kodi.bat' ) , 'w+' )
    i1I . write ( '@ECHO off\nTASKKILL /im Kodi.exe /f\ntskill Kodi.exe\nKodi.exe' )
    i1I . close ( )
    os . system ( os . path . join ( OOoOO0oo0ooO , 'win_kodi.bat' ) )
   except :
    print "### Failed to run win_kodi.bat"
 elif xbmc . getCondVisibility ( 'system.platform.osx' ) :
  if iII1iii < 14 :
   try :
    i1I = open ( os . path . join ( OOoOO0oo0ooO , 'osx_xbmc.sh' ) , 'w+' )
    i1I . write ( 'killall -9 XBMC\nXBMC' )
    i1I . close ( )
   except :
    pass
   try :
    os . system ( 'chmod 755 ' + os . path . join ( OOoOO0oo0ooO , 'osx_xbmc.sh' ) )
   except :
    pass
   try :
    os . system ( os . path . join ( OOoOO0oo0ooO , 'osx_xbmc.sh' ) )
   except :
    print "### Failed to run osx_xbmc.sh"
  else :
   try :
    i1I = open ( os . path . join ( OOoOO0oo0ooO , 'osx_kodi.sh' ) , 'w+' )
    i1I . write ( 'killall -9 Kodi\nKodi' )
    i1I . close ( )
   except :
    pass
   try :
    os . system ( 'chmod 755 ' + os . path . join ( OOoOO0oo0ooO , 'osx_kodi.sh' ) )
   except :
    pass
   try :
    os . system ( os . path . join ( OOoOO0oo0ooO , 'osx_kodi.sh' ) )
   except :
    print "### Failed to run osx_kodi.sh"
    if 33 - 33: i1Iii1i1I + II11iIiIIIiI % o00O0OoO . III1IiiI
 elif xbmc . getCondVisibility ( 'system.platform.android' ) :
  if os . path . exists ( '/data/data/com.rechild.advancedtaskkiller' ) :
   iI111I11I1I1 . ok ( 'Attempting to force close' , 'On the following screen please press the big button at the top which says "KILL selected apps". Kodi will restart, please be patient while your system updates the necessary files and your skin will automatically switch once fully updated.' )
   try :
    xbmc . executebuiltin ( 'StartAndroidActivity(com.rechild.advancedtaskkiller)' )
   except :
    print "### Failed to run Advanced Task Killer. Make sure you have it installed, you can download from https://archive.org/download/com.rechild.advancedtaskkiller/com.rechild.advancedtaskkiller.apk"
  else :
   iI111I11I1I1 . ok ( 'Advanced Task Killer Not Found' , "The Advanced Task Killer app cannot be found on this system. Please make sure you actually installed it after downloading. We can't do everything for you - on Android you do have to physically click on the download to install an app." )
  try :
   os . system ( 'adb shell am force-stop org.xbmc.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.xbmc.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell am force-stop org.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.kodi' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc.xbmc' )
  except :
   pass
  try :
   os . system ( 'adb shell kill org.xbmc' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc,kodi());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.kodi());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc.xbmc());' )
  except :
   pass
  try :
   os . system ( 'Process.killProcess(android.os.Process.org.xbmc());' )
  except :
   pass
 elif xbmc . getCondVisibility ( 'system.platform.linux' ) :
  if iII1iii < 14 :
   try :
    i1I = open ( os . path . join ( OOoOO0oo0ooO , 'linux_xbmc' ) , 'w+' )
    i1I . write ( 'killall XBMC\nkillall -9 xbmc.bin\nXBMC' )
    i1I . close ( )
   except :
    pass
   try :
    os . system ( 'chmod a+x ' + os . path . join ( OOoOO0oo0ooO , 'linux_xbmc' ) )
   except :
    pass
   try :
    os . system ( os . path . join ( OOoOO0oo0ooO , 'linux_xbmc' ) )
   except :
    print "### Failed to run: linux_xbmc"
  else :
   try :
    i1I = open ( os . path . join ( OOoOO0oo0ooO , 'linux_kodi' ) , 'w+' )
    i1I . write ( 'killall Kodi\nkillall -9 kodi.bin\nkodi' )
    i1I . close ( )
   except :
    pass
   try :
    os . system ( 'chmod a+x ' + os . path . join ( OOoOO0oo0ooO , 'linux_kodi' ) )
   except :
    pass
   try :
    os . system ( os . path . join ( OOoOO0oo0ooO , 'linux_kodi' ) )
   except :
    print "### Failed to run: linux_kodi"
 else :
  try :
   os . system ( 'killall AppleTV' )
  except :
   pass
  try :
   os . system ( 'sudo initctl stop kodi' )
  except :
   pass
  try :
   os . system ( 'sudo initctl stop xbmc' )
  except :
   pass
   if 6 - 6: i11111IIIII + OoooO0Oo0O0
   if 62 - 62: III1IiiI . Iiii1i1 - OoooooooOO * oO0OooOoO . i11iIiiIii
def iiIIiIi1i1I1 ( ) :
 xbmc . executebuiltin ( 'ReplaceWindow(settings)' )
 if 52 - 52: oOO00Oo % oO0OooOoO . OoooooooOO
 if 7 - 7: oO0OooOoO - OoooO0Oo0O0 / o00O0OoO % OoooooooOO + i1IIi
def o0ooOOOo0O0 ( ) :
 i1iI1i ( )
 if 42 - 42: o00O0OoO + i1IIi - iI1IiiIIIiIi / i11111IIIII . i1Iii1i1I
 IIi11IIiIi1i = xbmc . translatePath ( os . path . join ( OOO00 , 'Community_Builds' , 'My_Builds' , '' ) )
 IiiOoo0o0ooooOOo = xbmc . translatePath ( os . path . join ( OOO00 , 'Community_Builds' , 'My_Builds' , 'my_full_backup.zip' ) )
 oOoOO0000oO00 = xbmc . translatePath ( os . path . join ( OOO00 , 'Community_Builds' , 'My_Builds' , 'my_full_backup_GUI_Settings.zip' ) )
 if 30 - 30: II11iIiIIIiI + iI1IiiIIIiIi % i11iIiiIii * i1IIi + o0Oo % iiIi1i11
 if not os . path . exists ( IIi11IIiIi1i ) :
  os . makedirs ( IIi11IIiIi1i )
  if 30 - 30: i11iIiiIii * II11iIiIIIiI . oO0OooOoO + OoooO0Oo0O0 / oOO00Oo % Iiii1i1
 iIo00OOOOOo0OOo = i1II11I11ii1 ( heading = "Enter a name for this backup" )
 if 78 - 78: OoooO0Oo0O0 + OoooooooOO - o0Oo * O00OOOoOoo0O * i1Iii1i1I
 if ( not iIo00OOOOOo0OOo ) :
  return False , 0
  if 7 - 7: iiIi1i11 . i11111IIIII . Iiii1i1 / iI1IiiIIIiIi / II11iIiIIIiI
 I1II1IiI1 = urllib . quote_plus ( iIo00OOOOOo0OOo )
 iIIiI11iI1Ii1 = xbmc . translatePath ( os . path . join ( IIi11IIiIi1i , I1II1IiI1 + '.zip' ) )
 o00oo = [ o0OO00 ]
 O0oO0oo0O = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'Thumbs.db' , '.gitignore' ]
 Oo00O0OO = "Creating full backup of existing build"
 OOOoOooO000oO = "Creating Community Build"
 oOOOoo0o = "Archiving..."
 iiiI1IiIIii = ""
 IIIIiii = "Please Wait"
 if 83 - 83: o00O0OoO / II11iIiIIIiI
 oOoOo ( iIii1 , IiiOoo0o0ooooOOo , Oo00O0OO , oOOOoo0o , iiiI1IiIIii , IIIIiii , o00oo , O0oO0oo0O )
 iI111I11I1I1 . ok ( 'Full Backup Complete' , 'You can locate your backup at:[COLOR=dodgerblue]' , IiiOoo0o0ooooOOo + '[/COLOR]' )
 if 23 - 23: iIii1I11I1II1
 if 10 - 10: o00O0OoO - oOO00Oo % OoooooooOO - OoooO0Oo0O0
def oOoo ( ) :
 iII = xbmc . getInfoLabel ( "System.BuildVersion" )
 iII1iii = float ( iII [ : 4 ] )
 if 89 - 89: o0oOo0 % III1IiiI * iI1IiiIIIiIi - II11iIiIIIiI / oOO00Oo + ii1ii11IIIiiI
 if iII1iii < 14 :
  Ooo00oo0ooO0 = os . path . join ( O0Oo000ooO00 , 'xbmc.log' )
  oO0o ( 'XBMC Log' , Ooo00oo0ooO0 )
  if 25 - 25: o00O0OoO + oO0OooOoO / o0oOo0
 else :
  Ooo00oo0ooO0 = os . path . join ( O0Oo000ooO00 , 'kodi.log' )
  oO0o ( 'Kodi Log' , Ooo00oo0ooO0 )
  if 12 - 12: i11iIiiIii + i1IIi - iI1IiiIIIiIi + O0 . o0Oo
  if 8 - 8: oOO00Oo
def ooOO0O0O ( ) :
 iI111I11I1I1 . ok ( "Restore local guisettings fix" , "You should [COLOR=lime]ONLY[/COLOR] use this option if the guisettings fix is failing to download via the addon. Installing via this method means you do not receive notifications of updates" )
 IIIiIIIi111iI ( )
 if 41 - 41: III1IiiI % o0Oo % II11iIiIIIiI + iI1IiiIIIiIi + i11iIiiIii
 if 70 - 70: iIii1I11I1II1
def ooOO0o ( mode ) :
 if 88 - 88: OoooooooOO
 iIo00OOOOOo0OOo = i1II11I11ii1 ( heading = "Search for content" )
 if 46 - 46: O0 % OoooooooOO
 if ( not iIo00OOOOOo0OOo ) :
  return False , 0
  if 22 - 22: i1Iii1i1I + OoooooooOO - O00OOOoOoo0O - ii1ii11IIIiiI * Iiii1i1 - III1IiiI
 I1II1IiI1 = urllib . quote_plus ( iIo00OOOOOo0OOo )
 if 99 - 99: o0oOo0 / o0Oo . iI1IiiIIIiIi - iI1IiiIIIiIi * o0Oo
 if mode == 'tutorials' :
  iii1iII ( 'name=' + I1II1IiI1 )
  if 24 - 24: o00O0OoO * ii1ii11IIIiiI - III1IiiI / iIii1I11I1II1 - II11iIiIIIiI . iiIi1i11
 if mode == 'hardware' :
  oOO0 ( 'name=' + I1II1IiI1 )
  if 2 - 2: o0oOo0 - O0 - OoooO0Oo0O0 / o00O0OoO * O00OOOoOoo0O
 if mode == 'news' :
  o00o0o0oOo0 ( 'name=' + I1II1IiI1 )
  if 26 - 26: OoooO0Oo0O0 + Iiii1i1 - III1IiiI + i11111IIIII % iiIi1i11
 if mode . endswith ( "premium" ) or mode . endswith ( "public" ) or mode . endswith ( "private" ) :
  OO0oooOO ( mode + '&name=' + I1II1IiI1 )
  if 84 - 84: o00O0OoO % iI1IiiIIIiIi % O0 * oOO00Oo
  if 15 - 15: III1IiiI - iIii1I11I1II1 - oO0OooOoO - i11111IIIII % OoooO0Oo0O0
  if 80 - 80: i11111IIIII * i1Iii1i1I . i1IIi % iI1IiiIIIiIi % OoooO0Oo0O0 + o0oOo0
  if 6 - 6: OoooO0Oo0O0 . III1IiiI . ii1ii11IIIiiI + i11111IIIII
  if 65 - 65: OoooO0Oo0O0 / o0oOo0
  if 23 - 23: iiIi1i11 / iiIi1i11 * oOO00Oo * iiIi1i11
  if 57 - 57: i1Iii1i1I
  if 29 - 29: o0Oo
  if 41 - 41: Iiii1i1 * ii1ii11IIIiiI - i1Iii1i1I . iI1IiiIIIiIi
def IiIiIIII ( ) :
 oO00oOOoooO ( '' , 'Install a [COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR] Keyword' , 'http://urlshortbot.com/noobs' , 'keywords' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Create a [COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR] Keyword' , 'create_pack' , 'create_keyword' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=darkcyan][INSTRUCTIONS][/COLOR] Installing a keyword' , '' , 'instructions_3' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=darkcyan][INSTRUCTIONS][/COLOR] Creating a keyword' , '' , 'instructions_4' , '' , '' , '' , '' )
 if 93 - 93: i1Iii1i1I - O0
 if 84 - 84: i1Iii1i1I % o0Oo / iIii1I11I1II1 * iI1IiiIIIiIi * iIii1I11I1II1 + OoooO0Oo0O0
def O000o ( url ) :
 oOo0 = 'http://noobsandnerds.com/TI/LatestNews/LatestNews.php?id=%s' % ( url )
 OOOoOO = I11IIIi ( oOo0 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 OOo0o0O0O = re . compile ( 'name="(.+?)"' ) . findall ( OOOoOO )
 iIiO0O = re . compile ( 'author="(.+?)"' ) . findall ( OOOoOO )
 oOO0O0o0Oo = re . compile ( 'date="(.+?)"' ) . findall ( OOOoOO )
 iII1 = re . compile ( 'content="(.+?)###END###"' ) . findall ( OOOoOO )
 if 9 - 9: i1Iii1i1I - i1Iii1i1I
 i1iIIIi1i = OOo0o0O0O [ 0 ] if ( len ( OOo0o0O0O ) > 0 ) else ''
 ooOo00 = iIiO0O [ 0 ] if ( len ( iIiO0O ) > 0 ) else ''
 iiI1ii1i1 = oOO0O0o0Oo [ 0 ] if ( len ( oOO0O0o0Oo ) > 0 ) else ''
 i11ii1iI = iII1 [ 0 ] if ( len ( iII1 ) > 0 ) else ''
 IiIiIi = oOo0O ( i11ii1iI )
 OOo00 = str ( '[COLOR=orange]Source: [/COLOR]' + ooOo00 + '     [COLOR=orange]Date: [/COLOR]' + iiI1ii1i1 + '[CR][CR][COLOR=lime]Details: [/COLOR][CR]' + IiIiIi )
 if 74 - 74: ii1ii11IIIiiI
 oO0o ( i1iIIIi1i , OOo00 )
 if 18 - 18: OoooO0Oo0O0 / ii1ii11IIIiiI + o00O0OoO . i1IIi
 if 28 - 28: O00OOOoOoo0O
def i1Ii1IIIi111111 ( url ) :
 oO00oOOoooO ( 'folder' , '[COLOR=yellow]Manual Search[/COLOR]' , 'news' , 'manual_search' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=lime][All News][/COLOR] From all sites' , str ( url ) + '' , 'grab_news' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Official Kodi.tv News' , str ( url ) + '&author=Official%20Kodi' , 'grab_news' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'OpenELEC News' , str ( url ) + '&author=OpenELEC' , 'grab_news' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Raspbmc News' , str ( url ) + '&author=Raspbmc' , 'grab_news' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR] News' , str ( url ) + '&author=noobsandnerds' , 'grab_news' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'XBMC4Xbox News' , str ( url ) + '&author=XBMC4Xbox' , 'grab_news' , '' , '' , '' , '' )
 if 57 - 57: iI1IiiIIIiIi . Iiii1i1 . oO0OooOoO % OoooooooOO * O0 + iIii1I11I1II1
 if 94 - 94: i1IIi * ii1ii11IIIiiI * O00OOOoOoo0O
def o000 ( title , message , times , icon ) :
 icon = oOOoo0Oo + icon
 xbmc . executebuiltin ( "XBMC.Notification(" + title + "," + message + "," + times + "," + icon + ")" )
 if 8 - 8: II11iIiIIIiI
 if 22 - 22: o0oOo0 % O00OOOoOoo0O / oOO00Oo
def oO0O ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(filemanager,return)' )
 return
 if 31 - 31: OoooooooOO % i11iIiiIii - oO0OooOoO * i11iIiiIii
 if 82 - 82: O0 / iiIi1i11 + i1Iii1i1I
def I11II1i1I11I1 ( ) :
 xbmc . executebuiltin ( 'ActivateWindow(systeminfo)' )
 if 11 - 11: o0oOo0 - OoooooooOO
 if 55 - 55: o00O0OoO + i1IIi - i1Iii1i1I + oOO00Oo * i11111IIIII
def I11IIIi ( url , t ) :
 oooo00o0O0 = urllib2 . Request ( url )
 oooo00o0O0 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows; U; Windows NT 10.0; WOW64; Windows NT 5.1; en-GB; rv:1.9.0.3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36 Gecko/2008092417 Firefox/3.0.3' )
 if 43 - 43: O00OOOoOoo0O * ii1ii11IIIiiI % i1IIi * iI1IiiIIIiIi + iIii1I11I1II1
 oOIIii = 0
 O0ooO0 = False
 while oOIIii < 5 and O0ooO0 == False :
  OoO000Ooo = urllib2 . urlopen ( oooo00o0O0 , timeout = t )
  OOOoOO = OoO000Ooo . read ( )
  OoO000Ooo . close ( )
  oOIIii += 1
  if OOOoOO != '' :
   O0ooO0 = True
 if O0ooO0 == True :
  return OOOoOO . replace ( '\r' , '' ) . replace ( '\n' , '' ) . replace ( '\t' , '' )
 else :
  iI111I11I1I1 . ok ( 'Unable to contact server' , 'There was a problem trying to access the server, please try again later.' )
  return
  if 66 - 66: OoooO0Oo0O0 . II11iIiIIIiI / OoooO0Oo0O0 + OoooO0Oo0O0 . oO0OooOoO % ii1ii11IIIiiI
  if 61 - 61: i11iIiiIii - OoooooooOO
def ooO0O ( ) :
 import tarfile
 if 55 - 55: iiIi1i11 - oO0OooOoO - i11111IIIII . o00O0OoO + III1IiiI - III1IiiI
 if not os . path . exists ( oO0 ) :
  os . makedirs ( oO0 )
  if 29 - 29: O00OOOoOoo0O - Iiii1i1 % iiIi1i11
 OOooO0OOoo . create ( "Creating Backup" , "Adding files... " , '' , 'Please Wait' )
 i1II = tarfile . open ( os . path . join ( oO0 , IiIi11iI1 ( ) + '.tar' ) , 'w' )
 if 50 - 50: iIii1I11I1II1 + Iiii1i1 - o00O0OoO - OoooooooOO
 for oO00O0oO in III1iII1I1ii :
  OOooO0OOoo . update ( 0 , "Backing Up" , '[COLOR blue]%s[/COLOR]' % oO00O0oO , 'Please Wait' )
  i1II . add ( oO00O0oO )
  if 69 - 69: iiIi1i11 + iiIi1i11 * iI1IiiIIIiIi * o00O0OoO + o0Oo
 i1II . close ( )
 OOooO0OOoo . close ( )
 if 46 - 46: iiIi1i11
 if 17 - 17: o00O0OoO / oO0OooOoO * oOO00Oo / II11iIiIIIiI + i1Iii1i1I . III1IiiI
def OOOOOo ( ) :
 iII = xbmc . getInfoLabel ( "System.BuildVersion" )
 if 19 - 19: iiIi1i11 * o00O0OoO
 if os . path . exists ( os . path . join ( O0Oo000ooO00 , 'xbmc.log' ) ) :
  oO0O000oOoo0O = 'xbmc.log'
 elif os . path . exists ( os . path . join ( O0Oo000ooO00 , 'kodi.log' ) ) :
  oO0O000oOoo0O = 'kodi.log'
 elif os . path . exists ( os . path . join ( O0Oo000ooO00 , 'spmc.log' ) ) :
  oO0O000oOoo0O = 'spmc.log'
 elif os . path . exists ( os . path . join ( O0Oo000ooO00 , 'tvmc.log' ) ) :
  oO0O000oOoo0O = 'tvmc.log'
 try :
  IiIiiI11i1Ii = open ( os . path . join ( O0Oo000ooO00 , oO0O000oOoo0O ) , mode = 'r' )
  i11ii1iI = IiIiiI11i1Ii . read ( )
  IiIiiI11i1Ii . close ( )
 except :
  return False
 if 'Running on OpenELEC' in i11ii1iI :
  return True
  if 85 - 85: i1IIi % oOO00Oo * OoooO0Oo0O0 * ii1ii11IIIiiI . oO0OooOoO
  if 69 - 69: iI1IiiIIIiIi / Iiii1i1 % Iiii1i1 / o0oOo0 + Iiii1i1 / i1IIi
def o0o00o0Oo ( ) :
 xbmc . executebuiltin ( 'RunAddon(service.openelec.settings)' )
 if 65 - 65: Iiii1i1 * i11iIiiIii - O00OOOoOoo0O / iiIi1i11
 if 83 - 83: III1IiiI / iIii1I11I1II1
def O0oOOoO0 ( url ) :
 oO00oOOoooO ( 'folder' , '[COLOR=yellow]1. Install:[/COLOR]  Installation tutorials (e.g. flashing a new OS)' , str ( url ) + '&thirdparty=InstallTools' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Add-on Tools:[/COLOR]  Add-on maintenance and coding tutorials' , str ( url ) + '&thirdparty=AddonTools' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Audio Tools:[/COLOR]  Audio related tutorials' , str ( url ) + '&thirdparty=AudioTools' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Gaming Tools:[/COLOR]  Integrate a gaming section into your setup' , str ( url ) + '&thirdparty=GamingTools' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Image Tools:[/COLOR]  Tutorials to assist with your pictures/photos' , str ( url ) + '&thirdparty=ImageTools' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Library Tools:[/COLOR]  Music and Video Library Tutorials' , str ( url ) + '&thirdparty=LibraryTools' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Skinning Tools:[/COLOR]  All your skinning advice' , str ( url ) + '&thirdparty=SkinningTools' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Video Tools:[/COLOR]  All video related tools' , str ( url ) + '&thirdparty=VideoTools' , 'grab_tutorials' , '' , '' , '' , '' )
 if 59 - 59: i1Iii1i1I . i1IIi
 if 31 - 31: o0Oo + o0Oo
def OO00o0oOO ( xmlfile ) :
 if 11 - 11: i11111IIIII + O00OOOoOoo0O % oOO00Oo * ii1ii11IIIiiI / i11111IIIII
 if 'http' in xmlfile :
  I11Ii = 'none'
  OOIiIIi1iIii1I1 = xmlfile [ - 10 : ]
  OOIiIIi1iIii1I1 = OOIiIIi1iIii1I1 [ : - 4 ]
  ii1oo = os . path . join ( O0OoO000O0OO , o0OO00 , 'latest' )
  if 78 - 78: ii1ii11IIIiiI % oO0OooOoO + O00OOOoOoo0O / o0Oo
  if os . path . exists ( ii1oo ) :
   OOOoO00 = open ( ii1oo , mode = 'r' )
   I11Ii = OOOoO00 . read ( )
   OOOoO00 . close ( )
   if 34 - 34: oOO00Oo % OoooO0Oo0O0 + iI1IiiIIIiIi * o00O0OoO / III1IiiI
  if I11Ii == OOIiIIi1iIii1I1 :
   OOIiIIi1iIii1I1 = I11Ii
   if 18 - 18: o0oOo0
  else :
   OOooO0OOoo . create ( 'Grabbing Latest Updates' , '' , '' , '' )
   downloader . download ( xmlfile , os . path . join ( II11iiii1Ii , o0OO00 , 'resources' , 'skins' , 'DefaultSkin' , 'media' , 'latest.jpg' ) )
   i1I = open ( ii1oo , mode = 'w+' )
   i1I . write ( OOIiIIi1iIii1I1 )
   i1I . close ( )
  xmlfile = 'latest.xml'
 OOoo00o0OoO = O0ooO0Oo00o ( xmlfile , i1IiI1I11 . getAddonInfo ( 'path' ) , 'DefaultSkin' , close_time = 34 )
 OOoo00o0OoO . doModal ( )
 del OOoo00o0OoO
 if 24 - 24: i11111IIIII . i1Iii1i1I * i11111IIIII % i11iIiiIii . i11iIiiIii + i1IIi
 if 64 - 64: iIii1I11I1II1 / i11111IIIII / II11iIiIIIiI - OoooO0Oo0O0
def I1I1iiii1IiI1i ( ) :
 if 100 - 100: i11111IIIII + i1IIi * ii1ii11IIIiiI
 IIiiIIi1 = os . path . join ( II11iiii1Ii , binascii . unhexlify ( '7363726970742e6d6f64756c652e637967706669' ) , 'tag.cfg' )
 if os . path . exists ( IIiiIIi1 ) :
  OOOoO00 = open ( IIiiIIi1 , 'r' )
  i11ii1iI = OOOoO00 . read ( )
  OOOoO00 . close ( )
  return binascii . unhexlify ( i11ii1iI )
 else :
  return binascii . unhexlify ( '6e6c616b73646a666c6b61736a64666c6a616c736b6a666c6b616a7366' )
  if 64 - 64: III1IiiI * i11iIiiIii . II11iIiIIIiI
  if 52 - 52: II11iIiIIIiI / o0oOo0 / i1Iii1i1I - oOO00Oo / i1Iii1i1I
def iii ( info ) :
 OOOoO00 = open ( oo0OooOOo0 , 'r' )
 i11ii1iI = OOOoO00 . read ( )
 OOOoO00 . close ( )
 ooIi = re . compile ( 'l="(.+?)"' ) . findall ( i11ii1iI )
 O00Oo = ooIi [ 0 ] if ( len ( ooIi ) > 0 ) else ''
 iii1I = re . compile ( 'p="(.+?)"' ) . findall ( i11ii1iI )
 iIiI11I = iii1I [ 0 ] if ( len ( iii1I ) > 0 ) else '0'
 if iIiI11I != '0' :
  iIiI11I = binascii . unhexlify ( iIiI11I )
 if O00Oo != '' :
  O00Oo = binascii . unhexlify ( O00Oo )
 if 'Welcome Back' in O00Oo and i1i1II . replace ( '%20' , '' ) in O00Oo and info == 'posts' :
  return iIiI11I
 if 'Welcome Back' in O00Oo and i1i1II . replace ( '%20' , '' ) in O00Oo and info == 'welcometext' :
  return O00Oo
 else :
  return False
  if 33 - 33: III1IiiI + II11iIiIIIiI + Iiii1i1 * III1IiiI / oOO00Oo
  if 78 - 78: i11111IIIII + o00O0OoO - oOO00Oo + ii1ii11IIIiiI / iIii1I11I1II1
def oOOo00O0OOOo ( recursive_location , remote_path ) :
 if not os . path . exists ( recursive_location ) :
  os . makedirs ( recursive_location )
  if 47 - 47: iiIi1i11
 OOOoOO = I11IIIi ( remote_path , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 oooo0OOo = re . compile ( 'href="(.+?)"' , re . DOTALL ) . findall ( OOOoOO )
 if 20 - 20: Iiii1i1 % o0oOo0 - Iiii1i1 * OoooooooOO / OoooO0Oo0O0
 for OoOo0OOOoOo in oooo0OOo :
  IIiiIIi1 = xbmc . translatePath ( os . path . join ( recursive_location , OoOo0OOOoOo ) )
  if 57 - 57: i11111IIIII % o00O0OoO * iiIi1i11 % OoooO0Oo0O0
  if '/' not in OoOo0OOOoOo :
   if 65 - 65: i1IIi - OoooooooOO
   try :
    OOooO0OOoo . update ( 0 , "Downloading [COLOR=yellow]" + OoOo0OOOoOo + '[/COLOR]' , '' , 'Please wait...' )
    downloader . download ( remote_path + OoOo0OOOoOo , IIiiIIi1 , OOooO0OOoo )
    if 66 - 66: OoooO0Oo0O0 / i1IIi * o0Oo - O00OOOoOoo0O + III1IiiI
   except :
    print "failed to install" + OoOo0OOOoOo
    if 74 - 74: i1Iii1i1I / Iiii1i1 / oO0OooOoO - i1Iii1i1I / III1IiiI % o00O0OoO
  if '/' in OoOo0OOOoOo and '..' not in OoOo0OOOoOo and 'http' not in OoOo0OOOoOo :
   i1Iiiiii1II = remote_path + OoOo0OOOoOo
   oOOo00O0OOOo ( IIiiIIi1 , i1Iiiiii1II )
   if 50 - 50: O00OOOoOoo0O
  else :
   pass
   if 90 - 90: OoooO0Oo0O0 - Iiii1i1
   if 25 - 25: i1Iii1i1I
def oO00Oo0oOO0 ( ) :
 iI111I11I1I1 . ok ( "Register to unlock features" , "To get the most out of this addon please register at the [COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR] forum for free." , 'www.noobsandnerds.com' )
 if 89 - 89: OoooO0Oo0O0 - i1IIi + o00O0OoO % II11iIiIIIiI
 if 52 - 52: II11iIiIIIiI - O0
def O0ooo0O00Ooo0 ( ) :
 iI1iii = xbmcgui . Dialog ( ) . yesno ( 'Delete Addon_Data Folder?' , 'This will free up space by deleting your addon_data folder. This contains all addon related settings including username and password info.' , nolabel = 'Cancel' , yeslabel = 'Delete' )
 if 17 - 17: i11111IIIII % i11111IIIII
 if iI1iii == 1 :
  O0o00ooo ( )
  iI111I11I1I1 . ok ( "Addon_Data Removed" , '' , 'Your addon_data folder has now been removed.' , '' )
  if 3 - 3: OoooO0Oo0O0
def Ii1 ( url ) :
 OOooOO0oO = str ( url ) . replace ( II11iiii1Ii , O0OoO000O0OO )
 if 20 - 20: ii1ii11IIIiiI
 if iI111I11I1I1 . yesno ( "Remove" , '' , "Do you want to Remove" ) :
  if 48 - 48: O0 - o0oOo0
  for IiiI111 , ooooOoO0O , IIII in os . walk ( url ) :
   if 15 - 15: OoooooooOO
   for Oo0O0O000 in IIII :
    os . unlink ( os . path . join ( IiiI111 , Oo0O0O000 ) )
    if 16 - 16: iiIi1i11 . o00O0OoO
   for Ii1iI in ooooOoO0O :
    shutil . rmtree ( os . path . join ( IiiI111 , Ii1iI ) )
  os . rmdir ( url )
  if 47 - 47: O0 - o00O0OoO - O0
  try :
   if 12 - 12: OoooooooOO . o00O0OoO . ii1ii11IIIiiI
   for IiiI111 , ooooOoO0O , IIII in os . walk ( OOooOO0oO ) :
    if 73 - 73: iI1IiiIIIiIi * OoooooooOO * o00O0OoO - i11iIiiIii
    for Oo0O0O000 in IIII :
     os . unlink ( os . path . join ( IiiI111 , Oo0O0O000 ) )
     if 58 - 58: oOO00Oo + O00OOOoOoo0O - i11111IIIII
    for Ii1iI in ooooOoO0O :
     shutil . rmtree ( os . path . join ( IiiI111 , Ii1iI ) )
     if 82 - 82: iI1IiiIIIiIi . iIii1I11I1II1 / iI1IiiIIIiIi / III1IiiI % iIii1I11I1II1
   os . rmdir ( OOooOO0oO )
   if 34 - 34: iiIi1i11
  except :
   pass
   if 99 - 99: oO0OooOoO
  I1I111i1I = os . path . join ( oOOoO0 , 'Database' , 'Addons16.db' )
  if 81 - 81: OoooO0Oo0O0 % iIii1I11I1II1
  try :
   os . remove ( I1I111i1I )
   if 70 - 70: O0 . iIii1I11I1II1 * oO0OooOoO
  except :
   pass
   if 43 - 43: II11iIiIIIiI / Iiii1i1 / i1IIi
  xbmc . executebuiltin ( 'UpdateLocalAddons' )
  xbmc . sleep ( 1000 )
  xbmc . executebuiltin ( 'UpdateAddonRepos' )
  I1i11IIiiIiI ( )
  iI111I11I1I1 . ok ( 'Add-on removed' , 'You may have to restart Kodi to repopulate' , 'your add-on database. Until you restart you\'ll' , 'find your add-on is still showing even though it\'s deleted' )
  xbmc . executebuiltin ( 'Container.Refresh' )
  if 7 - 7: ii1ii11IIIiiI * i11iIiiIii * iIii1I11I1II1 / iiIi1i11 / Iiii1i1
  if 35 - 35: i1Iii1i1I * iiIi1i11
def ooooO0OO0O ( ) :
 i1iI1i ( )
 IiI11 = xbmcgui . Dialog ( ) . browse ( 1 , 'Select the backup file you want to DELETE' , 'files' , '.zip' , False , False , OOO00 )
 if 38 - 38: i1IIi / iIii1I11I1II1 + i1Iii1i1I
 if IiI11 != OOO00 :
  iI1 = ntpath . basename ( IiI11 )
  iI1iii = xbmcgui . Dialog ( ) . yesno ( 'Delete Backup File' , 'This will completely remove ' + iI1 , 'Are you sure you want to delete?' , '' , nolabel = 'No, Cancel' , yeslabel = 'Yes, Delete' )
  if 80 - 80: i11iIiiIii . iI1IiiIIIiIi * iIii1I11I1II1 - II11iIiIIIiI
  if iI1iii == 1 :
   os . remove ( IiI11 )
   if 77 - 77: OoooooooOO
   if 52 - 52: i1Iii1i1I - ii1ii11IIIiiI % i11iIiiIii . o00O0OoO
def OooOoOo ( ) :
 iI1iii = xbmcgui . Dialog ( ) . yesno ( 'Remove All Crash Logs?' , 'There is absolutely no harm in doing this, these are log files generated when Kodi crashes and are only used for debugging purposes.' , nolabel = 'Cancel' , yeslabel = 'Delete' )
 if 8 - 8: i11111IIIII
 if iI1iii == 1 :
  Oo0Ii1iii ( )
  iI111I11I1I1 . ok ( "Crash Logs Removed" , '' , 'Your crash log files have now been removed.' , '' )
  if 37 - 37: o0Oo / OoooooooOO % i11iIiiIii % OoooO0Oo0O0
  if 19 - 19: II11iIiIIIiI - ii1ii11IIIiiI + i11iIiiIii / iIii1I11I1II1
def OooO0ooO0o0 ( ) :
 shutil . rmtree ( os . path . join ( II11iiii1Ii , binascii . unhexlify ( '7363726970742e6d6f64756c652e637967706669' ) ) )
 iI111I11I1I1 . ok ( binascii . unhexlify ( '53746172747570206469616c6f672064697361626c6564' ) , binascii . unhexlify ( '54686520436f6d6d756e6974792050726f74656374696f6e206e61672073637265656e20686173206e6f77206265656e2064697361626c65642e20596f752063616e206e6f77206372656174652061206261636b75702074686174206e6f206c6f6e67657220686173207468652070726f74656374696f6e2c204f4e4c5920796f7520746865206275696c6420617574686f722063616e2064697361626c65207468697320736f206d616b65207375726520796f7520646f6e2774207368617265206c6f67696e20696e666f2e' ) )
 if 1 - 1: i11111IIIII % i1IIi
 if 41 - 41: ii1ii11IIIiiI * ii1ii11IIIiiI / i1Iii1i1I + OoooO0Oo0O0 . oOO00Oo
def I1i11IIiiIiI ( ) :
 iI1iii = xbmcgui . Dialog ( ) . yesno ( 'Delete Packages Folder' , 'Do you want to clean the packages folder? This will free up space by deleting the old zip install files of your addons. Keeping these files can also sometimes cause problems when reinstalling addons' , nolabel = 'Cancel' , yeslabel = 'Delete' )
 if 84 - 84: i11iIiiIii + ii1ii11IIIiiI * o0Oo + OoooO0Oo0O0 / iI1IiiIIIiIi
 if iI1iii == 1 :
  Oo ( )
  iI111I11I1I1 . ok ( "Packages Removed" , '' , 'Your zip install files have now been removed.' , '' )
  if 80 - 80: OoooO0Oo0O0
  if 67 - 67: oO0OooOoO
def ii111iiIii ( ) :
 iI1iii = xbmcgui . Dialog ( ) . yesno ( 'Clear Cached Images?' , 'This will clear your textures13.db file and remove your Thumbnails folder. These will automatically be repopulated after a restart.' , nolabel = 'Cancel' , yeslabel = 'Delete' )
 if 2 - 2: oOO00Oo - O0 * iI1IiiIIIiIi % i11111IIIII
 if iI1iii == 1 :
  iII11 ( )
  oooO00oo0 ( OooO0 )
  if 64 - 64: i1IIi . o0oOo0
  iI1iii = xbmcgui . Dialog ( ) . yesno ( 'Quit Kodi Now?' , 'Cache has been successfully deleted.' , 'You must now restart Kodi, would you like to quit now?' , '' , nolabel = 'I\'ll restart later' , yeslabel = 'Yes, quit' )
  if 7 - 7: III1IiiI . i1Iii1i1I - i1Iii1i1I / Iiii1i1 % II11iIiIIIiI
  if iI1iii == 1 :
   try :
    xbmc . executebuiltin ( "RestartApp" )
    if 61 - 61: III1IiiI - OoooO0Oo0O0 / i1Iii1i1I % OoooO0Oo0O0 + ii1ii11IIIiiI / II11iIiIIIiI
   except :
    O00OO00OOOoO ( )
    if 10 - 10: i11iIiiIii / O00OOOoOoo0O
    if 27 - 27: o0Oo / OoooooooOO
def iII11 ( ) :
 OOO00Oo00o = xbmc . translatePath ( 'special://home/userdata/Database/Textures13.db' )
 try :
  IiII1Iiii = database . connect ( OOO00Oo00o )
  I1o000o00OO00Oo = IiII1Iiii . cursor ( )
  I1o000o00OO00Oo . execute ( "DROP TABLE IF EXISTS path" )
  I1o000o00OO00Oo . execute ( "VACUUM" )
  IiII1Iiii . commit ( )
  I1o000o00OO00Oo . execute ( "DROP TABLE IF EXISTS sizes" )
  I1o000o00OO00Oo . execute ( "VACUUM" )
  IiII1Iiii . commit ( )
  I1o000o00OO00Oo . execute ( "DROP TABLE IF EXISTS texture" )
  I1o000o00OO00Oo . execute ( "VACUUM" )
  IiII1Iiii . commit ( )
  I1o000o00OO00Oo . execute ( """CREATE TABLE path (id integer, url text, type text, texture text, primary key(id))""" )
  IiII1Iiii . commit ( )
  I1o000o00OO00Oo . execute ( """CREATE TABLE sizes (idtexture integer,size integer, width integer, height integer, usecount integer, lastusetime text)""" )
  IiII1Iiii . commit ( )
  I1o000o00OO00Oo . execute ( """CREATE TABLE texture (id integer, url text, cachedurl text, imagehash text, lasthashcheck text, PRIMARY KEY(id))""" )
  IiII1Iiii . commit ( )
 except :
  pass
  if 12 - 12: o00O0OoO * III1IiiI - Iiii1i1 * i1Iii1i1I - o0oOo0 * Iiii1i1
  if 90 - 90: iI1IiiIIIiIi . O00OOOoOoo0O
def o0OOOOoo ( name , url , description ) :
 if 'Backup' in name :
  i1iI1i ( )
  oOi1IiIiIii11I = open ( url ) . read ( )
  O0o0O00 = os . path . join ( OOO00 , description . split ( 'Your ' ) [ 1 ] )
  Oo0O0O000 = open ( O0o0O00 , mode = 'w' )
  Oo0O0O000 . write ( oOi1IiIiIii11I )
  Oo0O0O000 . close ( )
  if 85 - 85: i11iIiiIii . o00O0OoO + iI1IiiIIIiIi / iI1IiiIIIiIi
 else :
  if 'guisettings.xml' in description :
   i11IiI1iiI11 = open ( os . path . join ( OOO00 , description . split ( 'Your ' ) [ 1 ] ) ) . read ( )
   i1o00Oo = '<setting type="(.+?)" name="%s.(.+?)">(.+?)</setting>' % OOOO0OOoO0O0
   oooo0OOo = re . compile ( i1o00Oo ) . findall ( i11IiI1iiI11 )
   if 38 - 38: Iiii1i1
   for type , OOoO000oO , iIiIi in oooo0OOo :
    iIiIi = iIiIi . replace ( '&quot;' , '' ) . replace ( '&amp;' , '&' )
    xbmc . executebuiltin ( "Skin.Set%s(%s,%s)" % ( type . title ( ) , OOoO000oO , iIiIi ) )
    if 7 - 7: OoooO0Oo0O0
  else :
   O0o0O00 = os . path . join ( url )
   oOi1IiIiIii11I = open ( os . path . join ( OOO00 , description . split ( 'Your ' ) [ 1 ] ) ) . read ( )
   Oo0O0O000 = open ( O0o0O00 , mode = 'w' )
   Oo0O0O000 . write ( oOi1IiIiIii11I )
   Oo0O0O000 . close ( )
   if 11 - 11: o0oOo0
 iI111I11I1I1 . ok ( "Restore Complete" , "" , 'All Done !' , '' )
 if 36 - 36: ii1ii11IIIiiI % iIii1I11I1II1 - OoooO0Oo0O0 - i1IIi % oOO00Oo
 if 54 - 54: i11111IIIII - oO0OooOoO . o0oOo0 + iI1IiiIIIiIi
def IIiii1I ( name , url , video , description , skins , guisettingslink , artpack ) :
 O0O000 = 1
 o00OoOoo0 = 0
 iiiiiiiiiiiI = os . path . join ( iIii1 , 'CP_Profiles' )
 iI111iiI1II = os . path . join ( iiiiiiiiiiiI , 'list.txt' )
 iii1II1iI1IIi = [ ]
 IiI11 = description . replace ( ' ' , '_' ) . replace ( "'" , "" ) . replace ( ":" , "-" )
 if 96 - 96: O00OOOoOoo0O * O0 - oO0OooOoO . o0oOo0 - iI1IiiIIIiIi
 if not os . path . exists ( iiiiiiiiiiiI ) :
  os . makedirs ( iiiiiiiiiiiI )
  if 84 - 84: III1IiiI * oOO00Oo * oOO00Oo - i1Iii1i1I
 III1Ii = os . path . join ( iiiiiiiiiiiI , IiI11 )
 if not os . path . exists ( III1Ii ) :
  os . makedirs ( III1Ii )
 else :
  o00OoOoo0 = iI111I11I1I1 . yesno ( 'Profile Already Exists' , 'This build is already installed on your system, would you like to remove the old one and reinstall?' )
  if o00OoOoo0 == 1 :
   try :
    shutil . rmtree ( III1Ii )
    os . makedirs ( III1Ii )
   except :
    pass
  else :
   O0O000 = 2
   if 90 - 90: o0Oo
 if O0O000 == 1 :
  oO0oO00 = os . path . join ( iiiiiIIii , IiI11 + '_gui.zip' )
  if iiIIIII1i1iI == 'true' :
   print "### Download path = " + oO0oO00
   if 27 - 27: iIii1I11I1II1 - III1IiiI
  OOooO0OOoo . create ( "Community Builds" , "Downloading Skin Tweaks" , '' , 'Please Wait' )
  try :
   downloader . download ( guisettingslink , oO0oO00 )
   if iiIIIII1i1iI == 'true' :
    print "### successfully downloaded guisettings.xml"
  except :
   iI111I11I1I1 . ok ( 'Problem Detected' , 'Sorry there was a problem downloading the guisettings file. Please check your storage location, if you\'re certain that\'s ok please notify the build author on the relevant support thread.' )
   if iiIIIII1i1iI == 'true' :
    print "### FAILED to download " + guisettingslink
    if 73 - 73: iiIi1i11 . II11iIiIIIiI + II11iIiIIIiI % II11iIiIIIiI % O0
    if 8 - 8: i1Iii1i1I . iI1IiiIIIiIi - i1IIi % ii1ii11IIIiiI / o00O0OoO
  if zipfile . is_zipfile ( oO0oO00 ) :
   Iii1I1I = str ( os . path . getsize ( oO0oO00 ) )
  else :
   Iii1I1I = '0'
   if 13 - 13: II11iIiIIIiI / O00OOOoOoo0O . OoooO0Oo0O0 . iiIi1i11
  OOooO0OOoo . create ( "Community Builds" , "Downloading " + description , '' , 'Please Wait' )
  oO0oO00 = os . path . join ( iiiiiIIii , IiI11 + '.zip' )
  if 31 - 31: oOO00Oo
  if not os . path . exists ( iiiiiIIii ) :
   os . makedirs ( iiiiiIIii )
   if 59 - 59: II11iIiIIIiI / II11iIiIIIiI
   if 87 - 87: OoooO0Oo0O0 % O00OOOoOoo0O + iI1IiiIIIiIi . i11iIiiIii / iI1IiiIIIiIi
  i1I1I1 = os . path . join ( iiI1IiI , 'extracted' )
  downloader . download ( url , oO0oO00 , OOooO0OOoo )
  OOooO0OOoo . create ( "Community Builds" , "Extracting " + description , '' , 'Please Wait' )
  extract . all ( oO0oO00 , i1I1I1 , OOooO0OOoo )
  if os . path . exists ( os . path . join ( i1I1I1 , 'userdata' , '.cbcfg' ) ) :
   try :
    os . makedirs ( os . path . join ( O0OoO000O0OO , o0OO00 , 'updating' ) )
   except :
    pass
  if iiIIIII1i1iI == 'true' :
   print "### Downloaded build to: " + oO0oO00
   print "### Extracted build to: " + i1I1I1
   if 31 - 31: iI1IiiIIIiIi / i1Iii1i1I
  IiIiiI11i1Ii = open ( I11iii1Ii , mode = 'r' )
  i11ii1iI = IiIiiI11i1Ii . read ( )
  IiIiiI11i1Ii . close ( )
  if 3 - 3: i11111IIIII
  II1IIIi = re . compile ( 'id="(.+?)"' ) . findall ( i11ii1iI )
  Iiii = re . compile ( 'name="(.+?)"' ) . findall ( i11ii1iI )
  O0O0OOooo = re . compile ( 'version="(.+?)"' ) . findall ( i11ii1iI )
  if 37 - 37: iI1IiiIIIiIi * OoooooooOO * o00O0OoO + II11iIiIIIiI . o0Oo
  o0OooOoOOoO = II1IIIi [ 0 ] if ( len ( II1IIIi ) > 0 ) else ''
  oo0OoO0oOO = Iiii [ 0 ] if ( len ( Iiii ) > 0 ) else ''
  i1ii1I = O0O0OOooo [ 0 ] if ( len ( O0O0OOooo ) > 0 ) else ''
  if 61 - 61: iiIi1i11 . iiIi1i11
  print "### Build name details to store in ti_id: " + oo0OoO0oOO
  if 17 - 17: oO0OooOoO / o0oOo0
  o0OO0OOoo0oO = os . path . join ( i1I1I1 , 'userdata' , 'addon_data' , 'ti_id' )
  OOOOo00oOOO00 = os . path . join ( o0OO0OOoo0oO , 'id.xml' )
  if not os . path . exists ( o0OO0OOoo0oO ) :
   os . makedirs ( o0OO0OOoo0oO )
   if 13 - 13: OoooO0Oo0O0 / ii1ii11IIIiiI * i11iIiiIii % ii1ii11IIIiiI % ii1ii11IIIiiI * oO0OooOoO
  i1I = open ( OOOOo00oOOO00 , mode = 'w+' )
  i1I . write ( 'id="' + str ( o0OooOoOOoO ) + '"\nname="' + oo0OoO0oOO + '"\nversion="' + i1ii1I + '"\ngui="' + Iii1I1I + '"' )
  i1I . close ( )
  if 17 - 17: o00O0OoO . O0 * i1IIi - O00OOOoOoo0O % i1IIi
  O000OO0 = os . path . join ( o0OO0OOoo0oO , 'startup.xml' )
  i1I = open ( O000OO0 , mode = 'w+' )
  i1I . write ( 'date="01011001"\nversion="' + i1ii1I + '"' )
  i1I . close ( )
  if 35 - 35: iI1IiiIIIiIi + OoooO0Oo0O0 . III1IiiI * II11iIiIIIiI
  IiI1I = open ( OOOOo00oOOO00 , 'r' )
  o0o0OoOOOoo = IiI1I . read ( )
  IiI1I . close ( )
  print "### ti_id/id.xml contents: " + o0o0OoOOOoo
  if 89 - 89: Iiii1i1
  if 16 - 16: iI1IiiIIIiIi + o00O0OoO - iiIi1i11 * i1Iii1i1I - O0
  IiiI1Ii1IIi = iI111I11I1I1 . yesno ( "Keep Kodi Settings?" , 'Do you want to keep your existing KODI settings (weather, screen calibration, PVR etc.) or wipe and install the ones supplied in this build?' , yeslabel = 'Replace my settings' , nolabel = 'Keep my settings' )
  if IiiI1Ii1IIi == 0 :
   IiIIIii1i1iI ( os . path . join ( iiI1IiI , 'extracted' , 'userdata' , 'guisettings.xml' ) )
   if 8 - 8: iiIi1i11 % i1Iii1i1I . III1IiiI
  for iIIii1iiiIiiI in os . listdir ( OO0o ) :
   iii1II1iI1IIi . append ( iIIii1iiiIiiI )
   if 39 - 39: o0Oo . III1IiiI
   if 4 - 4: i1IIi % oOO00Oo % III1IiiI . i1IIi
  iI1iii1iIiiI = open ( os . path . join ( III1Ii , 'addonlist' ) , mode = 'w+' )
  for iIIii1iiiIiiI in os . listdir ( II11iiii1Ii ) :
   if not iIIii1iiiIiiI in iii1II1iI1IIi and iIIii1iiiIiiI != 'plugin.program.totalinstaller' and iIIii1iiiIiiI != 'script.module.addon.common' and iIIii1iiiIiiI != 'packages' :
    iI1iii1iIiiI . write ( iIIii1iiiIiiI + '|' )
  iI1iii1iIiiI . close ( )
  if iiIIIII1i1iI == 'true' :
   print "### Created addonlist to: " + os . path . join ( III1Ii , 'addonlist' )
  o00oo = [ 'addons' , 'cache' , 'CP_Profiles' , 'system' , 'temp' , 'Thumbnails' ]
  O0oO0oo0O = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' , 'addons*.db' , 'textures13.db' , '.cbcfg' ]
  Oo00O0OO = "Creating Profile Data File"
  oOOOoo0o = "Archiving..."
  iiiI1IiIIii = ""
  IIIIiii = "Please Wait"
  oOoOo ( i1I1I1 , os . path . join ( III1Ii , 'build.zip' ) , Oo00O0OO , oOOOoo0o , iiiI1IiIIii , IIIIiii , o00oo , O0oO0oo0O )
  if iiIIIII1i1iI == 'true' :
   print "### Created: " + os . path . join ( III1Ii , 'build.zip' )
   if 85 - 85: i11111IIIII . iI1IiiIIIiIi * oOO00Oo % II11iIiIIIiI % oO0OooOoO + Iiii1i1
  if IIiIiII11i == 'false' :
   os . remove ( oO0oO00 )
   if iiIIIII1i1iI == 'true' :
    print "### removed: " + oO0oO00
  Iiii1 ( IiI11 )
  oo0OoOooo = 'http://noobsandnerds.com/TI/Community_Builds/downloadcount.php?id=%s' % ( o0OooOoOOoO )
  if not 'update' in video :
   try :
    I11IIIi ( oo0OoOooo , 5 )
   except :
    pass
    if 85 - 85: oO0OooOoO / o0oOo0 * oO0OooOoO
    if 43 - 43: oOO00Oo / O0 + i1IIi - OoooO0Oo0O0 % i11iIiiIii
  O0oOoOOO000 ( III1Ii )
  if 57 - 57: oOO00Oo - i11111IIIII . iiIi1i11
  if 7 - 7: OoooO0Oo0O0 / O00OOOoOoo0O . ii1ii11IIIiiI / II11iIiIIIiI . O0 . o00O0OoO
  if 60 - 60: oO0OooOoO + Iiii1i1 / III1IiiI % OoooooooOO - i1IIi
  if 57 - 57: o0oOo0
def OO00O0O ( url ) :
 o0oo0oo0 = 0
 IIi1II = 0
 print "### Local Build Restore Location: " + url
 if 68 - 68: O00OOOoOoo0O % i11iIiiIii + oO0OooOoO . II11iIiIIIiI
 OO00o0oOO ( 'noobsandnerds.xml' )
 if 80 - 80: i1IIi * OoooO0Oo0O0
 i1iI1i ( )
 if 93 - 93: O0 - i11iIiiIii - ii1ii11IIIiiI + iI1IiiIIIiIi
 if url == 'local' :
  IiI11 = xbmcgui . Dialog ( ) . browse ( 1 , 'Select the backup file you want to restore' , 'files' , '.zip' , False , False , OOO00 )
  if IiI11 == '' :
   o0oo0oo0 = 1
   if 86 - 86: o0Oo / OoooO0Oo0O0 * iI1IiiIIIiIi % i11iIiiIii
 if o0oo0oo0 == 1 :
  print "### No file selected, quitting restore process ###"
  return
  if 20 - 20: i1Iii1i1I . OoooooooOO + i1Iii1i1I + o0oOo0 * OoooO0Oo0O0
 if url != 'local' :
  OOooO0OOoo . create ( "Community Builds" , "Downloading build." , '' , 'Please Wait' )
  IiI11 = os . path . join ( iiiiiIIii , IiIi11iI1 ( ) + '.zip' )
  if 44 - 44: i11iIiiIii
  if not os . path . exists ( iiiiiIIii ) :
   os . makedirs ( iiiiiIIii )
   if 69 - 69: iiIi1i11 * O0 + i11iIiiIii
  downloader . download ( url , IiI11 , OOooO0OOoo )
  if 65 - 65: O0 / i1Iii1i1I . i1IIi * i1Iii1i1I / iIii1I11I1II1 - III1IiiI
 if os . path . exists ( Oo0OoO00oOO0o ) :
  if os . path . exists ( I11i1 ) :
   os . remove ( Oo0OoO00oOO0o )
  else :
   os . rename ( Oo0OoO00oOO0o , I11i1 )
   if 93 - 93: O00OOOoOoo0O % i11iIiiIii - iI1IiiIIIiIi % ii1ii11IIIiiI
 if os . path . exists ( iIi1ii1I1 ) :
  os . remove ( iIi1ii1I1 )
  if 55 - 55: oOO00Oo . OoooO0Oo0O0
  if 63 - 63: III1IiiI
 if not os . path . exists ( I11iii1Ii ) :
  IiIiiI11i1Ii = open ( I11iii1Ii , mode = 'w+' )
  if 79 - 79: OoooO0Oo0O0 - III1IiiI - oOO00Oo . iiIi1i11
 if os . path . exists ( OOO00O ) :
  os . removedirs ( OOO00O )
  if 65 - 65: i11iIiiIii . ii1ii11IIIiiI % i1Iii1i1I + i11111IIIII - i11iIiiIii
  if 60 - 60: Iiii1i1
 try :
  os . rename ( I11i1 , Oo0OoO00oOO0o )
  if 14 - 14: II11iIiIIIiI % III1IiiI * i1Iii1i1I - i11iIiiIii / OoooO0Oo0O0 * i11iIiiIii
 except :
  iI111I11I1I1 . ok ( "NO GUISETTINGS!" , 'No guisettings.xml file has been found.' , 'Please exit XBMC and try again' , '' )
  return
  if 95 - 95: iIii1I11I1II1 + O00OOOoOoo0O . o0Oo + O00OOOoOoo0O * o00O0OoO + iiIi1i11
 iI1iii = xbmcgui . Dialog ( ) . yesno ( i1iIIIi1i , 'We highly recommend backing up your existing build before installing any builds. Would you like to perform a backup first?' , nolabel = 'Backup' , yeslabel = 'Install' )
 if iI1iii == 0 :
  i1i11IiII = xbmc . translatePath ( os . path . join ( OOO00 , 'Community_Builds' , 'My_Builds' ) )
  if 94 - 94: iIii1I11I1II1 / o0Oo * OoooO0Oo0O0
  if not os . path . exists ( i1i11IiII ) :
   os . makedirs ( i1i11IiII )
   if 45 - 45: Iiii1i1 * o00O0OoO / iIii1I11I1II1 / o0Oo % oO0OooOoO
  iIo00OOOOOo0OOo = i1II11I11ii1 ( heading = "Enter a name for this backup" )
  if ( not iIo00OOOOOo0OOo ) :
   return False , 0
   if 49 - 49: iI1IiiIIIiIi / i1Iii1i1I . i1Iii1i1I . i1Iii1i1I + i11iIiiIii % o00O0OoO
  I1II1IiI1 = urllib . quote_plus ( iIo00OOOOOo0OOo )
  iIIiI11iI1Ii1 = xbmc . translatePath ( os . path . join ( i1i11IiII , I1II1IiI1 + '.zip' ) )
  o00oo = [ o0OO00 ]
  O0oO0oo0O = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' ]
  Oo00O0OO = "Creating full backup of existing build"
  oOOOoo0o = "Archiving..."
  iiiI1IiIIii = ""
  IIIIiii = "Please Wait"
  if 7 - 7: i11111IIIII * o0oOo0 + O00OOOoOoo0O
  oOoOo ( iIii1 , iIIiI11iI1Ii1 , Oo00O0OO , oOOOoo0o , iiiI1IiIIii , IIIIiii , o00oo , O0oO0oo0O )
 iIiiIi11iiI1 = xbmcgui . Dialog ( ) . yesno ( i1iIIIi1i , 'Would you like to keep your existing database files or overwrite? Overwriting will wipe any existing music or video library you may have scanned in.' , nolabel = 'Overwrite' , yeslabel = 'Keep Existing' )
 if iIiiIi11iiI1 == 1 :
  if os . path . exists ( O0o0O00Oo0o0 ) :
   shutil . rmtree ( O0o0O00Oo0o0 )
   if 82 - 82: o00O0OoO % i1IIi
  try :
   shutil . copytree ( ooOoOoo0O , O0o0O00Oo0o0 , symlinks = False , ignore = shutil . ignore_patterns ( "Textures13.db" , "Addons16.db" , "Addons15.db" , "saltscache.db-wal" , "saltscache.db-shm" , "saltscache.db" , "onechannelcache.db" ) )
   if 14 - 14: Iiii1i1 + iI1IiiIIIiIi * II11iIiIIIiI
  except :
   IIi1II = xbmcgui . Dialog ( ) . yesno ( i1iIIIi1i , 'There was an error trying to backup some databases. Continuing may wipe your existing library. Do you wish to continue?' , nolabel = 'No, cancel' , yeslabel = 'Yes, overwrite' )
   if IIi1II == 1 : pass
   if IIi1II == 0 : o0oo0oo0 = 1 ; return
   if 49 - 49: II11iIiIIIiI
  iIIiI11iI1Ii1 = xbmc . translatePath ( os . path . join ( OOO00 , 'Database.zip' ) )
  iI11Ii111 ( O0o0O00Oo0o0 , iIIiI11iI1Ii1 )
  if 57 - 57: O0 * o0oOo0 - i1Iii1i1I - iIii1I11I1II1 * i1Iii1i1I
 if o0oo0oo0 == 1 :
  print "### User decided to exit restore function ###"
  return
  if 9 - 9: i11111IIIII . o00O0OoO
 else :
  time . sleep ( 1 )
  OOOoO00 = open ( Ooo , mode = 'r' )
  iiI1II = OOOoO00 . read ( )
  OOOoO00 . close ( )
  if 23 - 23: O0 % OoooooooOO - O0 . o0Oo + i11iIiiIii
  if 96 - 96: o0oOo0 % O0
  print "### Checking zip file structure ###"
  Ooo0oOOO = zipfile . ZipFile ( IiI11 )
  if 'xbmc.log' in Ooo0oOOO . namelist ( ) or 'kodi.log' in Ooo0oOOO . namelist ( ) or '.git' in Ooo0oOOO . namelist ( ) or '.svn' in Ooo0oOOO . namelist ( ) :
   print "### Whoever created this build has used completely the wrong backup method, lets try and fix it! ###"
   iI111I11I1I1 . ok ( 'Fixing Bad Zip' , 'Whoever created this build has used the wrong backup method, please wait while we fix it - this could take some time! Click OK to proceed' )
   Ooo00O = zipfile . ZipFile ( IiI11 , 'r' )
   OOoO00o00oo = os . path . join ( iiiiiIIii , 'fixed.zip' )
   iIiiIi11 = zipfile . ZipFile ( OOoO00o00oo , 'w' )
   if 73 - 73: i11111IIIII - i11111IIIII / OoooooooOO
   OOooO0OOoo . create ( "Fixing Build" , "Checking " , '' , 'Please Wait' )
   if 53 - 53: oOO00Oo / ii1ii11IIIiiI . OoooooooOO
   for iIIii1iiiIiiI in Ooo00O . infolist ( ) :
    buffer = Ooo00O . read ( iIIii1iiiIiiI . filename )
    O00OO0oo00O0O = str ( iIIii1iiiIiiI . filename )
    if 14 - 14: o0Oo
    if ( iIIii1iiiIiiI . filename [ - 4 : ] != '.log' ) and not '.git' in O00OO0oo00O0O and not '.svn' in O00OO0oo00O0O :
     iIiiIi11 . writestr ( iIIii1iiiIiiI , buffer )
     OOooO0OOoo . update ( 0 , "Fixing..." , '[COLOR yellow]%s[/COLOR]' % iIIii1iiiIiiI . filename , 'Please Wait' )
     if 45 - 45: O0 / III1IiiI + II11iIiIIIiI
   OOooO0OOoo . close ( )
   iIiiIi11 . close ( )
   Ooo00O . close ( )
   IiI11 = OOoO00o00oo
   if 37 - 37: OoooooooOO / OoooO0Oo0O0 % oOO00Oo
  OOooO0OOoo . create ( "Restoring Backup Build" , "Checking " , '' , 'Please Wait' )
  OOooO0OOoo . update ( 0 , "" , "Extracting Zip Please Wait" )
  if 34 - 34: O00OOOoOoo0O . o00O0OoO % III1IiiI - O0 * O0
  try :
   extract . all ( IiI11 , iIii1 , OOooO0OOoo )
  except :
   iI111I11I1I1 . ok ( 'ERROR IN BUILD ZIP' , 'Please contact the build author, there are errors in this zip file that has caused the install process to fail. Most likely cause is it contains files with special characters in the name.' )
   return
   if 11 - 11: O0 * i11iIiiIii * oO0OooOoO / iiIi1i11 * O0
  time . sleep ( 1 )
  if 71 - 71: o00O0OoO . II11iIiIIIiI
  if iIiiIi11iiI1 == 1 :
   extract . all ( iIIiI11iI1Ii1 , ooOoOoo0O , OOooO0OOoo )
   if 24 - 24: iiIi1i11 * OoooooooOO . O0 . ii1ii11IIIiiI . o0Oo
   if IIi1II != 1 :
    shutil . rmtree ( O0o0O00Oo0o0 )
    if 80 - 80: O0 * ii1ii11IIIiiI . Iiii1i1 % O0
  ii11I1iIIi = open ( Ooo , mode = 'w+' )
  ii11I1iIIi . write ( iiI1II )
  ii11I1iIIi . close ( )
  try :
   os . rename ( I11i1 , iIi1ii1I1 )
   if 29 - 29: iI1IiiIIIiIi + i1Iii1i1I % OoooO0Oo0O0 + o00O0OoO * II11iIiIIIiI - i11iIiiIii
  except :
   print "NO GUISETTINGS DOWNLOADED"
   if 24 - 24: i11iIiiIii . o0oOo0 + o0oOo0 - i11iIiiIii % iiIi1i11
  time . sleep ( 1 )
  IiIiiI11i1Ii = open ( Oo0OoO00oOO0o , mode = 'r' )
  i11ii1iI = IiIiiI11i1Ii . read ( )
  IiIiiI11i1Ii . close ( )
  ooIii = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( i11ii1iI )
  oOOOOOoOOoo0 = ooIii [ 0 ] if ( len ( ooIii ) > 0 ) else ''
  o0OO00oOOO0o0 = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( i11ii1iI )
  oo0OOO0OOoOO = o0OO00oOOO0o0 [ 0 ] if ( len ( o0OO00oOOO0o0 ) > 0 ) else ''
  iiii = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( i11ii1iI )
  oOoO = iiii [ 0 ] if ( len ( iiii ) > 0 ) else ''
  if 58 - 58: o0Oo
  try :
   oOOoO0oO0oo0O = open ( iIi1ii1I1 , mode = 'r' )
   oO00Oo = oOOoO0oO0oo0O . read ( )
   oOOoO0oO0oo0O . close ( )
   ooOOo0O0o00o00 = re . compile ( '<skinsettings>[\s\S]*?<\/skinsettings>' ) . findall ( oO00Oo )
   oo00oO00oooo = ooOOo0O0o00o00 [ 0 ] if ( len ( ooOOo0O0o00o00 ) > 0 ) else ''
   o0o = re . compile ( '<skin default[\s\S]*?<\/skin>' ) . findall ( oO00Oo )
   ooo0Oo00O = o0o [ 0 ] if ( len ( o0o ) > 0 ) else ''
   I1I1ii111i1IIi1i = re . compile ( '<lookandfeel>[\s\S]*?<\/lookandfeel>' ) . findall ( oO00Oo )
   I1iII1 = I1I1ii111i1IIi1i [ 0 ] if ( len ( I1I1ii111i1IIi1i ) > 0 ) else ''
   IIiIi11i1i = i11ii1iI . replace ( oOOOOOoOOoo0 , oo00oO00oooo ) . replace ( oOoO , I1iII1 ) . replace ( oo0OOO0OOoOO , ooo0Oo00O )
   i1I = open ( Oo0OoO00oOO0o , mode = 'w+' )
   i1I . write ( str ( IIiIi11i1i ) )
   i1I . close ( )
   if 94 - 94: oOO00Oo + iI1IiiIIIiIi % oOO00Oo . Iiii1i1 - o0oOo0 * o0Oo
  except :
   print "### NO GUISETTINGS DOWNLOADED"
   if 62 - 62: II11iIiIIIiI * i1IIi % OoooO0Oo0O0 + II11iIiIIIiI . O0 . o0oOo0
  if os . path . exists ( I11i1 ) :
   os . remove ( I11i1 )
   if 57 - 57: II11iIiIIIiI - Iiii1i1 + O0 % oOO00Oo
  os . rename ( Oo0OoO00oOO0o , I11i1 )
  try :
   os . remove ( iIi1ii1I1 )
   if 72 - 72: iiIi1i11 . O00OOOoOoo0O / oO0OooOoO
  except :
   pass
   if 69 - 69: iiIi1i11 * oO0OooOoO - o0oOo0 - i1IIi + i11iIiiIii
  os . makedirs ( OOO00O )
  time . sleep ( 1 )
  O00OO00OOOoO ( )
  if 50 - 50: OoooooooOO * i1IIi / III1IiiI
  if 83 - 83: i1IIi
  if 38 - 38: OoooooooOO * iIii1I11I1II1
  if 54 - 54: OoooooooOO . Iiii1i1
  if 71 - 71: iI1IiiIIIiIi
  if 31 - 31: o00O0OoO . i11iIiiIii . ii1ii11IIIiiI * II11iIiIIIiI % iI1IiiIIIiIi . oOO00Oo
  if 92 - 92: OoooooooOO / O0 * i1IIi + iIii1I11I1II1
  if 93 - 93: o0oOo0 % Iiii1i1
  if 46 - 46: OoooO0Oo0O0 * O00OOOoOoo0O * i11111IIIII * OoooO0Oo0O0 . OoooO0Oo0O0
  if 43 - 43: o0oOo0 . i1IIi
  if 68 - 68: i11111IIIII % II11iIiIIIiI . O0 - O00OOOoOoo0O + OoooO0Oo0O0 . i11iIiiIii
  if 45 - 45: o0Oo
  if 17 - 17: OoooooooOO - o0oOo0 + iI1IiiIIIiIi . OoooooooOO % II11iIiIIIiI
  if 92 - 92: Iiii1i1 - iiIi1i11 % ii1ii11IIIiiI - oOO00Oo % i1IIi
  if 38 - 38: OoooO0Oo0O0 . o00O0OoO / O00OOOoOoo0O % o00O0OoO
  if 10 - 10: O0 . o0Oo * oOO00Oo / i1Iii1i1I
  if 61 - 61: II11iIiIIIiI - Iiii1i1
  if 51 - 51: i1Iii1i1I * o0oOo0 / O0 / O0
  if 52 - 52: OoooooooOO % O0
def IIIiIIIi111iI ( ) :
 i1iI1i ( )
 OO0oOooo = xbmcgui . Dialog ( ) . browse ( 1 , 'Select the guisettings zip file you want to restore' , 'files' , '.zip' , False , False , OOO00 )
 if 49 - 49: iIii1I11I1II1 / o00O0OoO
 if OO0oOooo == '' :
  return
  if 53 - 53: ii1ii11IIIiiI
 else :
  OoO0OO0 = 1
  iIioO00O0o0oOOO ( OO0oOooo , OoO0OO0 )
  if 96 - 96: OoooooooOO - iIii1I11I1II1 . III1IiiI
  if 2 - 2: i1IIi
def Iii1I1i1i1 ( name , url , video ) :
 iI1iii = xbmcgui . Dialog ( ) . yesno ( 'Full Wipe And New Install' , 'This is a great option for first time install or if you\'re encountering any issues with your device. This will wipe all your Kodi settings, do you wish to continue?' , nolabel = 'Cancel' , yeslabel = 'Accept' )
 if iI1iii == 0 :
  return
  if 5 - 5: O0 . i11iIiiIii + OoooooooOO / i1Iii1i1I % o0Oo
 elif iI1iii == 1 :
  if 80 - 80: O00OOOoOoo0O % II11iIiIIIiI
  oO0oO00 = '/storage/openelec_temp/'
  oooooOO0 = '/storage/.restore/'
  iiI = os . path . join ( oooooOO0 , IiIi11iI1 ( ) + '.tar' )
  if not os . path . exists ( oooooOO0 ) :
   try :
    os . makedirs ( oooooOO0 )
   except :
    pass
  try :
   OOooO0OOoo . create ( 'Downloading Build' , 'Please wait' , '' , '' )
   downloader . download ( url , iiI )
   O0ooO0 = True
  except :
   O0ooO0 = False
  time . sleep ( 2 )
  if 69 - 69: II11iIiIIIiI + i11111IIIII - o00O0OoO . iIii1I11I1II1 - iI1IiiIIIiIi
  if O0ooO0 == True :
   if 27 - 27: i1Iii1i1I % II11iIiIIIiI . OoooO0Oo0O0 . i1IIi % O00OOOoOoo0O . oOO00Oo
   try :
    IiIiiI11i1Ii = open ( I11iii1Ii , mode = 'r' )
    i11ii1iI = IiIiiI11i1Ii . read ( )
    IiIiiI11i1Ii . close ( )
    if 37 - 37: i1Iii1i1I + Iiii1i1 * iI1IiiIIIiIi + i11111IIIII
    II1IIIi = re . compile ( 'id="(.+?)"' ) . findall ( i11ii1iI )
    o0OooOoOOoO = II1IIIi [ 0 ] if ( len ( II1IIIi ) > 0 ) else ''
    if 39 - 39: O0 * II11iIiIIIiI - o0Oo + iI1IiiIIIiIi / oO0OooOoO
   except :
    pass
   if o0OooOoOOoO != '' :
    oo0OoOooo = 'http://noobsandnerds.com/TI/Community_Builds/downloadcount.php?id=%s' % ( o0OooOoOOoO )
   try :
    I11IIIi ( oo0OoOooo , 5 )
   except :
    pass
    if 66 - 66: o0oOo0 + III1IiiI % OoooooooOO
    if 23 - 23: III1IiiI . O00OOOoOoo0O + iIii1I11I1II1
   if not os . path . exists ( oO0oO00 ) :
    try :
     os . makedirs ( oO0oO00 )
    except :
     pass
     if 17 - 17: i11111IIIII
   iI111I11I1I1 . ok ( "Download Complete - Press OK To Reboot" , 'Once you press OK your device will attempt to reboot, if it hasn\'t rebooted within 30 seconds please pull the power to manually shutdown. When booting you may see lines of text, don\'t worry this is normal update behaviour!' )
   xbmc . executebuiltin ( 'Reboot' )
   if 12 - 12: i1IIi . ii1ii11IIIiiI
   if 14 - 14: iiIi1i11 + oO0OooOoO % iiIi1i11 . III1IiiI * o0oOo0
def o0O00ooo0oO0o ( ) :
 o0oo0oo0 = 0
 iI1iii = xbmcgui . Dialog ( ) . yesno ( 'Full Wipe And New Install' , 'This is a great option if you\'re encountering any issues with your device. This will wipe all your Kodi settings and restore with whatever is in the backup, do you wish to continue?' , nolabel = 'Cancel' , yeslabel = 'Accept' )
 if iI1iii == 0 :
  return
  if 21 - 21: iIii1I11I1II1 / o0oOo0 * Iiii1i1
 elif iI1iii == 1 :
  IiI11 = xbmcgui . Dialog ( ) . browse ( 1 , 'Select the backup file you want to restore' , 'files' , '.tar' , False , False , oO0 )
  if IiI11 == '' :
   o0oo0oo0 = 1
   if 98 - 98: O0 + oOO00Oo
  if o0oo0oo0 == 1 :
   print "### No file selected, quitting restore process ###"
   return
  iiI = os . path . join ( Ii1iIiII1ii1 , IiIi11iI1 ( ) + '.tar' )
  if not os . path . exists ( Ii1iIiII1ii1 ) :
   try :
    os . makedirs ( Ii1iIiII1ii1 )
   except :
    pass
  OOooO0OOoo . create ( 'Copying File To Restore Folder' , '' , 'Please wait...' )
  shutil . copyfile ( IiI11 , iiI )
  xbmc . executebuiltin ( 'Reboot' )
  if 23 - 23: i1Iii1i1I / i1Iii1i1I
  if 25 - 25: i1Iii1i1I
def OO0OO0 ( ) :
 IiiIIi1 ( )
 if OOOOOo ( ) :
  oO00oOOoooO ( '' , '[COLOR=dodgerblue]Restore a locally stored OpenELEC Backup[/COLOR]' , '' , 'restore_local_OE' , '' , '' , '' , 'Restore A Full OE System Backup' )
  if 92 - 92: o0Oo / OoooO0Oo0O0 + iI1IiiIIIiIi * oO0OooOoO
 oO00oOOoooO ( '' , '[COLOR=dodgerblue]Restore A Locally stored build[/COLOR]' , 'local' , 'restore_local_CB' , '' , '' , '' , 'Restore A Full System Backup' )
 oO00oOOoooO ( '' , '[COLOR=dodgerblue]Restore Local guisettings file[/COLOR]' , 'url' , 'LocalGUIDialog' , '' , '' , '' , 'Back Up Your Full System' )
 if 78 - 78: Iiii1i1 - i1IIi + O00OOOoOoo0O + II11iIiIIIiI * OoooO0Oo0O0 * oOO00Oo
 if os . path . exists ( os . path . join ( OOO00 , 'addons.zip' ) ) :
  oO00oOOoooO ( '' , 'Restore Your Addons' , 'addons' , 'restore_zip' , '' , '' , '' , 'Restore Your Addons' )
  if 97 - 97: i1IIi
 if os . path . exists ( os . path . join ( OOO00 , 'addon_data.zip' ) ) :
  oO00oOOoooO ( '' , 'Restore Your Addon UserData' , 'addon_data' , 'restore_zip' , '' , '' , '' , 'Restore Your Addon UserData' )
  if 29 - 29: o0Oo
 if os . path . exists ( os . path . join ( OOO00 , 'guisettings.xml' ) ) :
  oO00oOOoooO ( '' , 'Restore Guisettings.xml' , I11i1 , 'restore_backup' , '' , '' , '' , 'Restore Your guisettings.xml' )
  if 37 - 37: OoooO0Oo0O0 * Iiii1i1 * o0Oo * O0
 if os . path . exists ( os . path . join ( OOO00 , 'favourites.xml' ) ) :
  oO00oOOoooO ( '' , 'Restore Favourites.xml' , IIIII , 'restore_backup' , '' , '' , '' , 'Restore Your favourites.xml' )
  if 35 - 35: o0Oo - OoooO0Oo0O0 * i1Iii1i1I + i11111IIIII / i1IIi
 if os . path . exists ( os . path . join ( OOO00 , 'sources.xml' ) ) :
  oO00oOOoooO ( '' , 'Restore Source.xml' , ooooooO0oo , 'restore_backup' , '' , '' , '' , 'Restore Your sources.xml' )
  if 46 - 46: II11iIiIIIiI . o0oOo0 % II11iIiIIIiI / oO0OooOoO * o0oOo0 * iiIi1i11
 if os . path . exists ( os . path . join ( OOO00 , 'advancedsettings.xml' ) ) :
  oO00oOOoooO ( '' , 'Restore Advancedsettings.xml' , IIiiiiiiIi1I1 , 'restore_backup' , '' , '' , '' , 'Restore Your advancedsettings.xml' )
  if 59 - 59: Iiii1i1 * i1Iii1i1I
 if os . path . exists ( os . path . join ( OOO00 , 'keyboard.xml' ) ) :
  oO00oOOoooO ( '' , 'Restore Advancedsettings.xml' , OOOO , 'restore_backup' , '' , '' , '' , 'Restore Your keyboard.xml' )
  if 31 - 31: o00O0OoO / O0
 if os . path . exists ( os . path . join ( OOO00 , 'RssFeeds.xml' ) ) :
  oO00oOOoooO ( '' , 'Restore RssFeeds.xml' , oOoOooOo0o0 , 'restore_backup' , '' , '' , '' , 'Restore Your RssFeeds.xml' )
  if 57 - 57: i1IIi % o0oOo0
  if 69 - 69: oOO00Oo
def o00ooOOo0ooO0 ( url ) :
 i1iI1i ( )
 if 'addons' in url :
  I11i1I1iiI1iI111 = xbmc . translatePath ( os . path . join ( OOO00 , 'addons.zip' ) )
  iIIiiIi = II11iiii1Ii
  if 92 - 92: iI1IiiIIIiIi . i1Iii1i1I % Iiii1i1 % O0
 else :
  I11i1I1iiI1iI111 = xbmc . translatePath ( os . path . join ( OOO00 , 'addon_data.zip' ) )
  iIIiiIi = O0OoO000O0OO
  if 93 - 93: iiIi1i11 - i11iIiiIii . OoooooooOO
 if 'Backup' in i1iIIIi1i :
  Oo ( )
  OOooO0OOoo . create ( "Creating Backup" , "Backing Up" , '' , 'Please Wait' )
  oO0OO = zipfile . ZipFile ( I11i1I1iiI1iI111 , 'w' , zipfile . ZIP_DEFLATED )
  OO0o0OO0 = len ( iIIiiIi )
  OooOo0OOO = [ ]
  I1Io00oOOoO0oO = [ ]
  for I1Ii , ooooOoO0O , IIII in os . walk ( iIIiiIi ) :
   for file in IIII :
    I1Io00oOOoO0oO . append ( file )
  O0oOo = len ( I1Io00oOOoO0oO )
  for I1Ii , ooooOoO0O , IIII in os . walk ( iIIiiIi ) :
   for file in IIII :
    OooOo0OOO . append ( file )
    I11oOOooo = len ( OooOo0OOO ) / float ( O0oOo ) * 100
    OOooO0OOoo . update ( int ( I11oOOooo ) , "Backing Up" , '[COLOR yellow]%s[/COLOR]' % file , 'Please Wait' )
    ooo0O0Oo = os . path . join ( I1Ii , file )
    if not 'temp' in ooooOoO0O :
     if not o0OO00 in ooooOoO0O :
      import time
      i1iii11 = '01/01/1980'
      oOo0O0o0000o0O0 = time . strftime ( '%d/%m/%Y' , time . gmtime ( os . path . getmtime ( ooo0O0Oo ) ) )
      if oOo0O0o0000o0O0 > i1iii11 :
       oO0OO . write ( ooo0O0Oo , ooo0O0Oo [ OO0o0OO0 : ] )
  oO0OO . close ( )
  OOooO0OOoo . close ( )
  iI111I11I1I1 . ok ( "Backup Complete" , "You Are Now Backed Up" , '' , '' )
  if 86 - 86: o0Oo . o0Oo
 else :
  OOooO0OOoo . create ( "Extracting Zip" , "Checking " , '' , 'Please Wait' )
  OOooO0OOoo . update ( 0 , "" , "Extracting Zip Please Wait" )
  extract . all ( I11i1I1iiI1iI111 , iIIiiIi , OOooO0OOoo )
  time . sleep ( 1 )
  xbmc . executebuiltin ( 'UpdateLocalAddons ' )
  xbmc . executebuiltin ( "UpdateAddonRepos" )
  if 67 - 67: i11iIiiIii . o0oOo0 / iIii1I11I1II1 % iI1IiiIIIiIi * III1IiiI - O0
  if 'Backup' in i1iIIIi1i :
   iI111I11I1I1 . ok ( "Install Complete" , 'Kodi will now close. Just re-open Kodi and wait for all the updates to complete.' )
   O00OO00OOOoO ( )
   if 100 - 100: OoooooooOO / II11iIiIIIiI - iI1IiiIIIiIi . o00O0OoO / OoooooooOO - o00O0OoO
  else :
   iI111I11I1I1 . ok ( "SUCCESS!" , "You Are Now Restored" , '' , '' )
   if 86 - 86: o00O0OoO + II11iIiIIIiI * iiIi1i11 * i1IIi / OoooooooOO
   if 64 - 64: iiIi1i11 + oOO00Oo / i11iIiiIii - O00OOOoOoo0O + iiIi1i11
def OooOO0Ooo0o ( url ) :
 xbmc . executebuiltin ( 'RunAddon(' + url + ')' )
 if 19 - 19: iIii1I11I1II1 % OoooooooOO - II11iIiIIIiI * O0
 if 50 - 50: O0
def Iii1I1III11 ( title ) :
 Oo00Ooo0O0O0o = ''
 oo0O00o0 = xbmc . Keyboard ( Oo00Ooo0O0O0o , title )
 oo0O00o0 . doModal ( )
 if oo0O00o0 . isConfirmed ( ) :
  Oo00Ooo0O0O0o = oo0O00o0 . getText ( ) . replace ( ' ' , '%20' )
  if Oo00Ooo0O0O0o == None :
   return False
 return Oo00Ooo0O0O0o
 if 86 - 86: o0Oo + iIii1I11I1II1 % o0oOo0 / iiIi1i11 / OoooooooOO
 if 96 - 96: III1IiiI - oO0OooOoO % o0Oo * i11111IIIII * o00O0OoO - iiIi1i11
def O0OO ( url ) :
 iIo00OOOOOo0OOo = i1II11I11ii1 ( heading = "Search for add-ons" )
 if 83 - 83: i1IIi * Iiii1i1 - i11111IIIII / iI1IiiIIIiIi
 if ( not iIo00OOOOOo0OOo ) : return False , 0
 if 48 - 48: III1IiiI . oO0OooOoO - O00OOOoOoo0O % i1IIi . O00OOOoOoo0O
 if 32 - 32: iI1IiiIIIiIi * o0Oo - iiIi1i11 . II11iIiIIIiI / O0 + iI1IiiIIIiIi
 I1II1IiI1 = urllib . quote_plus ( iIo00OOOOOo0OOo )
 url += I1II1IiI1
 i1IIiI1iII ( url )
 if 67 - 67: O00OOOoOoo0O % II11iIiIIIiI
 if 7 - 7: i11iIiiIii % OoooO0Oo0O0 / Iiii1i1 % II11iIiIIIiI - ii1ii11IIIiiI
def o0OOo0o0 ( url ) :
 iIo00OOOOOo0OOo = i1II11I11ii1 ( heading = "Search for content" )
 if 60 - 60: oOO00Oo / II11iIiIIIiI
 if 19 - 19: iIii1I11I1II1 . ii1ii11IIIiiI / OoooooooOO
 if ( not iIo00OOOOOo0OOo ) : return False , 0
 if 2 - 2: O0 - O0 % Iiii1i1 / OoooO0Oo0O0
 if 76 - 76: ii1ii11IIIiiI * III1IiiI - ii1ii11IIIiiI
 I1II1IiI1 = urllib . quote_plus ( iIo00OOOOOo0OOo )
 url += I1II1IiI1
 OO0oooOO ( url )
 if 57 - 57: OoooooooOO / O00OOOoOoo0O + III1IiiI . iI1IiiIIIiIi
 if 14 - 14: i11iIiiIii % iiIi1i11 * oOO00Oo * O00OOOoOoo0O
def o00000ooo0oo ( url ) :
 oOo0 = 'http://noobsandnerds.com/TI/Community_Builds/community_builds.php?id=%s' % ( url )
 OOOoOO = I11IIIi ( oOo0 , 5 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 OOo0o0O0O = re . compile ( 'name="(.+?)"' ) . findall ( OOOoOO )
 iIiO0O = re . compile ( 'author="(.+?)"' ) . findall ( OOOoOO )
 OooIiIIII1i11I = re . compile ( 'version="(.+?)"' ) . findall ( OOOoOO )
 i1iIIIi1i = OOo0o0O0O [ 0 ] if ( len ( OOo0o0O0O ) > 0 ) else ''
 ooOo00 = iIiO0O [ 0 ] if ( len ( iIiO0O ) > 0 ) else ''
 iII1iii = OooIiIIII1i11I [ 0 ] if ( len ( OooIiIIII1i11I ) > 0 ) else ''
 iI111I11I1I1 . ok ( i1iIIIi1i , 'Author: [COLOR=dodgerblue]' + ooOo00 + '[/COLOR]      Latest Version: [COLOR=dodgerblue]' + iII1iii + '[/COLOR]' , '' , 'Click OK to view the build page.' )
 try :
  II1io0Oo00oOO ( url + '&visibility=homepage' , url )
 except :
  return
  print "### Could not find build No. " + url
  iI111I11I1I1 . ok ( 'Build Not Found' , 'Sorry we couldn\'t find the build, it may be it\'s marked as private or servers may be busy. Please try manually searching via the Community Builds section' )
  if 96 - 96: III1IiiI % iIii1I11I1II1 / iIii1I11I1II1 . i1Iii1i1I . iI1IiiIIIiIi
  if 49 - 49: OoooO0Oo0O0 * Iiii1i1 + O00OOOoOoo0O
def oOOoOOO ( url ) :
 iI111I11I1I1 . ok ( "This build is not complete" , 'The guisettings.xml file was not copied over during the last install process. Click OK to go to the build page and complete Install Step 2 (guisettings fix).' )
 if 58 - 58: i11111IIIII * i1Iii1i1I . o0Oo + iiIi1i11
 try :
  II1io0Oo00oOO ( url + '&visibility=homepage' , url )
  if 4 - 4: ii1ii11IIIiiI . iiIi1i11 + i11iIiiIii + o0oOo0 % III1IiiI - o0oOo0
 except :
  return
  print "### Could not find build No. " + url
  iI111I11I1I1 . ok ( 'Build Not Found' , 'Sorry we couldn\'t find the build, it may be it\'s marked as private. Please try manually searching via the Community Builds section' )
  if 45 - 45: III1IiiI
  if 66 - 66: iiIi1i11
def iI1iIiiIii ( ) :
 oOo0 = 'http://noobsandnerds.com/TI/login/login_details.php?user=%s&pass=%s' % ( i1i1II , O0oo0OO0 )
 OOOoOO = I11IIIi ( oOo0 , 5 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 ooIi = re . compile ( 'login_msg="(.+?)"' ) . findall ( OOOoOO )
 O00Oo = ooIi [ 0 ] if ( len ( ooIi ) > 0 ) else ''
 O0OOOOO0O = re . compile ( 'posts="(.+?)"' ) . findall ( OOOoOO )
 ii111 = re . compile ( 'messages="(.+?)"' ) . findall ( OOOoOO )
 i1oO0o00oOo00oO = re . compile ( 'unread="(.+?)"' ) . findall ( OOOoOO )
 OoooOOO0 = re . compile ( 'email="(.+?)"' ) . findall ( OOOoOO )
 O0O0oooo = ii111 [ 0 ] if ( len ( ii111 ) > 0 ) else ''
 O0oi1IiI = i1oO0o00oOo00oO [ 0 ] if ( len ( i1oO0o00oOo00oO ) > 0 ) else ''
 oO0oooo = OoooOOO0 [ 0 ] if ( len ( OoooOOO0 ) > 0 ) else ''
 iIiI11I = O0OOOOO0O [ 0 ] if ( len ( O0OOOOO0O ) > 0 ) else ''
 if 44 - 44: iIii1I11I1II1 * III1IiiI
 oOo0 = 'http://noobsandnerds.com/TI/menu_check'
 try :
  OOOoOO = I11IIIi ( oOo0 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
  O00OoOoO = re . compile ( 'd="(.+?)"' ) . findall ( OOOoOO )
  ooO0o0oo = O00OoOoO [ 0 ] if ( len ( O00OoOoO ) > 0 ) else 'none'
 except :
  ooO0o0oo = 'none'
  if 57 - 57: o00O0OoO . iIii1I11I1II1 + o00O0OoO . i11111IIIII + i11111IIIII
 if 'Welcome Back' in O00Oo :
  print "### ATTEMPTING TO WRITE COOKIE "
  i1I = open ( oo0OooOOo0 , mode = 'w+' )
  i1I . write ( 'd="' + binascii . hexlify ( IiIi11iI1 ( ) ) + '"\nl="' + binascii . hexlify ( O00Oo ) + '"\np="' + binascii . hexlify ( iIiI11I ) + '"\nm="' + binascii . hexlify ( ooO0o0oo ) + '"' )
  i1I . close ( )
 if not "Account currently restricted" in O00Oo :
  iI111I11I1I1 . ok ( '[COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR]' , 'Username:  ' + i1i1II , 'Email: ' + oO0oooo , 'Unread Messages: ' + O0oi1IiI + '/' + O0O0oooo + '[CR]Posts: ' + iIiI11I )
 else :
  iI111I11I1I1 . ok ( 'Account Currently Restricted' , 'Your account has a restriction in place, this is usually for account sharing. Any users caught sharing accounts are automatically put on a suspension and continual abuse will result in a permanent ban.' )
  if 53 - 53: OoooO0Oo0O0 / i1Iii1i1I - OoooO0Oo0O0 * ii1ii11IIIiiI
  if 81 - 81: Iiii1i1 - II11iIiIIIiI / oO0OooOoO / II11iIiIIIiI / i1IIi . oOO00Oo
def oOOOo ( url , type ) :
 if type == 'communitybuilds' :
  Ii1i1 = 'grab_builds'
  if url . endswith ( "visibility=public" ) :
   oO00oOOoooO ( 'folder' , '[COLOR=yellow]Manual Search[/COLOR]' , '&visibility=public' , 'manual_search' , '' , '' , '' , '' )
  if url . endswith ( "visibility=private" ) :
   oO00oOOoooO ( 'folder' , '[COLOR=yellow]Manual Search[/COLOR]' , '&visibility=private' , 'manual_search' , '' , '' , '' , '' )
 if type == 'tutorials' :
  Ii1i1 = 'grab_tutorials'
 if type == 'hardware' :
  Ii1i1 = 'grab_hardware'
 if type == 'addons' :
  Ii1i1 = 'grab_addons'
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Sort by Most Popular[/COLOR]' , str ( url ) + '&sortx=downloads&orderx=DESC' , Ii1i1 , '' , '' , '' , '' )
 if type == 'hardware' :
  oO00oOOoooO ( 'folder' , '[COLOR=lime]Filter Results[/COLOR]' , url , 'hardware_filter_menu' , '' , '' , '' , '' )
 if type != 'addons' :
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Sort by Most Popular[/COLOR]' , str ( url ) + '&sortx=downloadcount&orderx=DESC' , Ii1i1 , '' , '' , '' , '' )
 if type == 'tutorials' or type == 'hardware' :
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Sort by Newest[/COLOR]' , str ( url ) + '&sortx=Added&orderx=DESC' , Ii1i1 , '' , '' , '' , '' )
 else :
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Sort by Newest[/COLOR]' , str ( url ) + '&sortx=created&orderx=DESC' , Ii1i1 , '' , '' , '' , '' )
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Sort by Recently Updated[/COLOR]' , str ( url ) + '&sortx=updated&orderx=DESC' , Ii1i1 , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Sort by A-Z[/COLOR]' , str ( url ) + '&sortx=name&orderx=ASC' , Ii1i1 , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Sort by Z-A[/COLOR]' , str ( url ) + '&sortx=name&orderx=DESC' , Ii1i1 , '' , '' , '' , '' )
 if type == 'public_CB' :
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Sort by Genre[/COLOR]' , url , 'genres' , '' , '' , '' , '' )
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue]Sort by Country/Language[/COLOR]' , url , 'countries' , '' , '' , '' , '' )
  if 14 - 14: O00OOOoOoo0O / ii1ii11IIIiiI / i11iIiiIii - O00OOOoOoo0O / oOO00Oo - iiIi1i11
  if 81 - 81: i1Iii1i1I % iI1IiiIIIiIi . o0oOo0
def OOo00o0oOO0o ( ) :
 oO0o ( 'Speed Test Instructions' , '[COLOR=blue][B]What file should I use: [/B][/COLOR][CR]This function will download a file and will work out your speed based on how long it took to download. You will then be notified of '
 'what quality streams you can expect to stream without buffering. You can choose to download a 10MB, 16MB, 32MB, 64MB or 128MB file to use with the test. Using the larger files will give you a better '
 'indication of how reliable your speeds are but obviously if you have a limited amount of bandwidth allowance you may want to opt for a smaller file.'
 '[CR][CR][COLOR=blue][B]How accurate is this speed test:[/B][/COLOR][CR]Not very accurate at all! As this test is based on downloading a file from a server it\'s reliant on the server not having a go-slow day '
 'but the servers used should be pretty reliable. The 10MB file is hosted on a different server to the others so if you\'re not getting the results expected please try another file. If you have a fast fiber '
 'connection the chances are your speed will show as considerably slower than your real download speed due to the server not being able to send the file as fast as your download speed allows. Essentially the '
 'test results will be limited by the speed of the server but you will at least be able to see if it\'s your connection that\'s causing buffering or if it\'s the host you\'re trying to stream from'
 '[CR][CR][COLOR=blue][B]What is the differnce between Live Streams and Online Video:[/COLOR][/B][CR]When you run the test you\'ll see results based on your speeds and these let you know the quality you should expect to '
 'be able stream with your connection. Live Streams as the title suggests are like traditional TV channels, they are being streamed live so for example if you wanted to watch CNN this would fall into this category. '
 'Online Videos relates to movies, tv shows, youtube clips etc. Basically anything that isn\'t live - if you\'re new to the world of streaming then think of it as On Demand content, this is content that\'s been recorded and stored on the web.'
 '[CR][CR][COLOR=blue][B]Why am I still getting buffering:[/COLOR][/B][CR]The results you get from this test are strictly based on your download speed, there are many other factors that can cause buffering and contrary to popular belief '
 'having a massively fast internet connection will not make any difference to your buffering issues if the server you\'re trying to get the content from is unable to send it fast enough. This can often happen and is usually '
 'down to heavy traffic (too many users accessing the same server). A 10 Mb/s connection should be plenty fast enough for almost all content as it\'s very rare a server can send it any quicker than that.'
 '[CR][CR][COLOR=blue][B]What\'s the difference between MB/s and Mb/s:[/COLOR][/B][CR]A lot of people think the speed they see advertised by their ISP is Megabytes (MB/S) per second - this is not true. Speeds are usually shown as Mb/s '
 'which is Megabit per second - there are 8 of these to a megabyte so if you want to work out how many megabytes per second you\'re getting you need to divide the speed by 8. It may sound sneaky but really it\'s just the unit that has always been used.'
 '[CR][CR]A direct link to the buffering thread explaining what you can do to improve your viewing experience can be found at [COLOR=yellow]http://bit.ly/bufferingfix[/COLOR]'
 '[CR][CR]Thank you, [COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR] Team.' )
 if 27 - 27: i1Iii1i1I / i1IIi . i1Iii1i1I % OoooooooOO * III1IiiI % oO0OooOoO
 if 40 - 40: o00O0OoO % iI1IiiIIIiIi
def o0OiI1 ( ) :
 oO00oOOoooO ( '' , '[COLOR=blue]Instructions - Read me first[/COLOR]' , 'none' , 'speed_instructions' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Download 16MB file   - [COLOR=lime]Server 1[/COLOR]' , 'https://totalrevolution.googlecode.com/svn/trunk/download%20files/16MB.txt' , 'runtest' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Download 32MB file   - [COLOR=lime]Server 1[/COLOR]' , 'https://totalrevolution.googlecode.com/svn/trunk/download%20files/32MB.txt' , 'runtest' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Download 64MB file   - [COLOR=lime]Server 1[/COLOR]' , 'https://totalrevolution.googlecode.com/svn/trunk/download%20files/64MB.txt' , 'runtest' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Download 128MB file - [COLOR=lime]Server 1[/COLOR]' , 'https://totalrevolution.googlecode.com/svn/trunk/download%20files/128MB.txt' , 'runtest' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Download 10MB file   - [COLOR=yellow]Server 2[/COLOR]' , 'http://www.wswd.net/testdownloadfiles/10MB.zip' , 'runtest' , '' , '' , '' , '' )
 if 22 - 22: i1IIi / O00OOOoOoo0O / iiIi1i11 . ii1ii11IIIiiI % Iiii1i1 + i11iIiiIii
def O0oOoOOO000 ( name ) :
 if 86 - 86: O00OOOoOoo0O
 OOooO0OOoo . create ( 'Creating Profile' , '' , '' , '' )
 I1111I1Ii = i11111 ( name )
 if 61 - 61: i11111IIIII / oO0OooOoO . O0 + OoooooooOO * i1IIi
 if 59 - 59: OoooooooOO % oO0OooOoO . iI1IiiIIIiIi * oOO00Oo . O00OOOoOoo0O
 iii1II1iI1IIi = [ ]
 for iIIii1iiiIiiI in os . listdir ( OO0o ) :
  iii1II1iI1IIi . append ( iIIii1iiiIiiI )
  if 95 - 95: iI1IiiIIIiIi % i11iIiiIii * OoooooooOO + iI1IiiIIIiIi . oO0OooOoO
  if 89 - 89: i1Iii1i1I
  O0O0oOooo0O00oO = open ( os . path . join ( iiI1IiI , name , 'addonlist' ) , mode = 'r' )
  Oo0OO0ooO0O0O = O0O0oOooo0O00oO . read ( )
  O0O0oOooo0O00oO . close ( )
  Oo0OO0ooO0O0O = Oo0OO0ooO0O0O . split ( '|' )
  if 76 - 76: oOO00Oo / o00O0OoO
  if 95 - 95: O00OOOoOoo0O - O0 % OoooooooOO
 oooooO00OOO ( 'profiles' )
 for iIIii1iiiIiiI in os . listdir ( II11iiii1Ii ) :
  if not iIIii1iiiIiiI in iii1II1iI1IIi and iIIii1iiiIiiI != 'plugin.program.totalinstaller' and iIIii1iiiIiiI != 'script.module.addon.common' and iIIii1iiiIiiI != 'repository.noobsandnerds' and iIIii1iiiIiiI != 'packages' :
   try :
    shutil . copytree ( os . path . join ( i1Oo00 , 'addons' , iIIii1iiiIiiI ) , os . path . join ( iiI1IiI , 'Master' , 'backups' , iIIii1iiiIiiI ) )
    if iiIIIII1i1iI == 'true' :
     print "### Successfully copied " + iIIii1iiiIiiI + " to " + os . path . join ( iiI1IiI , 'Master' , 'backups' , iIIii1iiiIiiI )
   except :
    print "### Failed to copy " + iIIii1iiiIiiI + " to backup folder, must already exist"
   if not iIIii1iiiIiiI in Oo0OO0ooO0O0O and iIIii1iiiIiiI != OOOO0OOoO0O0 :
    try :
     os . rename ( os . path . join ( II11iiii1Ii , iIIii1iiiIiiI ) , os . path . join ( iiI1IiI , 'Master' , iIIii1iiiIiiI ) )
    except :
     try :
      shutil . copytree ( os . path . join ( II11iiii1Ii , iIIii1iiiIiiI ) , os . path . join ( iiI1IiI , 'Master' , iIIii1iiiIiiI ) )
     except :
      try :
       shutil . rmtree ( os . path . join ( II11iiii1Ii , iIIii1iiiIiiI ) )
      except :
       print "### Unable to move " + iIIii1iiiIiiI + " as it's currently in use"
 shutil . rmtree ( i1Oo00 )
 if 13 - 13: i11iIiiIii
 if 54 - 54: iiIi1i11 . OoooO0Oo0O0 * o00O0OoO % Iiii1i1 . O0 * i11111IIIII
 for iIIii1iiiIiiI in Oo0OO0ooO0O0O :
  if not iIIii1iiiIiiI in iii1II1iI1IIi and not iIIii1iiiIiiI in II11iiii1Ii :
   try :
    os . rename ( os . path . join ( iiI1IiI , 'Master' , iIIii1iiiIiiI ) , os . path . join ( II11iiii1Ii , iIIii1iiiIiiI ) )
   except :
    pass
    if 87 - 87: iI1IiiIIIiIi % OoooO0Oo0O0 * II11iIiIIIiI
 OOO00i111 ( )
 Ii1i ( )
 i1i1I111iI ( IIIi1I1IIii1II )
 print "### WIPE FUNCTIONS COMPLETE"
 if 20 - 20: ii1ii11IIIiiI / i11iIiiIii * oOO00Oo - OoooO0Oo0O0 - oO0OooOoO / i11iIiiIii
 try :
  IiIiiI11i1Ii = open ( I1IIiiIiii , mode = 'r' )
  i11ii1iI = IiIiiI11i1Ii . read ( )
  IiIiiI11i1Ii . close ( )
  print "### original idfile contents: " + i11ii1iI
 except :
  print "### original id file does not exist"
  if 17 - 17: II11iIiIIIiI - o0Oo - i11111IIIII - iiIi1i11 / III1IiiI + Iiii1i1
 try :
  extract . all ( os . path . join ( iiI1IiI , name , 'build.zip' ) , iIii1 , OOooO0OOoo )
  O0ooO0 = 1
  print "### Extraction of build successful"
 except :
  iI111I11I1I1 . ok ( 'Error' , "Sorry it wasn't possible to extract your build, there is a problem with your build zip file." )
  O0ooO0 = 0
 if os . path . exists ( os . path . join ( O0OoO000O0OO , 'plugin.program.totalinstaller' , 'id.xml' ) ) and os . path . exists ( os . path . join ( O0OoO000O0OO , 'ti_id' , 'id.xml' ) ) :
  print "### id.xml and temporary id.xml exists, attempting remove of original and replace with temp"
  os . remove ( os . path . join ( O0OoO000O0OO , 'plugin.program.totalinstaller' , 'id.xml' ) )
  print "### removal ok"
  os . rename ( os . path . join ( O0OoO000O0OO , 'ti_id' , 'id.xml' ) , os . path . join ( O0OoO000O0OO , 'plugin.program.totalinstaller' , 'id.xml' ) )
  print "### rename ok"
 if os . path . exists ( os . path . join ( O0OoO000O0OO , 'plugin.program.totalinstaller' , 'startup.xml' ) ) and os . path . exists ( os . path . join ( O0OoO000O0OO , 'ti_id' , 'startup.xml' ) ) :
  print "### startup.xml and temporary startup.xml exists, attempting remove of original and replace with temp"
  os . remove ( os . path . join ( O0OoO000O0OO , 'plugin.program.totalinstaller' , 'startup.xml' ) )
  print "### removal ok"
  os . rename ( os . path . join ( O0OoO000O0OO , 'ti_id' , 'startup.xml' ) , os . path . join ( O0OoO000O0OO , 'plugin.program.totalinstaller' , 'startup.xml' ) )
  print "### rename ok"
  if 40 - 40: Iiii1i1 / o0Oo - OoooooooOO / Iiii1i1
 IiIiiI11i1Ii = open ( I1IIiiIiii , mode = 'r' )
 i11ii1iI = IiIiiI11i1Ii . read ( )
 IiIiiI11i1Ii . close ( )
 if 48 - 48: II11iIiIIIiI . ii1ii11IIIiiI . o0Oo * i1Iii1i1I . iIii1I11I1II1
 print "### new idfile contents: " + i11ii1iI
 if 66 - 66: OoooooooOO * O0 / o0oOo0 * iI1IiiIIIiIi
 if O0ooO0 == 1 :
  O00OO00OOOoO ( )
  if 22 - 22: o0Oo
  if 76 - 76: ii1ii11IIIiiI + o00O0OoO + ii1ii11IIIiiI . o00O0OoO % iiIi1i11
def oOoOOO ( url ) :
 oO00oOOoooO ( 'folder' , '[COLOR=darkcyan]DELETE A BUILD[/COLOR]' , url , 'delete_profile' , '' , '' , '' )
 for i1iIIIi1i in os . listdir ( iiI1IiI ) :
  if i1iIIIi1i != 'Master' and i1iIIIi1i != url . replace ( ' ' , '_' ) . replace ( "'" , '' ) . replace ( ':' , '-' ) :
   oO00oOOoooO ( '' , 'Load Profile: [COLOR=dodgerblue]' + i1iIIIi1i . replace ( '_' , ' ' ) + '[/COLOR]' , i1iIIIi1i , 'switch_profile' , '' , '' , '' , '' )
   if 10 - 10: iiIi1i11 . iI1IiiIIIiIi
   if 5 - 5: i11111IIIII - o00O0OoO
def oO0o ( heading , anounce ) :
 class I1iOoO00O ( ) :
  WINDOW = 10147
  CONTROL_LABEL = 1
  CONTROL_TEXTBOX = 5
  def __init__ ( self , * args , ** kwargs ) :
   xbmc . executebuiltin ( "ActivateWindow(%d)" % ( self . WINDOW , ) )
   self . win = xbmcgui . Window ( self . WINDOW )
   xbmc . sleep ( 500 )
   self . setControls ( )
  def setControls ( self ) :
   self . win . getControl ( self . CONTROL_LABEL ) . setLabel ( heading )
   try :
    Oo0O0O000 = open ( anounce ) ; O0oo0ooO = Oo0O0O000 . read ( )
   except :
    O0oo0ooO = anounce
   self . win . getControl ( self . CONTROL_TEXTBOX ) . setText ( str ( O0oo0ooO ) )
   return
 I1iOoO00O ( )
 while xbmc . getCondVisibility ( 'Window.IsVisible(10147)' ) :
  xbmc . sleep ( 500 )
  if 6 - 6: iIii1I11I1II1 / i1Iii1i1I
  if 1 - 1: Iiii1i1 / O00OOOoOoo0O * O00OOOoOoo0O - oOO00Oo % iI1IiiIIIiIi
def O000oiiI1I ( url ) :
 try :
  iiiiOo000O00o0O , O0oo0ooO = url . split ( '|' )
  oO0o ( iiiiOo000O00o0O , O0oo0ooO )
 except :
  oO0o ( '' , url )
  if 83 - 83: o0oOo0 - iiIi1i11 / O0
  if 17 - 17: oOO00Oo . i11111IIIII . i11iIiiIii + OoooooooOO % i11iIiiIii
def IiIi11iI1 ( ) :
 IIiI1iIiii = time . time ( )
 o0OoO0o00o = time . localtime ( IIiI1iIiii )
 return time . strftime ( '%Y%m%d%H%M%S' , o0OoO0o00o )
 if 46 - 46: i1Iii1i1I + Iiii1i1 % OoooooooOO * OoooO0Oo0O0
 if 89 - 89: i11111IIIII - i11111IIIII % i1Iii1i1I / o00O0OoO + III1IiiI - i11111IIIII
def O0oOoO0o0oO ( ) :
 oO00oOOoooO ( '' , '[COLOR=gold]CLEAN MY KODI FOLDERS (Save Space)[/COLOR]' , '' , 'full_clean' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=orange]noobs[/COLOR][COLOR=dodgerblue]and[/COLOR][COLOR=orange]nerds[/COLOR] Keyword Install' , '' , 'nan_menu' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , '[COLOR=darkcyan][Noobs][/COLOR] Community Portal Folder Check' , 'url' , 'check_storage' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=darkcyan][Noobs][/COLOR] Test My Download Speed' , 'none' , 'speedtest_menu' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=darkcyan][Noobs][/COLOR] Backup/Restore My Content' , 'none' , 'backup_restore' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][Nerds][/COLOR] Advanced Options' , '' , 'advanced_tools' , '' , '' , '' , '' )
 if OOOOOo ( ) :
  oO00oOOoooO ( '' , '[COLOR=dodgerblue]Wi-Fi / OpenELEC Settings[/COLOR]' , '' , 'openelec_settings' , '' , '' , '' , '' )
  if 80 - 80: III1IiiI / O0
  if 55 - 55: o0Oo * o00O0OoO / O0 % O00OOOoOoo0O
def Oo0OOOOOOOo0O ( ) :
 I1III = I1I1iiii1IiI1i ( )
 oO00oOOoooO ( '' , 'Check For Special Characters In Filenames' , '' , 'ASCII_Check' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Check My IP Address' , 'none' , 'ipcheck' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Check XBMC/Kodi Version' , 'none' , 'xbmcversion' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Clear All Cache Folders' , 'url' , 'clear_cache' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Clear Cached Artwork (thumbnails & textures)' , 'none' , 'remove_textures' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Clear Packages Folder' , 'url' , 'remove_packages' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Completely remove an add-on (inc. passwords)' , 'plugin' , 'addon_removal_menu' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Convert Physical Paths To Special' , iIii1 , 'fix_special' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Delete Addon_Data' , 'url' , 'remove_addon_data' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Delete Old Builds/Zips From Device' , 'url' , 'remove_build' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Delete Old Crash Logs' , 'url' , 'remove_crash_logs' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Force Close Kodi' , 'url' , 'kill_xbmc' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Make Add-ons Gotham/Helix Compatible' , 'none' , 'gotham' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Make Skins Kodi (Helix) Compatible' , 'none' , 'helix' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Passwords - Hide when typing in' , 'none' , 'hide_passwords' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Passwords - Unhide when typing in' , 'none' , 'unhide_passwords' , '' , '' , '' , '' )
 if i1i1II . replace ( '%20' , ' ' ) in I1III and i1i1II != '' :
  oO00oOOoooO ( '' , 'Remove Community Build Protection' , 'none' , 'remove_nag' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Update My Add-ons (Force Refresh)' , 'none' , 'update' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Upload Log' , 'none' , 'uploadlog' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'View My Log' , 'none' , 'log' , '' , '' , '' , '' )
 oO00oOOoooO ( '' , 'Wipe My Install (Fresh Start)' , 'none' , 'wipe_xbmc' , '' , '' , '' , '' )
 if 41 - 41: iIii1I11I1II1 - ii1ii11IIIiiI * i11111IIIII
 if 65 - 65: iiIi1i11 / iiIi1i11 / i1Iii1i1I * OoooooooOO
def iIIi1IiiiII1i ( url ) :
 oO00oOOoooO ( 'folder' , '[COLOR=yellow]1. Add-on Maintenance[/COLOR]' , str ( url ) + '&type=Maintenance' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Audio Add-ons' , str ( url ) + '&type=Audio' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Picture Add-ons' , str ( url ) + '&type=Pictures' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Program Add-ons' , str ( url ) + '&type=Programs' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , 'Video Add-ons' , str ( url ) + '&type=Video' , 'grab_tutorials' , '' , '' , '' , '' )
 if 33 - 33: III1IiiI % ii1ii11IIIiiI . iIii1I11I1II1 / i11111IIIII
 if 3 - 3: iI1IiiIIIiIi + ii1ii11IIIiiI
def OOoOOo0oOO ( url ) :
 oo0OoOooo = 'http://noobsandnerds.com/TI/TutorialPortal/downloadcount.php?id=%s' % ( url )
 try :
  I11IIIi ( oo0OoOooo , 5 )
 except :
  pass
 oOo0 = 'http://noobsandnerds.com/TI/TutorialPortal/tutorialdetails.php?id=%s' % ( url )
 OOOoOO = I11IIIi ( oOo0 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
 OOo0o0O0O = re . compile ( 'name="(.+?)"' ) . findall ( OOOoOO )
 iIiO0O = re . compile ( 'author="(.+?)"' ) . findall ( OOOoOO )
 oO0Ooooo000 = re . compile ( 'video_guide1="(.+?)"' ) . findall ( OOOoOO )
 Iii1Iiii = re . compile ( 'video_guide2="(.+?)"' ) . findall ( OOOoOO )
 i1i1Ii1IiIII = re . compile ( 'video_guide3="(.+?)"' ) . findall ( OOOoOO )
 I1IIii11 = re . compile ( 'video_guide4="(.+?)"' ) . findall ( OOOoOO )
 I1I1 = re . compile ( 'video_guide5="(.+?)"' ) . findall ( OOOoOO )
 O0OOO0ooO00o = re . compile ( 'video_label1="(.+?)"' ) . findall ( OOOoOO )
 I1iii1 = re . compile ( 'video_label2="(.+?)"' ) . findall ( OOOoOO )
 iIiiiIIiii = re . compile ( 'video_label3="(.+?)"' ) . findall ( OOOoOO )
 OO0 = re . compile ( 'video_label4="(.+?)"' ) . findall ( OOOoOO )
 Oo00Oo = re . compile ( 'video_label5="(.+?)"' ) . findall ( OOOoOO )
 oOOoOoO0OOO0oO = re . compile ( 'about="(.+?)"' ) . findall ( OOOoOO )
 Oo0oO = re . compile ( 'step1="(.+?)"' ) . findall ( OOOoOO )
 Oo00o = re . compile ( 'step2="(.+?)"' ) . findall ( OOOoOO )
 iiIi1i = re . compile ( 'step3="(.+?)"' ) . findall ( OOOoOO )
 o0o0OoOo = re . compile ( 'step4="(.+?)"' ) . findall ( OOOoOO )
 IiII11iI = re . compile ( 'step5="(.+?)"' ) . findall ( OOOoOO )
 o00o000 = re . compile ( 'step6="(.+?)"' ) . findall ( OOOoOO )
 IIIi1IiI1iII = re . compile ( 'step7="(.+?)"' ) . findall ( OOOoOO )
 OOOO0oo = re . compile ( 'step8="(.+?)"' ) . findall ( OOOoOO )
 iii1I1ii1 = re . compile ( 'step9="(.+?)"' ) . findall ( OOOoOO )
 IIiII11Iiii1i1II = re . compile ( 'step10="(.+?)"' ) . findall ( OOOoOO )
 ii1iIii = re . compile ( 'step11="(.+?)"' ) . findall ( OOOoOO )
 OoOOOO0 = re . compile ( 'step12="(.+?)"' ) . findall ( OOOoOO )
 Iii1iii11 = re . compile ( 'step13="(.+?)"' ) . findall ( OOOoOO )
 Ii11 = re . compile ( 'step14="(.+?)"' ) . findall ( OOOoOO )
 II11i1 = re . compile ( 'step15="(.+?)"' ) . findall ( OOOoOO )
 ooo0o0oooo = re . compile ( 'screenshot1="(.+?)"' ) . findall ( OOOoOO )
 o0OoIiiiiiiI111i = re . compile ( 'screenshot2="(.+?)"' ) . findall ( OOOoOO )
 iiIIIIiI11II1 = re . compile ( 'screenshot3="(.+?)"' ) . findall ( OOOoOO )
 IiI1i11i1iI = re . compile ( 'screenshot4="(.+?)"' ) . findall ( OOOoOO )
 o0oo0O0OO0 = re . compile ( 'screenshot5="(.+?)"' ) . findall ( OOOoOO )
 IIiI = re . compile ( 'screenshot6="(.+?)"' ) . findall ( OOOoOO )
 i11I1Ii1Iiii1 = re . compile ( 'screenshot7="(.+?)"' ) . findall ( OOOoOO )
 o0oooOoOoOo = re . compile ( 'screenshot8="(.+?)"' ) . findall ( OOOoOO )
 OO0O = re . compile ( 'screenshot9="(.+?)"' ) . findall ( OOOoOO )
 oo0ooOoo00Ooo = re . compile ( 'screenshot10="(.+?)"' ) . findall ( OOOoOO )
 IIiii111I1 = re . compile ( 'screenshot11="(.+?)"' ) . findall ( OOOoOO )
 iiii1i1 = re . compile ( 'screenshot12="(.+?)"' ) . findall ( OOOoOO )
 OOooooO0 = re . compile ( 'screenshot13="(.+?)"' ) . findall ( OOOoOO )
 I1II = re . compile ( 'screenshot14="(.+?)"' ) . findall ( OOOoOO )
 IIIi1IIiI = re . compile ( 'screenshot15="(.+?)"' ) . findall ( OOOoOO )
 if 33 - 33: OoooooooOO - o0Oo - o0Oo % o0Oo % ii1ii11IIIiiI
 i1iIIIi1i = OOo0o0O0O [ 0 ] if ( len ( OOo0o0O0O ) > 0 ) else ''
 ooOo00 = iIiO0O [ 0 ] if ( len ( iIiO0O ) > 0 ) else ''
 Ii1iI111 = oO0Ooooo000 [ 0 ] if ( len ( oO0Ooooo000 ) > 0 ) else 'None'
 O0oooo00o0Oo = Iii1Iiii [ 0 ] if ( len ( Iii1Iiii ) > 0 ) else 'None'
 I1iii = i1i1Ii1IiIII [ 0 ] if ( len ( i1i1Ii1IiIII ) > 0 ) else 'None'
 oO0o0O0Ooo0o = I1IIii11 [ 0 ] if ( len ( I1IIii11 ) > 0 ) else 'None'
 i1Ii11II = I1I1 [ 0 ] if ( len ( I1I1 ) > 0 ) else 'None'
 oOo0oO = O0OOO0ooO00o [ 0 ] if ( len ( O0OOO0ooO00o ) > 0 ) else 'None'
 IIi1IIIIi = I1iii1 [ 0 ] if ( len ( I1iii1 ) > 0 ) else 'None'
 OOOoO = iIiiiIIiii [ 0 ] if ( len ( iIiiiIIiii ) > 0 ) else 'None'
 I1i = OO0 [ 0 ] if ( len ( OO0 ) > 0 ) else 'None'
 iiiI = Oo00Oo [ 0 ] if ( len ( Oo00Oo ) > 0 ) else 'None'
 i1Io00OOOo = oOOoOoO0OOO0oO [ 0 ] if ( len ( oOOoOoO0OOO0oO ) > 0 ) else ''
 oooOo0 = '[CR][CR][COLOR=dodgerblue]Step 1:[/COLOR][CR]' + Oo0oO [ 0 ] if ( len ( Oo0oO ) > 0 ) else ''
 iIiIIiII11i1 = '[CR][CR][COLOR=dodgerblue]Step 2:[/COLOR][CR]' + Oo00o [ 0 ] if ( len ( Oo00o ) > 0 ) else ''
 i1IiioOOooo = '[CR][CR][COLOR=dodgerblue]Step 3:[/COLOR][CR]' + iiIi1i [ 0 ] if ( len ( iiIi1i ) > 0 ) else ''
 IiI11IiIIi = '[CR][CR][COLOR=dodgerblue]Step 4:[/COLOR][CR]' + o0o0OoOo [ 0 ] if ( len ( o0o0OoOo ) > 0 ) else ''
 oOOo0OoooOo = '[CR][CR][COLOR=dodgerblue]Step 5:[/COLOR][CR]' + IiII11iI [ 0 ] if ( len ( IiII11iI ) > 0 ) else ''
 I1I1IiIiIIi1I = '[CR][CR][COLOR=dodgerblue]Step 6:[/COLOR][CR]' + o00o000 [ 0 ] if ( len ( o00o000 ) > 0 ) else ''
 oo0Ooo = '[CR][CR][COLOR=dodgerblue]Step 7:[/COLOR][CR]' + IIIi1IiI1iII [ 0 ] if ( len ( IIIi1IiI1iII ) > 0 ) else ''
 iI1II1III = '[CR][CR][COLOR=dodgerblue]Step 8:[/COLOR][CR]' + OOOO0oo [ 0 ] if ( len ( OOOO0oo ) > 0 ) else ''
 OOOIi11i1II = '[CR][CR][COLOR=dodgerblue]Step 9:[/COLOR][CR]' + iii1I1ii1 [ 0 ] if ( len ( iii1I1ii1 ) > 0 ) else ''
 Ooo0 = '[CR][CR][COLOR=dodgerblue]Step 10:[/COLOR][CR]' + IIiII11Iiii1i1II [ 0 ] if ( len ( IIiII11Iiii1i1II ) > 0 ) else ''
 o000OOO000o = '[CR][CR][COLOR=dodgerblue]Step 11:[/COLOR][CR]' + ii1iIii [ 0 ] if ( len ( ii1iIii ) > 0 ) else ''
 o000ooOO = '[CR][CR][COLOR=dodgerblue]Step 12:[/COLOR][CR]' + OoOOOO0 [ 0 ] if ( len ( OoOOOO0 ) > 0 ) else ''
 O000oOO0Oooo = '[CR][CR][COLOR=dodgerblue]Step 13:[/COLOR][CR]' + Iii1iii11 [ 0 ] if ( len ( Iii1iii11 ) > 0 ) else ''
 o0000oO0OOOo0 = '[CR][CR][COLOR=dodgerblue]Step 14:[/COLOR][CR]' + Ii11 [ 0 ] if ( len ( Ii11 ) > 0 ) else ''
 o00ooo0O = '[CR][CR][COLOR=dodgerblue]Step 15:[/COLOR][CR]' + II11i1 [ 0 ] if ( len ( II11i1 ) > 0 ) else ''
 I1iII1iI = ooo0o0oooo [ 0 ] if ( len ( ooo0o0oooo ) > 0 ) else ''
 Iii1Iiii1iI1 = o0OoIiiiiiiI111i [ 0 ] if ( len ( o0OoIiiiiiiI111i ) > 0 ) else ''
 ooooo0oo0OO = iiIIIIiI11II1 [ 0 ] if ( len ( iiIIIIiI11II1 ) > 0 ) else ''
 IIiII = IiI1i11i1iI [ 0 ] if ( len ( IiI1i11i1iI ) > 0 ) else ''
 IIi1 = o0oo0O0OO0 [ 0 ] if ( len ( o0oo0O0OO0 ) > 0 ) else ''
 oo0OO0Oo = IIiI [ 0 ] if ( len ( IIiI ) > 0 ) else ''
 iIIi111I1i1i = i11I1Ii1Iiii1 [ 0 ] if ( len ( i11I1Ii1Iiii1 ) > 0 ) else ''
 IiIii111III1 = o0oooOoOoOo [ 0 ] if ( len ( o0oooOoOoOo ) > 0 ) else ''
 IiI1I1iii = OO0O [ 0 ] if ( len ( OO0O ) > 0 ) else ''
 i1ii111iiI11iI = oo0ooOoo00Ooo [ 0 ] if ( len ( oo0ooOoo00Ooo ) > 0 ) else ''
 Oo0OO0oO0O = IIiii111I1 [ 0 ] if ( len ( IIiii111I1 ) > 0 ) else ''
 iIIii = iiii1i1 [ 0 ] if ( len ( iiii1i1 ) > 0 ) else ''
 o000oo = OOooooO0 [ 0 ] if ( len ( OOooooO0 ) > 0 ) else ''
 O0Ooo0o = I1II [ 0 ] if ( len ( I1II ) > 0 ) else ''
 oO0o0O00O00O = IIIi1IIiI [ 0 ] if ( len ( IIIi1IIiI ) > 0 ) else ''
 OOo00 = str ( '[COLOR=orange]Author: [/COLOR]' + ooOo00 + '[CR][CR][COLOR=lime]About: [/COLOR]' + i1Io00OOOo + oooOo0 + iIiIIiII11i1 + i1IiioOOooo + IiI11IiIIi + oOOo0OoooOo + I1I1IiIiIIi1I + oo0Ooo + iI1II1III + OOOIi11i1II + Ooo0 + o000OOO000o + o000ooOO + O000oOO0Oooo + o0000oO0OOOo0 + o00ooo0O )
 if 58 - 58: i11111IIIII . OoooO0Oo0O0 * i1IIi
 if oooOo0 != '' :
  oO00oOOoooO ( '' , '[COLOR=yellow][Text Guide][/COLOR]  ' + i1iIIIi1i , OOo00 , 'text_guide' , '' , O0o0Oo , i1Io00OOOo , '' )
 if Ii1iI111 != 'None' :
  oO00oOOoooO ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + oOo0oO , Ii1iI111 , 'play_video' , '' , O0o0Oo , '' , '' )
 if O0oooo00o0Oo != 'None' :
  oO00oOOoooO ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + IIi1IIIIi , O0oooo00o0Oo , 'play_video' , '' , O0o0Oo , '' , '' )
 if I1iii != 'None' :
  oO00oOOoooO ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + OOOoO , I1iii , 'play_video' , '' , O0o0Oo , '' , '' )
 if oO0o0O0Ooo0o != 'None' :
  oO00oOOoooO ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + I1i , oO0o0O0Ooo0o , 'play_video' , '' , O0o0Oo , '' , '' )
 if i1Ii11II != 'None' :
  oO00oOOoooO ( '' , '[COLOR=lime][VIDEO][/COLOR]  ' + iiiI , i1Ii11II , 'play_video' , '' , O0o0Oo , '' , '' )
  if 79 - 79: i1Iii1i1I
  if 32 - 32: iI1IiiIIIiIi % o00O0OoO + iiIi1i11 % OoooooooOO
def oooOo0O00o ( ) :
 if i1IiI1I11 . getSetting ( 'tutorial_manual_search' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=yellow]Manual Search[/COLOR]' , 'tutorials' , 'manual_search' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_all' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=lime]All Guides[/COLOR] Everything in one place' , '' , 'grab_tutorials' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_kodi' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=lime]XBMC / Kodi[/COLOR] Specific' , '' , 'xbmc_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_xbmc4xbox' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=lime]XBMC4Xbox[/COLOR] Specific' , '&platform=XBMC4Xbox' , 'xbmc_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_android' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=orange][Platform][/COLOR] Android' , '&platform=Android' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_atv' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=orange][Platform][/COLOR] Apple TV' , '&platform=ATV' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_ios' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=orange][Platform][/COLOR] ATV2 & iOS' , '&platform=iOS' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_linux' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=orange][Platform][/COLOR] Linux' , '&platform=Linux' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_pure_linux' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=orange][Platform][/COLOR] Pure Linux' , '&platform=Custom_Linux' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_openelec' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=orange][Platform][/COLOR] OpenELEC' , '&platform=OpenELEC' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_osmc' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=orange][Platform][/COLOR] OSMC' , '&platform=OSMC' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_osx' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=orange][Platform][/COLOR] OSX' , '&platform=OSX' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_raspbmc' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=orange][Platform][/COLOR] Raspbmc' , '&platform=Raspbmc' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_windows' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=orange][Platform][/COLOR] Windows' , '&platform=Windows' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_allwinner' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] Allwinner Devices' , '&hardware=Allwinner' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_aftv' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] Amazon Fire TV' , '&hardware=AFTV' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_amlogic' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] AMLogic Devices' , '&hardware=AMLogic' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_boxee' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] Boxee' , '&hardware=Boxee' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_intel' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] Intel Devices' , '&hardware=Intel' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_rpi' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] Raspberry Pi' , '&hardware=RaspberryPi' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_rockchip' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] Rockchip Devices' , '&hardware=Rockchip' , 'platform_menu' , '' , '' , '' , '' )
 if i1IiI1I11 . getSetting ( 'tutorial_xbox' ) == 'true' :
  oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][Hardware][/COLOR] Xbox' , '&hardware=Xbox' , 'platform_menu' , '' , '' , '' , '' )
  if 65 - 65: o00O0OoO . i11iIiiIii
  if 6 - 6: iI1IiiIIIiIi % o00O0OoO * o0Oo . i11111IIIII
def IiI1oO0o0O ( ) :
 iI111I11I1I1 = xbmcgui . Dialog ( )
 if iI111I11I1I1 . yesno ( "Make Add-on Passwords Visible?" , "This will make all your add-on passwords visible in the add-on settings. Are you sure you wish to continue?" ) :
  for IiiI111 , ooooOoO0O , IIII in os . walk ( II11iiii1Ii ) :
   for Oo0O0O000 in IIII :
    if Oo0O0O000 == 'settings.xml' :
     Ii11I1i = open ( os . path . join ( IiiI111 , Oo0O0O000 ) ) . read ( )
     oooo0OOo = re . compile ( '<setting id=(.+?)>' ) . findall ( Ii11I1i )
     for iI11IIi1iiI1I in oooo0OOo :
      if 'pass' in iI11IIi1iiI1I :
       if 'option="hidden"' in iI11IIi1iiI1I :
        try :
         oO0oO0ooOoO0 = iI11IIi1iiI1I . replace ( ' option="hidden"' , '' )
         Oo0O0O000 = open ( os . path . join ( IiiI111 , Oo0O0O000 ) , mode = 'w' )
         Oo0O0O000 . write ( str ( Ii11I1i ) . replace ( iI11IIi1iiI1I , oO0oO0ooOoO0 ) )
         Oo0O0O000 . close ( )
        except :
         pass
  iI111I11I1I1 . ok ( "Passwords Are now visible" , "Your passwords will now be visible in your add-on settings. If you want to undo this please use the option to hide passwords." )
  if 60 - 60: i1IIi / o00O0OoO - oOO00Oo - o0oOo0
  if 98 - 98: II11iIiIIIiI + O00OOOoOoo0O * iiIi1i11 / i1Iii1i1I * O00OOOoOoo0O / OoooooooOO
def IiI ( name , url , video , description , skins , guisettingslink , artpack ) :
 OOooO0OOoo . create ( "Backing Up Important Data" , 'Please wait...' , '' , '' )
 if 68 - 68: iIii1I11I1II1
 if 51 - 51: O00OOOoOoo0O + i11111IIIII
 oOo0oOOoo0O = open ( I1IIiiIiii , mode = 'r' )
 iI1IiI11Ii11i = oOo0oOOoo0O . read ( )
 oOo0oOOoo0O . close ( )
 if 67 - 67: o0oOo0 . iIii1I11I1II1 . ii1ii11IIIiiI + Iiii1i1
 o0OOOO00O = re . compile ( 'gui="(.+?)"' ) . findall ( iI1IiI11Ii11i )
 oo000O0 = o0OOOO00O [ 0 ] if ( len ( o0OOOO00O ) > 0 ) else '0'
 if 1 - 1: iI1IiiIIIiIi - oO0OooOoO
 if 62 - 62: o0Oo / iIii1I11I1II1 * o00O0OoO
 if I1IiI == 'true' :
  try :
   O0oOO0o0 = open ( IIIII , mode = 'r' )
   O000000oooOOo = O0oOO0o0 . read ( )
   O0oOO0o0 . close ( )
   if 50 - 50: o00O0OoO + i1IIi * ii1ii11IIIiiI / iI1IiiIIIiIi
  except :
   print "### No favourites file to copy"
   if 45 - 45: o00O0OoO . III1IiiI - o0oOo0 . i1Iii1i1I / i11111IIIII
 if o0OOO == 'true' :
  try :
   oooiIi11 = open ( ooooooO0oo , mode = 'r' )
   OOo0oo = oooiIi11 . read ( )
   oooiIi11 . close ( )
   if 70 - 70: oO0OooOoO * OoooooooOO - iI1IiiIIIiIi + III1IiiI * O0
  except :
   print "### No sources file to copy"
   if 49 - 49: III1IiiI . iI1IiiIIIiIi . O00OOOoOoo0O - OoooO0Oo0O0
 IIi1II = 1
 i1iI1i ( )
 if 74 - 74: o0oOo0 % OoooO0Oo0O0 * i1IIi
 if 18 - 18: O00OOOoOoo0O
 if os . path . exists ( Oo0OoO00oOO0o ) :
  if 30 - 30: oO0OooOoO
  if os . path . exists ( I11i1 ) :
   os . remove ( Oo0OoO00oOO0o )
   if 27 - 27: i1IIi - iIii1I11I1II1 + O0 % II11iIiIIIiI / iiIi1i11 + i1IIi
  else :
   os . rename ( Oo0OoO00oOO0o , I11i1 )
   if 48 - 48: II11iIiIIIiI
 if os . path . exists ( iIi1ii1I1 ) :
  os . remove ( iIi1ii1I1 )
  if 70 - 70: OoooooooOO * i11iIiiIii
  if 60 - 60: i11111IIIII / iIii1I11I1II1 + OoooooooOO - OoooO0Oo0O0 * i11iIiiIii
 if not os . path . exists ( I11iii1Ii ) :
  IiIiiI11i1Ii = open ( I11iii1Ii , mode = 'w+' )
  IiIiiI11i1Ii . close ( )
  if 47 - 47: O0 . o0Oo / o0oOo0 % i11iIiiIii
 OOooO0OOoo . close ( )
 OOooO0OOoo . create ( "Downloading Skin Fix" , "Downloading guisettings.xml" , '' , 'Please Wait' )
 oO0oO00 = os . path . join ( OOO00 , 'guifix.zip' )
 if 47 - 47: iI1IiiIIIiIi . O00OOOoOoo0O . iIii1I11I1II1 . oOO00Oo
 if 39 - 39: oOO00Oo
 try :
  print "### attempting to download guisettings.xml"
  downloader . download ( guisettingslink , oO0oO00 , OOooO0OOoo )
  OOooO0OOoo . close ( )
 except :
  iI111I11I1I1 . ok ( 'Problem Detected' , 'Sorry there was a problem downloading the guisettings file. Please check your storage location, if you\'re certain that\'s ok please notify the build author on the relevant support thread.' )
  print "### FAILED to download " + guisettingslink
  if 89 - 89: OoooooooOO + i1Iii1i1I . Iiii1i1 / iI1IiiIIIiIi
 if zipfile . is_zipfile ( oO0oO00 ) :
  Iii1I1I = str ( os . path . getsize ( oO0oO00 ) )
  if 75 - 75: iIii1I11I1II1 * i1Iii1i1I / O00OOOoOoo0O * oO0OooOoO . i1IIi
 else :
  Iii1I1I = oo000O0
  if 6 - 6: iI1IiiIIIiIi % iI1IiiIIIiIi / OoooooooOO * III1IiiI . o0Oo . i1IIi
  if 59 - 59: o00O0OoO . o00O0OoO * o0Oo - iI1IiiIIIiIi % O00OOOoOoo0O
 IiIiiI11i1Ii = open ( I11iii1Ii , mode = 'r' )
 i11ii1iI = IiIiiI11i1Ii . read ( )
 IiIiiI11i1Ii . close ( )
 if 19 - 19: OoooooooOO / II11iIiIIIiI - Iiii1i1 . O00OOOoOoo0O
 II1IIIi = re . compile ( 'id="(.+?)"' ) . findall ( i11ii1iI )
 Iiii = re . compile ( 'name="(.+?)"' ) . findall ( i11ii1iI )
 O0O0OOooo = re . compile ( 'version="(.+?)"' ) . findall ( i11ii1iI )
 if 8 - 8: o00O0OoO % o0oOo0 . iIii1I11I1II1
 o0OooOoOOoO = II1IIIi [ 0 ] if ( len ( II1IIIi ) > 0 ) else ''
 oo0OoO0oOO = Iiii [ 0 ] if ( len ( Iiii ) > 0 ) else ''
 i1ii1I = O0O0OOooo [ 0 ] if ( len ( O0O0OOooo ) > 0 ) else ''
 if 95 - 95: oOO00Oo + i11iIiiIii . OoooO0Oo0O0 . o0oOo0 . oOO00Oo
 if os . path . exists ( OOO00O ) :
  os . removedirs ( OOO00O )
  if 93 - 93: i1Iii1i1I
  if 55 - 55: oO0OooOoO % oOO00Oo - ii1ii11IIIiiI
 if oo000O0 != Iii1I1I :
  try :
   os . rename ( I11i1 , Oo0OoO00oOO0o )
   if 48 - 48: o0oOo0 * iIii1I11I1II1 % O00OOOoOoo0O
  except :
   iI111I11I1I1 . ok ( "NO GUISETTINGS!" , 'No guisettings.xml file has been found.' , 'Please exit Kodi and try again' , '' )
   return
   if 100 - 100: oO0OooOoO - i11iIiiIii + ii1ii11IIIiiI % o0oOo0 - iIii1I11I1II1 * i11iIiiIii
   if 30 - 30: ii1ii11IIIiiI . ii1ii11IIIiiI . iI1IiiIIIiIi % iI1IiiIIIiIi * i1IIi * III1IiiI
 if video != 'fresh' :
  iI1iii = xbmcgui . Dialog ( ) . yesno ( name , 'We highly recommend backing up your existing build before installing any community builds. Would you like to perform a backup first?' , nolabel = 'Backup' , yeslabel = 'Install' )
  if 74 - 74: OoooooooOO
  if iI1iii == 0 :
   i1i11IiII = xbmc . translatePath ( os . path . join ( OOO00 , 'Community_Builds' , 'My_Builds' ) )
   if 33 - 33: oOO00Oo - oO0OooOoO
   if not os . path . exists ( i1i11IiII ) :
    os . makedirs ( i1i11IiII )
    if 95 - 95: OoooooooOO
   iIo00OOOOOo0OOo = i1II11I11ii1 ( heading = "Enter a name for this backup" )
   if 23 - 23: oO0OooOoO + o00O0OoO / O0 . o00O0OoO . Iiii1i1 + iIii1I11I1II1
   if ( not iIo00OOOOOo0OOo ) :
    return False , 0
    if 2 - 2: i1IIi . O0 / oOO00Oo . oO0OooOoO / ii1ii11IIIiiI % i1IIi
   I1II1IiI1 = urllib . quote_plus ( iIo00OOOOOo0OOo )
   iIIiI11iI1Ii1 = xbmc . translatePath ( os . path . join ( i1i11IiII , I1II1IiI1 + '.zip' ) )
   o00oo = [ 'plugin.program.totalinstaller' , 'plugin.program.tbs' ]
   O0oO0oo0O = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , 'Thumbs.db' , '.gitignore' ]
   Oo00O0OO = "Creating full backup of existing build"
   oOOOoo0o = "Archiving..."
   iiiI1IiIIii = ""
   IIIIiii = "Please Wait"
   oOoOo ( iIii1 , iIIiI11iI1Ii1 , Oo00O0OO , oOOOoo0o , iiiI1IiIIii , IIIIiii , o00oo , O0oO0oo0O )
   if 12 - 12: oOO00Oo
 i1I = open ( I1IIiiIiii , mode = 'w+' )
 if 58 - 58: iIii1I11I1II1 * iI1IiiIIIiIi . o0oOo0 . II11iIiIIIiI * iI1IiiIIIiIi
 if oo000O0 != Iii1I1I :
  i1I . write ( 'id="' + str ( o0OooOoOOoO ) + '"\nname="' + oo0OoO0oOO + ' [COLOR=yellow](Partially installed)[/COLOR]"\nversion="' + i1ii1I + '"\ngui="' + Iii1I1I + '"' )
  if 63 - 63: O00OOOoOoo0O . o00O0OoO * oOO00Oo - o00O0OoO % o00O0OoO
 else :
  i1I . write ( 'id="' + str ( o0OooOoOOoO ) + '"\nname="' + oo0OoO0oOO + '"\nversion="' + i1ii1I + '"\ngui="' + Iii1I1I + '"' )
 i1I . close ( )
 if 62 - 62: o00O0OoO - o0oOo0 / o0oOo0
 if 95 - 95: O00OOOoOoo0O - i1IIi / Iiii1i1 . o0oOo0 % iiIi1i11 - i1IIi
 if video == 'libprofile' or video == 'library' or video == 'updatelibprofile' or video == 'updatelibrary' :
  try :
   shutil . copytree ( ooOoOoo0O , O0o0O00Oo0o0 , symlinks = False , ignore = shutil . ignore_patterns ( "Textures13.db" , "Addons16.db" , "Addons15.db" , "saltscache.db-wal" , "saltscache.db-shm" , "saltscache.db" , "onechannelcache.db" ) )
   if 12 - 12: i1Iii1i1I
  except :
   IIi1II = xbmcgui . Dialog ( ) . yesno ( name , 'There was an error trying to backup some databases. Continuing may wipe your existing library. Do you wish to continue?' , nolabel = 'No, cancel' , yeslabel = 'Yes, overwrite' )
   if 96 - 96: O0
   if IIi1II == 0 :
    return
    if 89 - 89: OoooO0Oo0O0 - II11iIiIIIiI
  iIIiI11iI1Ii1 = xbmc . translatePath ( os . path . join ( OOO00 , 'Database.zip' ) )
  iI11Ii111 ( O0o0O00Oo0o0 , iIIiI11iI1Ii1 )
  if 26 - 26: o0oOo0 % o0oOo0 / oO0OooOoO / i1Iii1i1I
 if IIi1II == 0 :
  return
  if 2 - 2: i1IIi / i11iIiiIii + o0Oo
 time . sleep ( 1 )
 if 95 - 95: OoooO0Oo0O0 / i11111IIIII % iIii1I11I1II1 + O0
 if 6 - 6: i11111IIIII
 OOoO0OOO00 = xbmc . translatePath ( os . path . join ( iIii1 , '..' , 'koditemp.zip' ) )
 time . sleep ( 2 )
 OOooO0OOoo . create ( "Community Builds" , "Downloading " + description + " build." , '' , 'Please Wait' )
 IiI11 = description . replace ( ' ' , '_' ) . replace ( ':' , '-' ) . replace ( "'" , '' )
 oO0oO00 = os . path . join ( iiiiiIIii , IiI11 + '.zip' )
 if 15 - 15: oOO00Oo . O0 - o0Oo / i1IIi . III1IiiI * OoooooooOO
 if not os . path . exists ( iiiiiIIii ) :
  os . makedirs ( iiiiiIIii )
  if 32 - 32: o0oOo0 / oO0OooOoO . O0 . o0oOo0 % o0Oo - oOO00Oo
 downloader . download ( url , oO0oO00 , OOooO0OOoo )
 if 69 - 69: iI1IiiIIIiIi - o0Oo * iiIi1i11 . iIii1I11I1II1 * O00OOOoOoo0O . OoooooooOO
 if 6 - 6: O0 . oOO00Oo - O00OOOoOoo0O
 try :
  Ii1i11IIiI = open ( I1IIIii , mode = 'r' )
  III1i1 = Ii1i11IIiI . read ( )
  Ii1i11IIiI . close ( )
 except :
  print "### No profiles detected, most likely a fresh wipe performed"
  if 90 - 90: o0Oo % o0oOo0 % OoooooooOO / ii1ii11IIIiiI . i11111IIIII * oO0OooOoO
 OOooO0OOoo . close ( )
 OOooO0OOoo . create ( "Community Builds" , "Checking " , '' , 'Please Wait' )
 if 83 - 83: III1IiiI
 if 34 - 34: O00OOOoOoo0O
 if zipfile . is_zipfile ( oO0oO00 ) :
  OOooO0OOoo . update ( 0 , "" , "Extracting Zip Please Wait" )
  extract . all ( oO0oO00 , iIii1 , OOooO0OOoo )
  if 75 - 75: o00O0OoO / iIii1I11I1II1 + OoooO0Oo0O0 / ii1ii11IIIiiI
 else :
  iI111I11I1I1 . ok ( 'Not a valid zip file' , 'This file is not a valid zip file, please let the build author know on their support thread so they can amend the download path. It\'s most likely just a simple typo on their behalf.' )
  return
  if 50 - 50: Iiii1i1 / o00O0OoO % iIii1I11I1II1
 OOooO0OOoo . create ( "Restoring Dependencies" , "Checking " , '' , 'Please Wait' )
 OOooO0OOoo . update ( 0 , "" , "Extracting Zip Please Wait" )
 if 46 - 46: o0oOo0 + i1Iii1i1I - II11iIiIIIiI % iiIi1i11 + OoooooooOO + iIii1I11I1II1
 if I1IiI == 'true' :
  try :
   print "### Attempting to add back favourites ###"
   i1I = open ( IIIII , mode = 'w+' )
   i1I . write ( O000000oooOOo )
   i1I . close ( )
   OOooO0OOoo . update ( 0 , "" , "Copying Favourites" )
  except :
   print "### Failed to copy back favourites"
   if 99 - 99: ii1ii11IIIiiI - i11111IIIII * i11111IIIII + III1IiiI / i1Iii1i1I + iiIi1i11
 if o0OOO == 'true' :
  try :
   print "### Attempting to add back sources ###"
   i1I = open ( ooooooO0oo , mode = 'w+' )
   i1I . write ( OOo0oo )
   i1I . close ( )
   OOooO0OOoo . update ( 0 , "" , "Copying Sources" )
   if 58 - 58: i11iIiiIii + iIii1I11I1II1 * oOO00Oo - O00OOOoOoo0O
  except :
   print "### Failed to copy back sources"
   if 31 - 31: i1IIi
 time . sleep ( 1 )
 if os . path . exists ( O0o0O00Oo0o0 ) :
  shutil . rmtree ( O0o0O00Oo0o0 )
  if 87 - 87: o0Oo / o00O0OoO + OoooooooOO + O0 . iI1IiiIIIiIi
  if 44 - 44: II11iIiIIIiI % II11iIiIIIiI
 if os . path . exists ( O000OO0 ) :
  IiIiiI11i1Ii = open ( O000OO0 , mode = 'r' )
  i11ii1iI = IiIiiI11i1Ii . read ( )
  IiIiiI11i1Ii . close ( )
  i1Ii1 = re . compile ( 'version="[\s\S]*?"' ) . findall ( i11ii1iI )
  I1I1IiI1 = i1Ii1 [ 0 ] if ( len ( i1Ii1 ) > 0 ) else ''
  IIiIi11i1i = i11ii1iI . replace ( I1I1IiI1 , 'version="' + i1ii1I + '"' )
  i1I = open ( O000OO0 , mode = 'w' )
  i1I . write ( str ( IIiIi11i1i ) )
  i1I . close ( )
  if 58 - 58: iiIi1i11 * oO0OooOoO
 else :
  i1I = open ( O000OO0 , mode = 'w+' )
  i1I . write ( 'date="01011001"\nversion="' + i1ii1I + '"' )
  i1I . close ( )
  if 29 - 29: iIii1I11I1II1 % O00OOOoOoo0O % OoooO0Oo0O0 / O00OOOoOoo0O - i11iIiiIii
  if 67 - 67: iiIi1i11 / iI1IiiIIIiIi
 if IIiIiII11i == 'false' :
  os . remove ( oO0oO00 )
  if 51 - 51: o00O0OoO % oO0OooOoO - oOO00Oo % ii1ii11IIIiiI * i11iIiiIii * i1Iii1i1I
  if 82 - 82: OoooooooOO / o0Oo * oO0OooOoO - OoooooooOO % iIii1I11I1II1 * ii1ii11IIIiiI
 if 'prof' in video :
  try :
   Ii1Ii11I = open ( I1IIIii , mode = 'w+' )
   Ii1Ii11I . write ( III1i1 )
   Ii1Ii11I . close ( )
  except :
   print "### Failed to write existing profile info back into profiles.xml"
   if 99 - 99: iiIi1i11 . iIii1I11I1II1
   if 45 - 45: Iiii1i1 - O0 . Iiii1i1 / Iiii1i1 / O00OOOoOoo0O
 if video == 'library' or video == 'libprofile' or video == 'updatelibprofile' or video == 'updatelibrary' :
  extract . all ( iIIiI11iI1Ii1 , ooOoOoo0O , OOooO0OOoo )
  if 12 - 12: iiIi1i11
  if 75 - 75: iiIi1i11 + iI1IiiIIIiIi + III1IiiI . II11iIiIIIiI
  if IIi1II != 1 :
   shutil . rmtree ( O0o0O00Oo0o0 )
 try :
  OOooO0OOoo . close ( )
 except :
  pass
  if 93 - 93: iiIi1i11 * iI1IiiIIIiIi - oOO00Oo . III1IiiI . i1Iii1i1I
  if 64 - 64: II11iIiIIIiI / iIii1I11I1II1 . ii1ii11IIIiiI / oOO00Oo / o00O0OoO
 if os . path . exists ( i1i ) :
  i111I11i1I ( description )
  if 3 - 3: iiIi1i11 - oOO00Oo * iIii1I11I1II1 . iI1IiiIIIiIi + O00OOOoOoo0O % Iiii1i1
  try :
   os . remove ( i1i )
   if 11 - 11: iiIi1i11
  except :
   print "###' Failed to remove: " + i1i
   if 12 - 12: OoooooooOO * iiIi1i11 * OoooO0Oo0O0 * o0oOo0
  try :
   shutil . rmtree ( i1Oo00 )
   if 26 - 26: OoooooooOO . i1IIi + ii1ii11IIIiiI
  except :
   print "###' Failed to remove: " + i1Oo00
   if 42 - 42: i11iIiiIii * oOO00Oo % o00O0OoO % II11iIiIIIiI + oOO00Oo * i11iIiiIii
 else :
  print "### Community Builds - using an old build"
  if 66 - 66: iI1IiiIIIiIi / i11111IIIII . OoooooooOO * II11iIiIIIiI % i11iIiiIii
  if 100 - 100: OoooO0Oo0O0 % oO0OooOoO * i11iIiiIii - i1Iii1i1I
 if oo000O0 != Iii1I1I :
  print "### GUI SIZE DIFFERENT ATTEMPTING MERGE ###"
  o0o00O0 = os . path . join ( iIii1 , 'newbuild' )
  if 88 - 88: o0Oo
  if not os . path . exists ( o0o00O0 ) :
   os . makedirs ( o0o00O0 )
   if 74 - 74: i1Iii1i1I * i11iIiiIii + i1IIi * o0oOo0 + III1IiiI * iI1IiiIIIiIi
  os . makedirs ( OOO00O )
  time . sleep ( 1 )
  Ii1o0OOOoo0000 ( guisettingslink , video )
  time . sleep ( 1 )
  O00OO00OOOoO ( )
  iI111I11I1I1 . ok ( "Force Close Required" , "If you\'re seeing this message it means the force close was unsuccessful. Please close XBMC/Kodi via your operating system or pull the power." )
  if 90 - 90: i1Iii1i1I
 if oo000O0 == Iii1I1I :
  iI111I11I1I1 . ok ( 'Successfully Updated' , 'Congratulations the following build:[COLOR=dodgerblue]' , description , '[/COLOR]has been successfully updated!' )
  if 71 - 71: i11111IIIII - oO0OooOoO - oOO00Oo * i11iIiiIii / Iiii1i1
  if 74 - 74: i1Iii1i1I % i1IIi / II11iIiIIIiI . O0
def iIIi1i111iI ( ) :
 if i1IiI1I11 . getSetting ( 'email' ) == '' :
  iI111I11I1I1 = xbmcgui . Dialog ( )
  iI111I11I1I1 . ok ( "No Email Address Set" , "A new window will Now open for you to enter your Email address. The logfile will be sent here" )
  i1IiI1I11 . openSettings ( )
 xbmc . executebuiltin ( 'XBMC.RunScript(special://home/addons/' + o0OO00 + '/uploadLog.py)' )
 if 10 - 10: i11111IIIII % oO0OooOoO
 if 50 - 50: O00OOOoOoo0O * i1Iii1i1I
def oooO00oOoOO0o ( localbuildcheck , localversioncheck , localidcheck ) :
 print "### USER_INFO CHECK"
 if o0oO0 == 'true' :
  try :
   oOo0 = 'http://noobsandnerds.com/TI/login/login_details.php?user=%s&pass=%s' % ( i1i1II , O0oo0OO0 )
   OOOoOO = I11IIIi ( oOo0 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
   ooIi = re . compile ( 'login_msg="(.+?)"' ) . findall ( OOOoOO )
   O00Oo = ooIi [ 0 ] if ( len ( ooIi ) > 0 ) else ''
   iii1I = re . compile ( 'posts="(.+?)"' ) . findall ( OOOoOO )
   iIiI11I = iii1I [ 0 ] if ( len ( iii1I ) > 0 ) else '0'
  except :
   O00Oo = '[COLOR=lime]UNABLE TO VERIFY LOGIN[/COLOR]'
   if 60 - 60: O0 + OoooooooOO + III1IiiI * i1Iii1i1I % O00OOOoOoo0O
 else :
  O00Oo = '[COLOR=lime]REGISTER FOR FREE TO UNLOCK FEATURES[/COLOR]'
  if 23 - 23: iI1IiiIIIiIi . o00O0OoO + o0oOo0
 print "### WELCOMETEXT: " + O00Oo
 if 78 - 78: iIii1I11I1II1 + ii1ii11IIIiiI + i11iIiiIii
 oOo0 = 'http://noobsandnerds.com/TI/menu_check'
 try :
  OOOoOO = I11IIIi ( oOo0 , 10 ) . replace ( '\n' , '' ) . replace ( '\r' , '' )
  O00OoOoO = re . compile ( 'd="(.+?)"' ) . findall ( OOOoOO )
  ooO0o0oo = O00OoOoO [ 0 ] if ( len ( O00OoOoO ) > 0 ) else 'none'
 except :
  ooO0o0oo = 'none'
  if 21 - 21: II11iIiIIIiI + iI1IiiIIIiIi % o0oOo0 + O00OOOoOoo0O % o00O0OoO
 print "### MENU: " + ooO0o0oo
 if 22 - 22: i1IIi / OoooooooOO . ii1ii11IIIiiI
 if 83 - 83: o0Oo - OoooooooOO + OoooO0Oo0O0 . iI1IiiIIIiIi / oOO00Oo + o0oOo0
 if not 'REGISTER FOR FREE' in O00Oo and not 'UNABLE TO VERIFY' in O00Oo :
  print "### ATTEMPTING TO WRITE COOKIE "
  i1I = open ( oo0OooOOo0 , mode = 'w+' )
  i1I . write ( 'd="' + binascii . hexlify ( IiIi11iI1 ( ) ) + '"\nl="' + binascii . hexlify ( O00Oo ) + '"\np="' + binascii . hexlify ( iIiI11I ) + '"\nm="' + binascii . hexlify ( ooO0o0oo ) + '"' )
  i1I . close ( )
  if 90 - 90: o0Oo - i11iIiiIii
 o0Ii1 ( localbuildcheck , localversioncheck , localidcheck , O00Oo , ooO0o0oo )
 if 42 - 42: iiIi1i11 . II11iIiIIIiI
 if 21 - 21: i1Iii1i1I . o0Oo / o00O0OoO
def IiI1iiiIii ( ) :
 xbmc . executebuiltin ( 'UpdateLocalAddons' )
 xbmc . executebuiltin ( 'UpdateAddonRepos' )
 xbmcgui . Dialog ( ) . ok ( 'Force Refresh Started Successfully' , 'Depending on the speed of your device it could take a few minutes for the update to take effect.' )
 return
 if 97 - 97: iIii1I11I1II1 + i1IIi - oOO00Oo
 if 73 - 73: ii1ii11IIIiiI - i11iIiiIii % Iiii1i1 / II11iIiIIIiI - OoooooooOO % iiIi1i11
def OOoO0 ( ) :
 o00o0Ooo = 1
 try :
  I11IIIi ( 'http://google.com' , 5 )
 except :
  try :
   I11IIIi ( 'http://google.com' , 5 )
  except :
   try :
    I11IIIi ( 'http://google.com' , 5 )
   except :
    try :
     I11IIIi ( 'http://google.cn' , 5 )
    except :
     try :
      I11IIIi ( 'http://google.cn' , 5 )
     except :
      iI111I11I1I1 . ok ( "NO INTERNET CONNECTION" , 'It looks like this device isn\'t connected to the internet. Only some of the maintenance options will work until you fix the connectivity problem.' )
      o0Ii1 ( '' , '' , '' , '[COLOR=orange]NO INTERNET CONNECTION[/COLOR]' )
      o00o0Ooo = 0
 if o00o0Ooo == 1 :
  II1I1 ( )
  if 50 - 50: ii1ii11IIIiiI / o00O0OoO . i11iIiiIii
  if 84 - 84: OoooooooOO . ii1ii11IIIiiI / O00OOOoOoo0O * i1IIi
def II1I1 ( ) :
 iIIIi1IiI11I1 = 'None'
 OOOOOOO0oo = '0'
 if 6 - 6: iIii1I11I1II1 * iIii1I11I1II1
 if 77 - 77: iiIi1i11 % III1IiiI + iIii1I11I1II1 * iI1IiiIIIiIi . i11111IIIII . II11iIiIIIiI
 IiIiiI11i1Ii = open ( O000OO0 , mode = 'r' )
 i11ii1iI = IiIiiI11i1Ii . read ( )
 IiIiiI11i1Ii . close ( )
 if 29 - 29: OoooO0Oo0O0 + OoooooooOO . ii1ii11IIIiiI . i1IIi - OoooooooOO * i11iIiiIii
 iIIi1i1i1iI1I = re . compile ( 'date="(.+?)"' ) . findall ( i11ii1iI )
 O0o0O0000ooo0 = iIIi1i1i1iI1I [ 0 ] if ( len ( iIIi1i1i1iI1I ) > 0 ) else ''
 i1Ii1 = re . compile ( 'version="(.+?)"' ) . findall ( i11ii1iI )
 I1I1IiI1 = i1Ii1 [ 0 ] if ( len ( i1Ii1 ) > 0 ) else ''
 if 19 - 19: i1IIi + i1Iii1i1I . oO0OooOoO . o0oOo0 + i11iIiiIii * i1IIi
 oOOoO0oO0oo0O = open ( I1IIiiIiii , mode = 'r' )
 oO00Oo = oOOoO0oO0oo0O . read ( )
 oOOoO0oO0oo0O . close ( )
 if 57 - 57: o0Oo % i11111IIIII . III1IiiI - o0Oo * iiIi1i11
 Ii1IIi = re . compile ( 'id="(.+?)"' ) . findall ( oO00Oo )
 O0Oo0 = re . compile ( 'name="(.+?)"' ) . findall ( oO00Oo )
 OOOOOOO0oo = Ii1IIi [ 0 ] if ( len ( Ii1IIi ) > 0 ) else 'None'
 iIIIi1IiI11I1 = O0Oo0 [ 0 ] if ( len ( O0Oo0 ) > 0 ) else ''
 if 22 - 22: o00O0OoO . O00OOOoOoo0O * O0 - i11111IIIII
 if 12 - 12: i11iIiiIii + OoooO0Oo0O0 * ii1ii11IIIiiI
 if 13 - 13: II11iIiIIIiI + OoooooooOO / i11111IIIII
 if 56 - 56: OoooO0Oo0O0 * oO0OooOoO
 if 75 - 75: o00O0OoO . oOO00Oo - i11iIiiIii / o00O0OoO
 if 100 - 100: i11iIiiIii * i11iIiiIii . iIii1I11I1II1 % i1Iii1i1I * OoooO0Oo0O0
 if 17 - 17: iI1IiiIIIiIi * i11111IIIII * i11iIiiIii / OoooO0Oo0O0 / i11iIiiIii
 if 23 - 23: OoooooooOO + i11iIiiIii / II11iIiIIIiI / i1Iii1i1I . i1Iii1i1I * o0Oo
 if 98 - 98: i11111IIIII
 if 23 - 23: o00O0OoO / i1IIi * ii1ii11IIIiiI
 if 51 - 51: iiIi1i11 - OoooooooOO / OoooooooOO % OoooooooOO
 if 85 - 85: ii1ii11IIIiiI . oOO00Oo . o0Oo
 if 75 - 75: iIii1I11I1II1 - iI1IiiIIIiIi % O0 % i11111IIIII
 if 6 - 6: II11iIiIIIiI % III1IiiI * o0oOo0 - i1IIi . O00OOOoOoo0O
 if 20 - 20: II11iIiIIIiI / Iiii1i1 . II11iIiIIIiI
 if 60 - 60: OoooO0Oo0O0 - o0Oo * O0 * II11iIiIIIiI . i1IIi . O00OOOoOoo0O
 if 24 - 24: i11111IIIII * o0Oo / iiIi1i11
 if 51 - 51: iIii1I11I1II1 / o00O0OoO * ii1ii11IIIiiI * iI1IiiIIIiIi + OoooO0Oo0O0 . OoooooooOO
 if 75 - 75: i11111IIIII / OoooooooOO / O0 % iiIi1i11
 if 87 - 87: oO0OooOoO / iIii1I11I1II1 % OoooO0Oo0O0
 if 11 - 11: oOO00Oo * ii1ii11IIIiiI
 if 92 - 92: O00OOOoOoo0O . II11iIiIIIiI * o00O0OoO
 if 86 - 86: O0
 if not os . path . exists ( oo0OooOOo0 ) :
  print "### First login check ###"
  oooO00oOoOO0o ( iIIIi1IiI11I1 , I1I1IiI1 , OOOOOOO0oo )
  if 55 - 55: iI1IiiIIIiIi / Iiii1i1 / OoooO0Oo0O0 % o0oOo0 % o0Oo
  if 55 - 55: III1IiiI + OoooooooOO % i1IIi
 else :
  try :
   iIIIIiI1I = open ( oo0OooOOo0 , mode = 'r' )
   oOO00O0O0oO0 = iIIIIiI1I . read ( )
   iIIIIiI1I . close ( )
   if 14 - 14: oOO00Oo . iIii1I11I1II1 + OoooooooOO - i1IIi / iI1IiiIIIiIi
   OOiI1I = re . compile ( 'd="(.+?)"' ) . findall ( oOO00O0O0oO0 )
   II11IIi11Ii11 = re . compile ( 'l="(.+?)"' ) . findall ( oOO00O0O0oO0 )
   iII1I = re . compile ( 'm="(.+?)"' ) . findall ( oOO00O0O0oO0 )
   i1ii1iIIi11i111I = OOiI1I [ 0 ] if ( len ( OOiI1I ) > 0 ) else '0'
   if 66 - 66: ii1ii11IIIiiI % II11iIiIIIiI . oO0OooOoO
   if i1ii1iIIi11i111I != '0' :
    i1ii1iIIi11i111I = binascii . unhexlify ( i1ii1iIIi11i111I )
    if 84 - 84: o0oOo0 * OoooooooOO + O0
   O00Oo = II11IIi11Ii11 [ 0 ] if ( len ( II11IIi11Ii11 ) > 0 ) else ''
   O00Oo = binascii . unhexlify ( O00Oo )
   OoIiI = iII1I [ 0 ] if ( len ( iII1I ) > 0 ) else ''
   OoIiI = binascii . unhexlify ( OoIiI )
  except :
   os . remove ( oo0OooOOo0 )
  if int ( i1ii1iIIi11i111I ) + 2000000 > int ( IiIi11iI1 ( ) ) :
   print "### Login successful ###"
   o0Ii1 ( iIIIi1IiI11I1 , I1I1IiI1 , OOOOOOO0oo , O00Oo , OoIiI )
  else :
   print "### Checking login ###"
   oooO00oOoOO0o ( iIIIi1IiI11I1 , I1I1IiI1 , OOOOOOO0oo )
   if 21 - 21: oO0OooOoO . O0 + II11iIiIIIiI - i11iIiiIii
   if 5 - 5: iIii1I11I1II1 * i11iIiiIii + ii1ii11IIIiiI + o00O0OoO * O0 % o0oOo0
def ooO0 ( ) :
 oO0oooo0 = os . path . join ( xbmc . translatePath ( os . path . join ( 'special://profile' , 'addon_data' ) ) )
 if 66 - 66: i1IIi % OoooooooOO * i11iIiiIii + III1IiiI * O0 / ii1ii11IIIiiI
 iI1IiI1 = [
 ( oO0oooo0 ) ,
 ( O0OoO000O0OO ) ,
 ( os . path . join ( iIii1 , 'cache' ) ) ,
 ( os . path . join ( iIii1 , 'temp' ) ) ,
 ( os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'Other' ) ) ,
 ( os . path . join ( '/private/var/mobile/Library/Caches/AppleTV/Video/' , 'LocalAndRental' ) ) ,
 ( os . path . join ( O0OoO000O0OO , 'script.module.simple.downloader' ) ) ,
 ( os . path . join ( xbmc . translatePath ( os . path . join ( 'special://profile' , 'addon_data' , 'script.module.simple.downloader' ) ) ) ) ,
 ( os . path . join ( O0OoO000O0OO , 'plugin.video.itv' , 'Images' ) ) ,
 ( os . path . join ( xbmc . translatePath ( os . path . join ( 'special://profile' , 'addon_data' , 'plugin.video.itv' , 'Images' ) ) ) ) ]
 if 53 - 53: Iiii1i1 + i11111IIIII . i1IIi
 for iIIii1iiiIiiI in iI1IiI1 :
  if os . path . exists ( iIIii1iiiIiiI ) and iIIii1iiiIiiI != O0OoO000O0OO and iIIii1iiiIiiI != oO0oooo0 :
   for IiiI111 , ooooOoO0O , IIII in os . walk ( iIIii1iiiIiiI ) :
    O0OOOo0Oo0 = 0
    O0OOOo0Oo0 += len ( IIII )
    if O0OOOo0Oo0 > 0 :
     for Oo0O0O000 in IIII :
      try :
       os . unlink ( os . path . join ( IiiI111 , Oo0O0O000 ) )
      except :
       pass
     for Ii1iI in ooooOoO0O :
      try :
       shutil . rmtree ( os . path . join ( IiiI111 , Ii1iI ) )
       print "### Successfully cleared " + str ( O0OOOo0Oo0 ) + " files from " + os . path . join ( iIIii1iiiIiiI , Ii1iI )
      except :
       print "### Failed to wipe cache in: " + os . path . join ( iIIii1iiiIiiI , Ii1iI )
  else :
   for IiiI111 , ooooOoO0O , IIII in os . walk ( iIIii1iiiIiiI ) :
    for Ii1iI in ooooOoO0O :
     if 'Cache' in Ii1iI or 'cache' in Ii1iI or 'CACHE' in Ii1iI :
      try :
       shutil . rmtree ( os . path . join ( IiiI111 , Ii1iI ) )
       print "### Successfully wiped " + os . path . join ( iIIii1iiiIiiI , Ii1iI )
      except :
       print "### Failed to wipe cache in: " + os . path . join ( iIIii1iiiIiiI , Ii1iI )
       if 26 - 26: i11iIiiIii - oO0OooOoO
       if 43 - 43: o0Oo
 try :
  O00OooOOoo = os . path . join ( xbmc . translatePath ( 'special://profile/addon_data/plugin.video.genesis' ) , 'cache.db' )
  IiII1Iiii = database . connect ( O00OooOOoo )
  I1o000o00OO00Oo = IiII1Iiii . cursor ( )
  I1o000o00OO00Oo . execute ( "DROP TABLE IF EXISTS rel_list" )
  I1o000o00OO00Oo . execute ( "VACUUM" )
  IiII1Iiii . commit ( )
  I1o000o00OO00Oo . execute ( "DROP TABLE IF EXISTS rel_lib" )
  I1o000o00OO00Oo . execute ( "VACUUM" )
  IiII1Iiii . commit ( )
 except :
  pass
  if 35 - 35: o0oOo0 + O00OOOoOoo0O * OoooooooOO - oO0OooOoO
  if 19 - 19: i1IIi / iI1IiiIIIiIi / O00OOOoOoo0O . o0Oo / iI1IiiIIIiIi % oOO00Oo
def i1i11Ii1 ( mode ) :
 if zip == '' :
  iI111I11I1I1 . ok ( 'Please set your backup location before proceeding' , 'You have not set your backup storage folder.\nPlease update the addon settings and try again.' )
  i1IiI1I11 . openSettings ( sys . argv [ 0 ] )
  I1IiI1iIII1I = i1IiI1I11 . getSetting ( 'zip' )
  if I1IiI1iIII1I == '' :
   i1i11Ii1 ( mode )
 i1i11IiII = xbmc . translatePath ( os . path . join ( OOO00 , 'Community_Builds' , 'My_Builds' ) )
 if not os . path . exists ( i1i11IiII ) :
  os . makedirs ( i1i11IiII )
 iI1iii = xbmcgui . Dialog ( ) . yesno ( "ABSOLUTELY CERTAIN?!!!" , 'Are you absolutely certain you want to wipe?' , '' , 'All addons and settings will be completely wiped!' , yeslabel = 'Yes' , nolabel = 'No' )
 if 95 - 95: oO0OooOoO + o0Oo
 if iI1iii == 1 :
  if OOOO0OOoO0O0 != "skin.confluence" :
   iI111I11I1I1 . ok ( 'Default Confluence Skin Required' , 'Please switch to the default Confluence skin before performing a wipe.' )
   xbmc . executebuiltin ( "ActivateWindow(appearancesettings,return)" )
   return
  else :
   if 59 - 59: iI1IiiIIIiIi
   iI1iii = xbmcgui . Dialog ( ) . yesno ( "VERY IMPORTANT" , 'This will completely wipe your install.' , 'Would you like to create a backup before proceeding?' , '' , yeslabel = 'No' , nolabel = 'Yes' )
   if iI1iii == 0 :
    if not os . path . exists ( i1i11IiII ) :
     os . makedirs ( i1i11IiII )
    iIo00OOOOOo0OOo = i1II11I11ii1 ( heading = "Enter a name for this backup" )
    if ( not iIo00OOOOOo0OOo ) : return False , 0
    I1II1IiI1 = urllib . quote_plus ( iIo00OOOOOo0OOo )
    iIIiI11iI1Ii1 = xbmc . translatePath ( os . path . join ( i1i11IiII , I1II1IiI1 + '.zip' ) )
    o00oo = [ 'plugin.program.totalinstaller' , 'plugin.program.tbs' ]
    O0oO0oo0O = [ "xbmc.log" , "xbmc.old.log" , "kodi.log" , "kodi.old.log" , '.DS_Store' , '.setup_complete' , 'XBMCHelper.conf' , '.gitignore' ]
    Oo00O0OO = "Creating full backup of existing build"
    oOOOoo0o = "Archiving..."
    iiiI1IiIIii = ""
    IIIIiii = "Please Wait"
    oOoOo ( iIii1 , iIIiI11iI1Ii1 , Oo00O0OO , oOOOoo0o , iiiI1IiIIii , IIIIiii , o00oo , O0oO0oo0O )
   ooOo0O0o ( iiI111I1iIiI )
   OOO00i111 ( )
   IiIIIIII ( )
   Ii1i ( )
   i1i1I111iI ( iiI111I1iIiI )
   if os . path . exists ( O000OO0 ) :
    os . remove ( O000OO0 )
   if os . path . exists ( I11iii1Ii ) :
    os . remove ( I11iii1Ii )
   if os . path . exists ( I1IIiiIiii ) :
    os . remove ( I1IIiiIiii )
  if mode != 'CB' :
   O00OO00OOOoO ( )
  try :
   os . remove ( O000OO0 )
  except :
   print "### Failed to remove startup.xml"
  try :
   os . remove ( I1IIiiIiii )
  except :
   print "### Failed to remove id.xml"
 else :
  return
  if 86 - 86: ii1ii11IIIiiI / iiIi1i11 + i1IIi + i1Iii1i1I - O0 * iiIi1i11
  if 89 - 89: II11iIiIIIiI
def ooOo0O0o ( excludefiles ) :
 OOooO0OOoo . create ( "Wiping Existing Content" , '' , 'Please wait...' , '' )
 for IiiI111 , ooooOoO0O , IIII in os . walk ( iIii1 , topdown = True ) :
  ooooOoO0O [ : ] = [ Ii1iI for Ii1iI in ooooOoO0O if Ii1iI not in iiI111I1iIiI ]
  for i1iIIIi1i in IIII :
   try :
    OOooO0OOoo . update ( 0 , "Removing [COLOR=yellow]" + i1iIIIi1i + '[/COLOR]' , '' , 'Please wait...' )
    os . unlink ( os . path . join ( IiiI111 , i1iIIIi1i ) )
    os . remove ( os . path . join ( IiiI111 , i1iIIIi1i ) )
    os . rmdir ( os . path . join ( IiiI111 , i1iIIIi1i ) )
   except :
    print "Failed to remove file: " + i1iIIIi1i
    if 52 - 52: O0 . Iiii1i1 + i1Iii1i1I / i11iIiiIii
    if 52 - 52: III1IiiI % II11iIiIIIiI * oO0OooOoO
def OOO00i111 ( ) :
 ii1iiiIIiIII = [ i1iIIIi1i for i1iIIIi1i in os . listdir ( oOOoO0 ) if os . path . isdir ( os . path . join ( oOOoO0 , i1iIIIi1i ) ) ]
 try :
  for i1iIIIi1i in ii1iiiIIiIII :
   try :
    if i1iIIIi1i not in iiI111I1iIiI :
     OOooO0OOoo . update ( 0 , "Cleaning Directory: [COLOR=yellow]" + i1iIIIi1i + ' [/COLOR]' , '' , 'Please wait...' )
     shutil . rmtree ( os . path . join ( oOOoO0 , i1iIIIi1i ) )
   except :
    print "Failed to remove: " + i1iIIIi1i
 except :
  pass
  if 3 - 3: i11111IIIII % Iiii1i1 . OoooooooOO
  if 19 - 19: Iiii1i1 * iI1IiiIIIiIi - III1IiiI
 for IiiI111 , ooooOoO0O , IIII in os . walk ( oOOoO0 , topdown = True ) :
  ooooOoO0O [ : ] = [ Ii1iI for Ii1iI in ooooOoO0O if Ii1iI not in iiI111I1iIiI ]
  for i1iIIIi1i in IIII :
   try :
    OOooO0OOoo . update ( 0 , "Removing [COLOR=yellow]" + i1iIIIi1i + '[/COLOR]' , '' , 'Please wait...' )
    os . unlink ( os . path . join ( IiiI111 , i1iIIIi1i ) )
    os . remove ( os . path . join ( IiiI111 , i1iIIIi1i ) )
   except :
    print "Failed to remove file: " + i1iIIIi1i
    if 78 - 78: ii1ii11IIIiiI - iI1IiiIIIiIi / iiIi1i11
    if 81 - 81: O00OOOoOoo0O
def IiIIIIII ( ) :
 i1111o0o0oo = [ i1iIIIi1i for i1iIIIi1i in os . listdir ( II11iiii1Ii ) if os . path . isdir ( os . path . join ( II11iiii1Ii , i1iIIIi1i ) ) ]
 try :
  for i1iIIIi1i in i1111o0o0oo :
   try :
    if iIiiiI == 'true' :
     if i1iIIIi1i not in iiI111I1iIiI and not 'repo' in i1iIIIi1i :
      OOooO0OOoo . update ( 0 , "Removing Add-on: [COLOR=yellow]" + i1iIIIi1i + ' [/COLOR]' , '' , 'Please wait...' )
      shutil . rmtree ( os . path . join ( II11iiii1Ii , i1iIIIi1i ) )
    else :
     if i1iIIIi1i not in iiI111I1iIiI :
      OOooO0OOoo . update ( 0 , "Removing Add-on: [COLOR=yellow]" + i1iIIIi1i + ' [/COLOR]' , '' , 'Please wait...' )
      shutil . rmtree ( os . path . join ( II11iiii1Ii , i1iIIIi1i ) )
   except :
    print "Failed to remove: " + i1iIIIi1i
 except :
  pass
  if 68 - 68: i1Iii1i1I . iiIi1i11
  if 6 - 6: iI1IiiIIIiIi - oOO00Oo % o00O0OoO + i11iIiiIii
def Ii1i ( ) :
 iiO0oo0O0OO0OOo = [ i1iIIIi1i for i1iIIIi1i in os . listdir ( O0OoO000O0OO ) if os . path . isdir ( os . path . join ( O0OoO000O0OO , i1iIIIi1i ) ) ]
 try :
  for i1iIIIi1i in iiO0oo0O0OO0OOo :
   try :
    if i1iIIIi1i not in iiI111I1iIiI :
     OOooO0OOoo . update ( 0 , "Removing Add-on Data: [COLOR=yellow]" + i1iIIIi1i + ' [/COLOR]' , '' , 'Please wait...' )
     shutil . rmtree ( os . path . join ( O0OoO000O0OO , i1iIIIi1i ) )
   except :
    print "Failed to remove: " + i1iIIIi1i
 except :
  pass
  if 12 - 12: o00O0OoO
  if 97 - 97: i1IIi % o00O0OoO . oOO00Oo * o0Oo % oO0OooOoO
def i1i1I111iI ( excludefiles ) :
 i1O0o00o0Oo = [ i1iIIIi1i for i1iIIIi1i in os . listdir ( iIii1 ) if os . path . isdir ( os . path . join ( iIii1 , i1iIIIi1i ) ) ]
 try :
  for i1iIIIi1i in i1O0o00o0Oo :
   try :
    if i1iIIIi1i not in excludefiles :
     OOooO0OOoo . update ( 0 , "Cleaning Directory: [COLOR=yellow]" + i1iIIIi1i + ' [/COLOR]' , '' , 'Please wait...' )
     shutil . rmtree ( os . path . join ( iIii1 , i1iIIIi1i ) )
   except :
    print "Failed to remove: " + i1iIIIi1i
 except :
  pass
  if 29 - 29: ii1ii11IIIiiI - II11iIiIIIiI . III1IiiI / ii1ii11IIIiiI % i11iIiiIii
  if 26 - 26: o0oOo0 . Iiii1i1 / oO0OooOoO % iI1IiiIIIiIi
def O00o0oO0oO0 ( url ) :
 oO00oOOoooO ( 'folder' , '[COLOR=yellow]1. Install[/COLOR]' , str ( url ) + '&tags=Install&XBMC=1' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=lime]2. Settings[/COLOR]' , str ( url ) + '&tags=Settings' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=orange]3. Add-ons[/COLOR]' , str ( url ) , 'tutorial_addon_menu' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Audio' , str ( url ) + '&tags=Audio' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Errors' , str ( url ) + '&tags=Errors' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Gaming' , str ( url ) + '&tags=Gaming' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  LiveTV' , str ( url ) + '&tags=LiveTV' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Maintenance' , str ( url ) + '&tags=Maintenance' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Pictures' , str ( url ) + '&tags=Pictures' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Profiles' , str ( url ) + '&tags=Profiles' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Skins' , str ( url ) + '&tags=Skins' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Video' , str ( url ) + '&tags=Video' , 'grab_tutorials' , '' , '' , '' , '' )
 oO00oOOoooO ( 'folder' , '[COLOR=dodgerblue][XBMC/Kodi][/COLOR]  Weather' , str ( url ) + '&tags=Weather' , 'grab_tutorials' , '' , '' , '' , '' )
 if 28 - 28: i11111IIIII . oOO00Oo
 if 87 - 87: iIii1I11I1II1 * oO0OooOoO - Iiii1i1 % Iiii1i1 - iiIi1i11
def i1iiIiIi1iIII ( url ) :
 iII = xbmc . getInfoLabel ( "System.BuildVersion" )
 iII1iii = float ( iII [ : 4 ] )
 if iII1iii < 14 :
  OoiII111i1IiiII = 'You are running XBMC'
 else :
  OoiII111i1IiiII = 'You are running Kodi'
 iI111I11I1I1 = xbmcgui . Dialog ( )
 iI111I11I1I1 . ok ( OoiII111i1IiiII , "Your version is: %s" % iII1iii )
 if 34 - 34: O00OOOoOoo0O - O0 / ii1ii11IIIiiI - OoooO0Oo0O0
 if 12 - 12: i11111IIIII * O00OOOoOoo0O / i11iIiiIii + i11iIiiIii
 if 14 - 14: III1IiiI
 if 46 - 46: o0oOo0 % iiIi1i11 + oO0OooOoO * i1IIi
 if 81 - 81: III1IiiI - oOO00Oo + i1Iii1i1I
 if 49 - 49: OoooooooOO
 if 74 - 74: iiIi1i11 - oO0OooOoO
 if 66 - 66: i11iIiiIii + Iiii1i1 . o0oOo0
 if 46 - 46: Iiii1i1 / OoooO0Oo0O0
 if 41 - 41: i1IIi % iI1IiiIIIiIi + Iiii1i1 . II11iIiIIIiI / iIii1I11I1II1
 if 77 - 77: II11iIiIIIiI . ii1ii11IIIiiI % O0 - ii1ii11IIIiiI - II11iIiIIIiI
 if 95 - 95: i11111IIIII * oO0OooOoO % oOO00Oo * II11iIiIIIiI . o00O0OoO
 if 46 - 46: oO0OooOoO - ii1ii11IIIiiI % o0oOo0
 if 97 - 97: ii1ii11IIIiiI . O00OOOoOoo0O
 if 78 - 78: OoooO0Oo0O0 + OoooO0Oo0O0 . O00OOOoOoo0O - i11111IIIII * iIii1I11I1II1 * O0
 if 26 - 26: OoooooooOO + III1IiiI + ii1ii11IIIiiI . O0
 if 46 - 46: OoooooooOO - II11iIiIIIiI * Iiii1i1 * iiIi1i11 * Iiii1i1 . III1IiiI
 if 96 - 96: iI1IiiIIIiIi / i11111IIIII % oOO00Oo + o00O0OoO
 if 46 - 46: ii1ii11IIIiiI * o0Oo
 if 25 - 25: Iiii1i1 . i11111IIIII % O0 % i1IIi
 if 53 - 53: O0 % o0oOo0
 if 41 - 41: i11111IIIII
Ii11Iiii1iiii = i1II1iII1 ( )
I1iii11 = None
Iii1II1ii = None
I11iii1i = None
ooOo00 = None
I1111I1Ii = None
OOooOO0oO = None
OOo00 = None
oO0oooo = None
o00oo0 = None
Ii1i1i1i1I1Ii = None
iii1I1Iii = None
OOOoOO = None
OoO0OO0 = None
O0O0oooo = None
i11iI1i11I111 = None
i1iIIIi1i = None
ii1i1Iii = None
ooo0O = None
OOOoO0O = None
oo0iIiIII1Ii = None
OoO0oOO0o0O0O0O0 = None
OO0o0o0oo = None
I1II1IiI1 = None
oOOo0oo0O = None
O0oi1IiI = None
O0oOoiIII1Ii1 = None
iII1iii = None
I111iI = None
iI11IiIiiII1 = None
O00Oo = None
I1111i1I = None
OOoooOO0o = 'maintenance'
if 77 - 77: iI1IiiIIIiIi - i11iIiiIii * Iiii1i1 / iIii1I11I1II1 + i1IIi . O0
try :
 I1iii11 = urllib . unquote_plus ( Ii11Iiii1iiii [ "addon_id" ] )
except :
 pass
try :
 iIiII1 = urllib . unquote_plus ( Ii11Iiii1iiii [ "adult" ] )
except :
 pass
try :
 Iii1II1ii = urllib . unquote_plus ( Ii11Iiii1iiii [ "artpack" ] )
except :
 pass
try :
 I11iii1i = urllib . unquote_plus ( Ii11Iiii1iiii [ "audioaddons" ] )
except :
 pass
try :
 ooOo00 = urllib . unquote_plus ( Ii11Iiii1iiii [ "author" ] )
except :
 pass
try :
 I1111I1Ii = urllib . unquote_plus ( Ii11Iiii1iiii [ "buildname" ] )
except :
 pass
try :
 OOooOO0oO = urllib . unquote_plus ( Ii11Iiii1iiii [ "data_path" ] )
except :
 pass
try :
 OOo00 = urllib . unquote_plus ( Ii11Iiii1iiii [ "description" ] )
except :
 pass
try :
 oO0oooo = urllib . unquote_plus ( Ii11Iiii1iiii [ "email" ] )
except :
 pass
try :
 o00oo0 = urllib . unquote_plus ( Ii11Iiii1iiii [ "fanart" ] )
except :
 pass
try :
 Ii1i1i1i1I1Ii = urllib . unquote_plus ( Ii11Iiii1iiii [ "forum" ] )
except :
 pass
try :
 i111iii1I1 = urllib . unquote_plus ( Ii11Iiii1iiii [ "guisettingslink" ] )
except :
 pass
try :
 iii1I1Iii = urllib . unquote_plus ( Ii11Iiii1iiii [ "iconimage" ] )
except :
 pass
try :
 OOOoOO = urllib . unquote_plus ( Ii11Iiii1iiii [ "link" ] )
except :
 pass
try :
 OoO0OO0 = urllib . unquote_plus ( Ii11Iiii1iiii [ "local" ] )
except :
 pass
try :
 O0O0oooo = urllib . unquote_plus ( Ii11Iiii1iiii [ "messages" ] )
except :
 pass
try :
 i11iI1i11I111 = str ( Ii11Iiii1iiii [ "mode" ] )
except :
 pass
try :
 i1iIIIi1i = urllib . unquote_plus ( Ii11Iiii1iiii [ "name" ] )
except :
 pass
try :
 oO00oO00O0Oo = urllib . unquote_plus ( Ii11Iiii1iiii [ "pictureaddons" ] )
except :
 pass
try :
 ii1i1Iii = urllib . unquote_plus ( Ii11Iiii1iiii [ "programaddons" ] )
except :
 pass
try :
 ooo0O = urllib . unquote_plus ( Ii11Iiii1iiii [ "provider_name" ] )
except :
 pass
try :
 oo0iIiIII1Ii = urllib . unquote_plus ( Ii11Iiii1iiii [ "repo_link" ] )
except :
 pass
try :
 OOOoO0O = urllib . unquote_plus ( Ii11Iiii1iiii [ "repo_id" ] )
except :
 pass
try :
 OoO0oOO0o0O0O0O0 = urllib . unquote_plus ( Ii11Iiii1iiii [ "skins" ] )
except :
 pass
try :
 OO0o0o0oo = urllib . unquote_plus ( Ii11Iiii1iiii [ "sources" ] )
except :
 pass
try :
 I1II1IiI1 = urllib . unquote_plus ( Ii11Iiii1iiii [ "title" ] )
except :
 pass
try :
 oOOo0oo0O = urllib . unquote_plus ( Ii11Iiii1iiii [ "updated" ] )
except :
 pass
try :
 O0oi1IiI = urllib . unquote_plus ( Ii11Iiii1iiii [ "unread" ] )
except :
 pass
try :
 O0oOoiIII1Ii1 = urllib . unquote_plus ( Ii11Iiii1iiii [ "url" ] )
except :
 pass
try :
 iII1iii = urllib . unquote_plus ( Ii11Iiii1iiii [ "version" ] )
except :
 pass
try :
 I111iI = urllib . unquote_plus ( Ii11Iiii1iiii [ "video" ] )
except :
 pass
try :
 iI11IiIiiII1 = urllib . unquote_plus ( Ii11Iiii1iiii [ "videoaddons" ] )
except :
 pass
try :
 O00Oo = urllib . unquote_plus ( Ii11Iiii1iiii [ "welcometext" ] )
except :
 pass
try :
 I1111i1I = urllib . unquote_plus ( Ii11Iiii1iiii [ "zip_link" ] )
except :
 pass
 if 20 - 20: ii1ii11IIIiiI / O00OOOoOoo0O . III1IiiI + O0
if not os . path . exists ( Oo0oOOo ) :
 os . makedirs ( Oo0oOOo )
 if 100 - 100: O0 / iiIi1i11 - o0oOo0
if not os . path . exists ( O000OO0 ) :
 IiIiiI11i1Ii = open ( O000OO0 , mode = 'w+' )
 IiIiiI11i1Ii . write ( 'date="01011001"\nversion="0.0"' )
 IiIiiI11i1Ii . close ( )
 if 15 - 15: i1Iii1i1I - O0 - OoooooooOO
if not os . path . exists ( I1IIiiIiii ) :
 IiIiiI11i1Ii = open ( I1IIiiIiii , mode = 'w+' )
 IiIiiI11i1Ii . write ( 'id="None"\nname="None"' )
 IiIiiI11i1Ii . close ( )
 if 49 - 49: oO0OooOoO . OoooooooOO
if os . path . exists ( O000oo0O ) :
 try :
  shutil . rmtree ( O000oo0O )
 except :
  pass
  if 30 - 30: ii1ii11IIIiiI / i11iIiiIii - ii1ii11IIIiiI / o0oOo0 + iIii1I11I1II1 + i1IIi
if os . path . exists ( OOOOi11i1 ) :
 try :
  shutil . rmtree ( OOOOi11i1 )
 except :
  pass
  if 99 - 99: iiIi1i11 * o0Oo + III1IiiI % III1IiiI % iiIi1i11 * i11111IIIII
if os . path . exists ( IIIii1II1II ) :
 try :
  shutil . rmtree ( IIIii1II1II )
 except :
  pass
  if 98 - 98: iiIi1i11
oOoO0o0O = binascii . unhexlify ( '6164646f6e2e786d6c' )
iI1iIIiiii = xbmc . translatePath ( os . path . join ( II11iiii1Ii , o0OO00 , oOoO0o0O ) )
i111i1 = open ( iI1iIIiiii , mode = 'r' )
i11ii1iI = file . read ( i111i1 )
file . close ( i111i1 )
I1iI1iIIi = re . compile ( '<ref>(.+?)</ref>' ) . findall ( i11ii1iI )
iii1iii1I1I = I1iI1iIIi [ 0 ] if ( len ( I1iI1iIIi ) > 0 ) else ''
IiI1iI1II1I1i = hashlib . md5 ( open ( o00OO00OoO , 'rb' ) . read ( ) ) . hexdigest ( )
if iii1iii1I1I != IiI1iI1II1I1i :
 OOOoO00 = open ( O00o0OO , mode = 'r' )
 i11ii1iI = file . read ( OOOoO00 )
 file . close ( OOOoO00 )
 i1I = open ( o00OO00OoO , mode = 'w+' )
 i1I . write ( i11ii1iI )
 i1I . close ( )
 if 45 - 45: o0Oo . o0Oo - II11iIiIIIiI * iiIi1i11
if i11iI1i11I111 == None : II1I1 ( )
elif i11iI1i11I111 == 'ASCII_Check' : IIiI11i11 ( )
elif i11iI1i11I111 == 'addon_final_menu' : III1i1i11i ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'addon_categories' : ii ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'addon_countries' : O0OoooO0 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'addon_genres' : OO0O0o0o0 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'addon_install' : OooOO0o0 ( i1iIIIi1i , I1111i1I , oo0iIiIII1Ii , OOOoO0O , I1iii11 , ooo0O , Ii1i1i1i1I1Ii , OOooOO0oO )
elif i11iI1i11I111 == 'addon_install_badzip' : OooOoOOo0oO00 ( i1iIIIi1i , I1111i1I , oo0iIiIII1Ii , OOOoO0O , I1iii11 , ooo0O , Ii1i1i1i1I1Ii , OOooOO0oO )
elif i11iI1i11I111 == 'addon_install_na' : i1iiI ( i1iIIIi1i , I1111i1I , oo0iIiIII1Ii , OOOoO0O , I1iii11 , ooo0O , Ii1i1i1i1I1Ii , OOooOO0oO )
elif i11iI1i11I111 == 'addon_install_zero' : ooOoOOOOo ( i1iIIIi1i , I1111i1I , oo0iIiIII1Ii , OOOoO0O , I1iii11 , ooo0O , Ii1i1i1i1I1Ii , OOooOO0oO )
elif i11iI1i11I111 == 'addon_loop' : Iiii1i11ii1Ii ( )
elif i11iI1i11I111 == 'addon_removal_menu' : I1i1I ( )
elif i11iI1i11I111 == 'addonmenu' : I11iII ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'addon_settings' : ooOo0O0o0 ( )
elif i11iI1i11I111 == 'advanced_tools' : Oo0OOOOOOOo0O ( )
elif i11iI1i11I111 == 'backup' : BACKUP ( )
elif i11iI1i11I111 == 'backup_option' : iI1iIiiiI1I1 ( )
elif i11iI1i11I111 == 'backup_restore' : iii1IiI1I1 ( )
elif i11iI1i11I111 == 'browse_repos' : o0oOO00 ( )
elif i11iI1i11I111 == 'cb_test_loop' : Iiii1i11ii1Ii ( )
elif i11iI1i11I111 == 'CB_Menu' : I1i1i11 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'check_storage' : checkPath . check ( OOoooOO0o )
elif i11iI1i11I111 == 'check_updates' : Iii1iI ( )
elif i11iI1i11I111 == 'clear_cache' : ooo0o0 ( )
elif i11iI1i11I111 == 'create_keyword' : oooooO00OOO ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'community' : oo000o ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'community_backup' : OOO00o0 ( )
elif i11iI1i11I111 == 'community_backup_2' : OOoO0o ( )
elif i11iI1i11I111 == 'community_menu' : II1io0Oo00oOO ( O0oOoiIII1Ii1 , I111iI )
elif i11iI1i11I111 == 'countries' : ii1IIii ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'description' : iI1I1ii11IIi1 ( i1iIIIi1i , O0oOoiIII1Ii1 , I1111I1Ii , ooOo00 , iII1iii , OOo00 , oOOo0oo0O , OoO0oOO0o0O0O0O0 , iI11IiIiiII1 , I11iii1i , ii1i1Iii , oO00oO00O0Oo , OO0o0o0oo , iIiII1 )
elif i11iI1i11I111 == 'delete_path' : I1I1ii1111 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'delete_profile' : II111Ii11II ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'fix_special' : ii1OO0 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'full_backup' : iiioo0Oo ( )
elif i11iI1i11I111 == 'full_clean' : oooOooooO ( )
elif i11iI1i11I111 == 'genres' : ii1iI11 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'gotham' : o0I1IiiiiI1i1I ( )
elif i11iI1i11I111 == 'grab_addons' : i1IIiI1iII ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'grab_builds' : OO0oooOO ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'grab_hardware' : oOO0 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'grab_news' : o00o0o0oOo0 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'grab_tutorials' : iii1iII ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'guisettingsfix' : iIioO00O0o0oOOO ( O0oOoiIII1Ii1 , OoO0OO0 )
elif i11iI1i11I111 == 'hardware_filter_menu' : IIIII11 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'hardware_final_menu' : OOo00oOo ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'hardware_root_menu' : o00OooooOOOO ( )
elif i11iI1i11I111 == 'helix' : Ii1i11i ( )
elif i11iI1i11I111 == 'hide_passwords' : oOO0oOoooOoo0 ( )
elif i11iI1i11I111 == 'ipcheck' : I1IIII ( )
elif i11iI1i11I111 == 'install_content' : Iii1I ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'install_from_zip' : OOooOOoOoo0o ( )
elif i11iI1i11I111 == 'instructions' : oooo0OoOO ( )
elif i11iI1i11I111 == 'instructions_1' : IiIii1iIIII ( )
elif i11iI1i11I111 == 'instructions_2' : ooo0000oo0 ( )
elif i11iI1i11I111 == 'instructions_3' : oOoOo000Ooooo ( )
elif i11iI1i11I111 == 'instructions_4' : O0OOoo ( )
elif i11iI1i11I111 == 'instructions_5' : I1I11I1i1i1II ( )
elif i11iI1i11I111 == 'instructions_6' : Instructions_6 ( )
elif i11iI1i11I111 == 'keywords' : IiIiii1IiiiI ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'kill_xbmc' : O00OO00OOOoO ( )
elif i11iI1i11I111 == 'kodi_settings' : iiIIiIi1i1I1 ( )
elif i11iI1i11I111 == 'local_backup' : o0ooOOOo0O0 ( )
elif i11iI1i11I111 == 'LocalGUIDialog' : ooOO0O0O ( )
elif i11iI1i11I111 == 'log' : oOoo ( )
elif i11iI1i11I111 == 'login_check' : OOoO0 ( )
elif i11iI1i11I111 == 'manual_search' : ooOO0o ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'nan_menu' : IiIiIIII ( )
elif i11iI1i11I111 == 'news_root_menu' : i1Ii1IIIi111111 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'news_menu' : O000o ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'open_system_info' : I11II1i1I11I1 ( )
elif i11iI1i11I111 == 'open_filemanager' : oO0O ( )
elif i11iI1i11I111 == 'openelec_backup' : ooO0O ( )
elif i11iI1i11I111 == 'openelec_settings' : o0o00o0Oo ( )
elif i11iI1i11I111 == 'play_video' : yt . PlayVideo ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'platform_menu' : O0oOOoO0 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'pop' : OO00o0oOO ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'register' : oO00Oo0oOO0 ( )
elif i11iI1i11I111 == 'remove_addon_data' : O0ooo0O00Ooo0 ( )
elif i11iI1i11I111 == 'remove_addons' : Ii1 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'remove_build' : ooooO0OO0O ( )
elif i11iI1i11I111 == 'remove_crash_logs' : OooOoOo ( )
elif i11iI1i11I111 == 'remove_nag' : OooO0ooO0o0 ( )
elif i11iI1i11I111 == 'remove_packages' : I1i11IIiiIiI ( )
elif i11iI1i11I111 == 'remove_textures' : ii111iiIii ( )
elif i11iI1i11I111 == 'restore' : RESTORE ( )
elif i11iI1i11I111 == 'restore_backup' : o0OOOOoo ( i1iIIIi1i , O0oOoiIII1Ii1 , OOo00 )
elif i11iI1i11I111 == 'restore_community' : IIiii1I ( i1iIIIi1i , O0oOoiIII1Ii1 , I111iI , OOo00 , OoO0oOO0o0O0O0O0 , i111iii1I1 , Iii1II1ii )
elif i11iI1i11I111 == 'restore_local_CB' : OO00O0O ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'restore_local_gui' : IIIiIIIi111iI ( )
elif i11iI1i11I111 == 'restore_local_OE' : o0O00ooo0oO0o ( )
elif i11iI1i11I111 == 'restore_openelec' : Iii1I1i1i1 ( i1iIIIi1i , O0oOoiIII1Ii1 , I111iI )
elif i11iI1i11I111 == 'restore_option' : OO0OO0 ( )
elif i11iI1i11I111 == 'restore_zip' : o00ooOOo0ooO0 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'run_addon' : OooOO0Ooo0o ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'runtest' : speedtest . runtest ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'search_addons' : O0OO ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'search_builds' : o0OOo0o0 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'Search_Private' : Private_Search ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'showinfo' : o00000ooo0oo ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'showinfo2' : oOOoOOO ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'SortBy' : oOOOo ( BuildURL , type )
elif i11iI1i11I111 == 'speed_instructions' : OOo00o0oOO0o ( )
elif i11iI1i11I111 == 'speedtest_menu' : o0OiI1 ( )
elif i11iI1i11I111 == 'switch_profile_menu' : oOoOOO ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'switch_profile' : O0oOoOOO000 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'text_guide' : O000oiiI1I ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'tools' : O0oOoO0o0oO ( )
elif i11iI1i11I111 == 'tutorial_final_menu' : OOoOOo0oOO ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'tutorial_addon_menu' : iIIi1IiiiII1i ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'tutorial_root_menu' : oooOo0O00o ( )
elif i11iI1i11I111 == 'unhide_passwords' : IiI1oO0o0O ( )
elif i11iI1i11I111 == 'update' : IiI1iiiIii ( )
elif i11iI1i11I111 == 'update_community' : IiI ( i1iIIIi1i , O0oOoiIII1Ii1 , I111iI , OOo00 , OoO0oOO0o0O0O0O0 , i111iii1I1 , Iii1II1ii )
elif i11iI1i11I111 == 'uploadlog' : iIIi1i111iI ( )
elif i11iI1i11I111 == 'user_info' : iI1iIiiIii ( )
elif i11iI1i11I111 == 'xbmc_menu' : O00o0oO0oO0 ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'xbmcversion' : i1iiIiIi1iIII ( O0oOoiIII1Ii1 )
elif i11iI1i11I111 == 'wipe_xbmc' : i1i11Ii1 ( i11iI1i11I111 )
xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
')