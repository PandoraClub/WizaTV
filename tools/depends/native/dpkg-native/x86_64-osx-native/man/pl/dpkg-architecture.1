.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH dpkg\-architecture 1 2007\-03\-06 "Projekt Debiana" "programy pomocnicze dpkg"
.SH NAZWA
dpkg\-architecture \- ustawia i zwraca architekturê budowania pakietów.
.
.SH SK£ADNIA
\fBdpkg\-architecture\fP [\fIopcje\fP] [\fIpolecenia\fP]
.PP
.
.SH OPIS
dpkg\-architecture dostarcza sposobu na okre¶lenie i ustawienie architektury
budowania oraz architektury docelowej dla budowania pakietów.
.PP
Architektura budowania jest zawsze okre¶lana przez wywo³anie \fBdpkg\fP i nie
mo¿e byæ ustawiona w linii poleceñ.
.PP
Mo¿na podaæ architekturê komputera przez podanie jednej lub obu opcji
spo¶ród \fB\-a\fP i \fB\-t\fP. Warto¶æ domy¶lna jest okre¶lana przez wywo³anie
programu \fBgcc\fP(1), a w razie gdy \s-1CC\s0 i gcc nie s± dostêpne, to jest
taka sama, jak architektura budowania. Wystarczy podaæ tylko jedn± spo¶ród
opcji \fB\-a\fP i \fB\-t\fP, poniewa¿ ta druga zostanie ustawiona na sensown±
warto¶æ domy¶ln±. Co wiêcej, czêsto podanie jednej opcji jest lepsze ni¿
podanie ich obu naraz, gdy¿ \fBdpkg\-architecture\fP wypisze ostrze¿enie, je¶li
warto¶ci nie bêd± sobie odpowiada³y.
.
.SH POLECENIA
.TP 
\fB\-l\fP
Wy¶wietla zmienne ¶rodowiskowe, po jednej w ka¿dej linii, w formacie
\fIZMIENNA=warto¶æ\fP. Jest to domy¶lna akcja.
.TP 
\fB\-e\fP\fIarchitektura\-debiana\fP
Sprawdza równowa¿no¶æ architektur. Domy¶lnie \fIarchitektura\-debiana\fP jest
porównywana z bie¿±c± architektur± Debiana, traktowan± jako architektura
docelowa. Ta akcja nie rozwija masek architektur. Polecenie koñczy siê kodem
wyj¶cia 0 je¶li dopasowanie architektur siê powiod³o, lub kodem 1 je¶li nie
by³o dopasowania.
.TP 
\fB\-i\fP\fImaska\-architektury\fP
Sprawdzenie architektury przez rozwiniêcie w odpowiedni sposób
\fImaski\-architektury\fP i porównanie z bie¿±c± architektur± Debiana. Polecenie
koñczy siê kodem wyj¶cia 0 je¶li dopasowanie architektur siê powiod³o, lub
kodem 1 je¶li nie by³o dopasowania.
.TP 
\fB\-q\fP\fInazwa\-zmiennej\fP
Wy¶wietla warto¶æ pojedynczej zmiennej.
.TP 
\fB\-s\fP
Wy¶wietla polecenie export, które mo¿e byæ u¿yte do ustawienia zmiennych
¶rodowiskowych za pomoc± eval.
.TP 
\fB\-u\fP
Wy¶wietla polecenie podobne do \fB\-s\fP, jednak¿e ze wszystkimi zmiennymi
nieustawionymi.
.TP 
\fB\-c\fP\fI polecenie\fP
Wykonuje \fIpolecenie\fP w ¶rodowisku, które ma wszystkie zmienne ustawione na
wyznaczone warto¶ci.
.TP 
\fB\-L\fP
Wy¶wietla listê poprawnych nazw architektur.
.TP 
\fB\-\-help\fP
Wy¶wietla informacjê o u¿ytkowaniu i koñczy dzia³anie.
.TP 
\fB\-\-version\fP
Wy¶wietla informacjê o wersji i pomy¶lnie koñczy dzia³anie.
.
.SH OPCJE
.TP 
\fB\-a\fP\fIarchitektura\-debiana\fP
Ustawia architekturê Debiana.
.TP 
\fB\-t\fP\fItyp\-systemu\-gnu\fP
Ustawia typ systemu GNU.
.TP 
\fB\-f\fP
Honorowane s± warto¶ci ustawione w istniej±cych zmiennych ¶rodowiskowych o
tych samych nazwach, co u¿ywane w skryptach (np. u¿yte przez
\fBdpkg\-architecture\fP), chyba ¿e jest obecna ta flaga wymuszenia. Pozwala to
na nadpisanie warto¶ci nawet je¶li wywo³anie \fBdpkg\-architecture\fP jest
ukryte g³êboko w jakim¶ innym skrypcie (np. \fBdpkg\-buildpackage\fP(1)).
.
.SH WARUNKI
.IP "komputer budowania" 4
Komputer, na którym pakiet jest budowany.
.IP komputer\-go¶æ 4
Architektura, dla której pakiet jest budowany.
.IP "architektura Debiana" 4
£añcuch znaków zawieraj±cy architekturê Debiana, która okre¶la drzewo
binarne w archiwum \s-1FTP\s0. Przyk³ady: i386, sparc, hurd\-i386.
.IP "maska architektury" 4
Maska architektury jest specjalnym ³añcuchem znaków, który bêdzie pasowa³ do
ka¿dej architektury, która jest jego czê¶ci±. Ogólna postaæ jest
nastêpuj±ca: <j±dro>\-<procesor>. Przyk³ady: linux\-any,
any\-i386, hurd\-any.
.IP "typ systemu \s-1GNU\s0" 4
£añcuch znaków okre¶laj±cy architekturê sk³adaj±cy siê z dwóch czê¶ci
oddzielonych my¶lnikiem: procesor i system. Przyk³ady: i386\-linux\-gnu,
sparc\-linux\-gnu, i386\-gnu, x86_64\-netbsd.
.
.SH ZMIENNE
\fBdpkg\-architecture\fP ustawia nastêpuj±ce zmienne:
.IP \s-1DEB_BUILD_ARCH\s0 4
Architektura wg Debiana komputera, na którym budowany jest pakiet.
.IP \s-1DEB_BUILD_ARCH_OS\s0 4
Nazwa systemu wg Debiana komputera, na którym budowany jest pakiet.
.IP \s-1DEB_BUILD_ARCH_CPU\s0 4
Nazwa procesora wg Debiana komputera, na którym budowany jest pakiet.
.IP \s-1DEB_BUILD_GNU_TYPE\s0 4
Typ systemu \s-1GNU\s0 komputera, na którym budowany jest pakiet.
.IP \s-1DEB_BUILD_GNU_CPU\s0 4
Czê¶æ dotycz±ca \s-1CPU\s0 z \s-1DEB_BUILD_GNU_TYPE\s0
.IP \s-1DEB_BUILD_GNU_SYSTEM\s0 4
Cze¶æ dotycz±ca systemu z \s-1DEB_BUILD_GNU_TYPE\s0.
.IP \s-1DEB_HOST_ARCH\s0 4
Architektura wg Debiana komputera\-go¶cia.
.IP \s-1DEB_BUILD_ARCH_OS\s0 4
Nazwa systemu wg Debiana komputera\-go¶cia.
.IP \s-1DEB_HOST_ARCH_CPU\s0 4
Nazwa procesora wg Debiana komputera\-go¶cia.
.IP \s-1DEB_HOST_GNU_TYPE\s0 4
Typ systemu \s-1GNU\s0 komputera\-go¶cia.
.IP \s-1DEB_HOST_GNU_CPU\s0 4
Czê¶æ dotycz±ca \s-1CUP\s0 z \s-1DEB_HOST_GNU_TYPE\s0.
.IP \s-1DEB_HOST_GNU_SYSTEM\s0 4
Czê¶æ dotycz±ca systemu z \s-1DEB_HOST_GNU_TYPE\s0.
.
.SH DEBIAN/RULES
Zmienne ¶rodowiskowe ustawione przez \fBdpkg\-architecture\fP s± przekazywane do
\fIdebian/rules\fP jako zmienne programu make (patrz dokumentacja do
make). Jednak¿e nie nale¿y na nich polegaæ, gdy¿ psuje to rêczne
uruchomienie tego skryptu. Zamiast tego, nale¿y zawsze inicjowaæ je,
u¿ywaj±c \fBdpkg\-architecture\fP z opcj± \-q. Poni¿ej znajduje siê parê
przyk³adów, które tak¿e pokazuj±, jak mo¿na polepszyæ wsparcie dla
kompilacji krzy¿owej pakietu:
.PP

Zamiast:
.IP
.nf
ARCH=\`dpkg \-\-print\-architecture\`
configure $(\s-1ARCH\s0)\-linux
.fi
.PP
proszê u¿ywaæ:
.IP
.nf
\&\s-1DEB_BUILD_GNU_TYPE\s0 := $(shell dpkg\-architecture \-qDEB_BUILD_GNU_TYPE)
\&\s-1DEB_HOST_GNU_TYPE\s0 := $(shell dpkg\-architecture \-qDEB_HOST_GNU_TYPE)

configure \-\-build=$(\s-1DEB_BUILD_GNU_TYPE\s0) \-\-host=$(\s-1DEB_HOST_GNU_TYPE\s0)
.fi
.PP

Zamiast:
.IP
.nf
ARCH=\`dpkg \-\-print\-architecture\`
ifeq ($(\s-1ARCH\s0),alpha)
  ...
endif
.fi
.PP
proszê u¿ywaæ:
.IP
.nf
\&\s-1DEB_HOST_ARCH\s0 := $(shell dpkg\-architecture \-qDEB_HOST_ARCH)

ifeq ($(\s-1DEB_HOST_ARCH\s0),alpha)
  ...
endif
.fi
.PP
albo je¶li trzeba sprawdziæ tylko typ CPU lub OS, nale¿y u¿yæ zmiennych
DEB_HOST_ARCH_CPU lub DEB_HOST_ARCH_OS.
.PP
Ogólnie wywo³ywanie dpkg w pliku rules w celu pobrania informacji o
architekturze jest przestarza³e (chyba ¿e chce siê zachowaæ kompatybilno¶æ
wsteczn±, patrz ni¿ej). W szczególno¶ci opcja \-\-print\-architecture jest
niezbyt wiarygodna, poniewa¿ istniej± architektury Debiana, które nie s±
równe nazwie procesora.
.
.SH "KOMPATYBILNO¦Æ WSTECZNA"
Zmienne DEB_HOST_ARCH_CPU oraz DEB_HOST_ARCH_OS s± dostêpne w miarê nowych
wersjach \fBdpkg\-architecture\fP (od dpkg 1.13.2). Wcze¶niej w plikach
\fIdebian/rules\fP sprawdza³o siê zmienne DEB_HOST_GNU_CPU lub
DEB_HOST_GNU_TYPE, które zosta³y zmienione.
.PP
Wszystkie pliki \fIdebian/rules\fP, decyduj±ce na podstawie tych zmiennych jak
i co kompilowaæ, powinny byæ zaktualizowane i przystosowane do u¿ywania
nowych zmiennych i ich warto¶ci. Aby zachowaæ wsteczn± kompatybilno¶æ z
poprzednimi wersjami dpkg\-dev, mo¿na u¿yæ nastêpuj±cego kodu:
.IP
.nf
DEB_HOST_ARCH_CPU := $(shell dpkg\-architecture \-qDEB_HOST_ARCH_CPU 2>/dev/null)
DEB_HOST_ARCH_OS := $(shell dpkg\-architecture \-qDEB_HOST_ARCH_OS 2>/dev/null)

# Bierze pod uwagê wyj¶cie ze starego dpkg\-architecture.
ifeq ($(DEB_HOST_ARCH_CPU),)
  DEB_HOST_ARCH_CPU := $(shell dpkg\-architecture \-qDEB_HOST_GNU_CPU)
  ifeq ($(DEB_HOST_ARCH_CPU),x86_64)
    DEB_HOST_ARCH_CPU := amd64
  endif
endif
ifeq ($(DEB_HOST_ARCH_OS),)
  DEB_HOST_ARCH_OS := $(subst \-gnu,,$(shell dpkg\-architecture \-qDEB_HOST_GNU_SYSTEM))
  ifeq ($(DEB_HOST_ARCH_OS),gnu)
    DEB_HOST_ARCH_OS := hurd
  endif
endif
.fi
.PP
I podobnie dla DEB_BUILD_ARCH_CPU oraz DEB_BUILD_ARCH_OS.
.PP
Je¶li chcesz wci±¿ obs³ugiwaæ wersje dpkg\-dev, które nie zawieraj±
\fBdpkg\-architecture\fP, to poni¿szy kod wykonuje to zadanie:
.IP
.nf
\&\s-1DEB_BUILD_ARCH\s0 := $(shell dpkg \-\-print\-architecture)
\&\s-1DEB_BUILD_GNU_CPU\s0 := $(patsubst hurd\-%,%,$(\s-1DEB_BUILD_ARCH\s0))
ifeq ($(filter\-out hurd\-%,$(\s-1DEB_BUILD_ARCH\s0)),)
  \s-1DEB_BUILD_GNU_SYSTEM\s0 := gnu
else
  \s-1DEB_BUILD_GNU_SYSTEM\s0 := linux\-gnu
endif
DEB_BUILD_GNU_TYPE=$(\s-1DEB_BUILD_GNU_CPU\s0)\-$(\s-1DEB_BUILD_GNU_SYSTEM\s0)

\&\s-1DEB_HOST_ARCH\s0 := $(\s-1DEB_BUILD_ARCH\s0)
\&\s-1DEB_HOST_GNU_CPU\s0 := $(\s-1DEB_BUILD_GNU_CPU\s0)
\&\s-1DEB_HOST_GNU_SYSTEM\s0 := $(\s-1DEB_BUILD_GNU_SYSTEM\s0)
\&\s-1DEB_HOST_GNU_TYPE\s0 := $(\s-1DEB_BUILD_GNU_TYPE\s0)
.fi
.PP
Umie¶æ podzbiór tych linii na górze pliku debian/rules; te domy¶lne warto¶ci
bêd± nadpisane przez dpkg\-architecture, je¶li jest u¿ywane.
.PP
Nie ma potrzeby u¿ywania pe³nego zestawu zmiennych. Mo¿na wybraæ spójny ich
zbiór, zawieraj±cy warto¶ci u¿ywane w pliku rules. Na przyk³ad, je¿eli
potrzebujesz tylko architektury Debiana komputera, dla którego budowany jest
pakiet, wystarczaj±ce jest u¿ycie "DEB_HOST_ARCH=\`dpkg
\-\-print\-architecture\`" (tak naprawdê jest to architektura Debiana maszyny,
na której jest budowany pakiet, ale proszê pamiêtaæ, ¿e próbujemy tylko
zachowaæ wsteczn± zgodno¶æ z natywn± kompilacj±).
.PP
Opcje \fB\-e\fP i \fB\-i\fP zosta³y wprowadzone w miarê nowych wersjach
\fBdpkg\-architecture\fP (od wersji dpkg 1.13.13).
.
.SH PRZYK£ADY
\fBdpkg\-buildpackage\fP akceptuje opcjê \fB\-a\fP i przekazuje j± do
\fBdpkg\-architecture\fP. Inne przyk³ady:
.IP
CC=i386\-gnu\-gcc dpkg\-architecture \-c debian/rules build
.IP
eval \`dpkg\-architecture \-u\`
.PP
Sprawdzanie, czy architektura jest równa architekturze bie¿±cej lub podanej:
.IP
dpkg\-architecture \-elinux\-alpha
.IP
dpkg\-architecture \-amips \-elinux\-mips
.PP
Sprawdzanie, czy architektura bie¿±ca podana przez \-a jest systemem Linuksa:
.IP
dpkg\-architecture \-ilinux\-any
.IP
dpkg\-architecture \-ai386 \-ilinux\-any
.
.SH PLIKI
Wszystkie te pliki musz± byæ obecne, aby \fBdpkg\-architecture\fP w ogóle
dzia³a³. Ich po³o¿enie mo¿nazmieniæ w czasie dzia³ania programu przez
ustawienie zmiennej ¶rodowiskowej DPKG_DATADIR.
.TP 
\fI/usr/share/dpkg/cputable\fP
Tabela znanych nazw procesorów i ich mapowanie na nazwy GNU.
.TP 
\fI/usr/share/dpkg/ostable\fP
Tabela nazw znanych systemów operacyjnych i ich mapowanie na nazwy GNU.
.TP 
\fI/usr/share/dpkg/triplettable\fP
Mapowanie miêdzy trójkami architektur Debiana a nazwami architektur Debiana.
.
.SH "ZOBACZ TAK¯E"
\fBdpkg\-buildpackage\fP(1), \fBdpkg\-cross\fP(1).
.
.SH AUTOR
\fBdpkg\-architecture\fP i ta strona podrêcznika ekranowego zosta³y napisane
Marcusa Brinkmanna <brinkmd@debian.org>.

.SH "T£UMACZE"
Piotr Roszatycki <dexter@debian.org>, 1999
.br
Bartosz Feñski <fenio@debian.org>, 2004-2005
.br
Robert Luberda <robert@debian.org>, 2006-2008
.br
Wiktor Wandachowicz <siryes@gmail.com>, 2008
